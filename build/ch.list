
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4826      	ldr	r0, [pc, #152]	; (800025c <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	4825      	ldr	r0, [pc, #148]	; (8000260 <endfiniloop+0xa>)
 80001ca:	f64e 5108 	movw	r1, #60680	; 0xed08
 80001ce:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d2:	6008      	str	r0, [r1, #0]
 80001d4:	2002      	movs	r0, #2
 80001d6:	f380 8814 	msr	CONTROL, r0
 80001da:	f3bf 8f6f 	isb	sy
 80001de:	f001 fb1f 	bl	8001820 <__core_init>
 80001e2:	f000 fa65 	bl	80006b0 <__early_init>
 80001e6:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001ea:	491e      	ldr	r1, [pc, #120]	; (8000264 <endfiniloop+0xe>)
 80001ec:	4a1e      	ldr	r2, [pc, #120]	; (8000268 <endfiniloop+0x12>)

080001ee <msloop>:
 80001ee:	4291      	cmp	r1, r2
 80001f0:	bf3c      	itt	cc
 80001f2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f6:	e7fa      	bcc.n	80001ee <msloop>
 80001f8:	491c      	ldr	r1, [pc, #112]	; (800026c <endfiniloop+0x16>)
 80001fa:	4a18      	ldr	r2, [pc, #96]	; (800025c <endfiniloop+0x6>)

080001fc <psloop>:
 80001fc:	4291      	cmp	r1, r2
 80001fe:	bf3c      	itt	cc
 8000200:	f841 0b04 	strcc.w	r0, [r1], #4
 8000204:	e7fa      	bcc.n	80001fc <psloop>
 8000206:	491a      	ldr	r1, [pc, #104]	; (8000270 <endfiniloop+0x1a>)
 8000208:	4a1a      	ldr	r2, [pc, #104]	; (8000274 <endfiniloop+0x1e>)
 800020a:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <endfiniloop+0x22>)

0800020c <dloop>:
 800020c:	429a      	cmp	r2, r3
 800020e:	bf3e      	ittt	cc
 8000210:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000214:	f842 0b04 	strcc.w	r0, [r2], #4
 8000218:	e7f8      	bcc.n	800020c <dloop>
 800021a:	2000      	movs	r0, #0
 800021c:	4917      	ldr	r1, [pc, #92]	; (800027c <endfiniloop+0x26>)
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <endfiniloop+0x2a>)

08000220 <bloop>:
 8000220:	4291      	cmp	r1, r2
 8000222:	bf3c      	itt	cc
 8000224:	f841 0b04 	strcc.w	r0, [r1], #4
 8000228:	e7fa      	bcc.n	8000220 <bloop>
 800022a:	f001 fab9 	bl	80017a0 <__init_ram_areas>
 800022e:	f001 faef 	bl	8001810 <__late_init>
 8000232:	4c14      	ldr	r4, [pc, #80]	; (8000284 <endfiniloop+0x2e>)
 8000234:	4d14      	ldr	r5, [pc, #80]	; (8000288 <endfiniloop+0x32>)

08000236 <initloop>:
 8000236:	42ac      	cmp	r4, r5
 8000238:	da03      	bge.n	8000242 <endinitloop>
 800023a:	f854 1b04 	ldr.w	r1, [r4], #4
 800023e:	4788      	blx	r1
 8000240:	e7f9      	b.n	8000236 <initloop>

08000242 <endinitloop>:
 8000242:	f004 f9fd 	bl	8004640 <main>
 8000246:	4c11      	ldr	r4, [pc, #68]	; (800028c <endfiniloop+0x36>)
 8000248:	4d11      	ldr	r5, [pc, #68]	; (8000290 <endfiniloop+0x3a>)

0800024a <finiloop>:
 800024a:	42ac      	cmp	r4, r5
 800024c:	da03      	bge.n	8000256 <endfiniloop>
 800024e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000252:	4788      	blx	r1
 8000254:	e7f9      	b.n	800024a <finiloop>

08000256 <endfiniloop>:
 8000256:	f001 bad3 	b.w	8001800 <__default_exit>
 800025a:	0000      	.short	0x0000
 800025c:	20000800 	.word	0x20000800
 8000260:	08000000 	.word	0x08000000
 8000264:	20000000 	.word	0x20000000
 8000268:	20000400 	.word	0x20000400
 800026c:	20000400 	.word	0x20000400
 8000270:	08007444 	.word	0x08007444
 8000274:	20000800 	.word	0x20000800
 8000278:	2000087c 	.word	0x2000087c
 800027c:	20000880 	.word	0x20000880
 8000280:	20001320 	.word	0x20001320
 8000284:	080001c0 	.word	0x080001c0
 8000288:	080001c0 	.word	0x080001c0
 800028c:	080001c0 	.word	0x080001c0
 8000290:	080001c0 	.word	0x080001c0

08000294 <_port_switch>:
 8000294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000298:	f8c1 d00c 	str.w	sp, [r1, #12]
 800029c:	68c3      	ldr	r3, [r0, #12]
 800029e:	469d      	mov	sp, r3
 80002a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a4 <_port_thread_start>:
 80002a4:	2300      	movs	r3, #0
 80002a6:	f383 8811 	msr	BASEPRI, r3
 80002aa:	4628      	mov	r0, r5
 80002ac:	47a0      	blx	r4
 80002ae:	2000      	movs	r0, #0
 80002b0:	f000 ff9e 	bl	80011f0 <chThdExit>

080002b4 <_port_switch_from_isr>:
 80002b4:	f000 fb54 	bl	8000960 <chSchDoReschedule>

080002b8 <_port_exit_from_isr>:
 80002b8:	df00      	svc	0
 80002ba:	e7fe      	b.n	80002ba <_port_exit_from_isr+0x2>
 80002bc:	0000      	movs	r0, r0
	...

080002c0 <notify2.lto_priv.73>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 80002c0:	4a02      	ldr	r2, [pc, #8]	; (80002cc <notify2.lto_priv.73+0xc>)
 80002c2:	68d3      	ldr	r3, [r2, #12]
 80002c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c8:	60d3      	str	r3, [r2, #12]
 80002ca:	4770      	bx	lr
 80002cc:	40004400 	.word	0x40004400

080002d0 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80002d0:	2320      	movs	r3, #32
 80002d2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <_port_irq_epilogue+0x4c>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80002de:	d102      	bne.n	80002e6 <_port_irq_epilogue+0x16>
 80002e0:	f383 8811 	msr	BASEPRI, r3
 80002e4:	4770      	bx	lr
void _port_irq_epilogue(void) {
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80002ea:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80002ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002f2:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 80002f6:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80002fa:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80002fe:	4a08      	ldr	r2, [pc, #32]	; (8000320 <_port_irq_epilogue+0x50>)
 8000300:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8000302:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000304:	6889      	ldr	r1, [r1, #8]
 8000306:	6892      	ldr	r2, [r2, #8]
 8000308:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800030a:	bf8c      	ite	hi
 800030c:	4a05      	ldrhi	r2, [pc, #20]	; (8000324 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800030e:	4a06      	ldrls	r2, [pc, #24]	; (8000328 <_port_irq_epilogue+0x58>)
 8000310:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000ed00 	.word	0xe000ed00
 8000320:	20001238 	.word	0x20001238
 8000324:	080002b5 	.word	0x080002b5
 8000328:	080002b8 	.word	0x080002b8
 800032c:	00000000 	.word	0x00000000

08000330 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000334:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000338:	6933      	ldr	r3, [r6, #16]
 800033a:	079b      	lsls	r3, r3, #30
 800033c:	d403      	bmi.n	8000346 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800033e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8000342:	f7ff bfc5 	b.w	80002d0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8000346:	2500      	movs	r5, #0
 8000348:	6135      	str	r5, [r6, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800034a:	2720      	movs	r7, #32
 800034c:	f387 8811 	msr	BASEPRI, r7
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8000350:	4c1b      	ldr	r4, [pc, #108]	; (80003c0 <VectorB0+0x90>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000352:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8000354:	69e3      	ldr	r3, [r4, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000356:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000358:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800035c:	1a88      	subs	r0, r1, r2
 800035e:	4570      	cmp	r0, lr
 8000360:	f104 081c 	add.w	r8, r4, #28
 8000364:	d319      	bcc.n	800039a <VectorB0+0x6a>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000366:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
 8000368:	f8d3 900c 	ldr.w	r9, [r3, #12]
    ch.vtlist.lasttime += vtp->delta;
 800036c:	4472      	add	r2, lr
    vtp->func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800036e:	4541      	cmp	r1, r8
    ch.vtlist.lasttime += vtp->delta;
 8000370:	62a2      	str	r2, [r4, #40]	; 0x28
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000372:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.next = vtp->next;
 8000376:	61e1      	str	r1, [r4, #28]
    vtp->func = NULL;
 8000378:	60dd      	str	r5, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800037a:	bf08      	it	eq
 800037c:	60f5      	streq	r5, [r6, #12]
 800037e:	f385 8811 	msr	BASEPRI, r5
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 8000382:	6918      	ldr	r0, [r3, #16]
 8000384:	47c8      	blx	r9
 8000386:	f387 8811 	msr	BASEPRI, r7
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 800038a:	69e3      	ldr	r3, [r4, #28]
  return (systime_t)STM32_ST_TIM->CNT;
 800038c:	6a71      	ldr	r1, [r6, #36]	; 0x24
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 800038e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000390:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000394:	1a88      	subs	r0, r1, r2
 8000396:	4586      	cmp	lr, r0
 8000398:	d9e5      	bls.n	8000366 <VectorB0+0x36>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800039a:	4543      	cmp	r3, r8
 800039c:	d008      	beq.n	80003b0 <VectorB0+0x80>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 800039e:	4472      	add	r2, lr
 80003a0:	1a52      	subs	r2, r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80003a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 80003a6:	2a02      	cmp	r2, #2
 80003a8:	bf2c      	ite	cs
 80003aa:	188a      	addcs	r2, r1, r2
 80003ac:	1c8a      	addcc	r2, r1, #2
 80003ae:	635a      	str	r2, [r3, #52]	; 0x34
 80003b0:	2300      	movs	r3, #0
 80003b2:	f383 8811 	msr	BASEPRI, r3
}
 80003b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 80003ba:	f7ff bf89 	b.w	80002d0 <_port_irq_epilogue>
 80003be:	bf00      	nop
 80003c0:	20001238 	.word	0x20001238
	...

080003d0 <SVC_Handler>:
void SVC_Handler(void) {
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80003d4:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 80003d8:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80003da:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80003de:	2300      	movs	r3, #0
 80003e0:	f383 8811 	msr	BASEPRI, r3
}
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	0000      	movs	r0, r0
	...

080003f0 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
 80003f0:	b470      	push	{r4, r5, r6}
 80003f2:	2320      	movs	r3, #32
 80003f4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80003f8:	4e0b      	ldr	r6, [pc, #44]	; (8000428 <chCoreAllocAligned+0x38>)
  if (((size_t)endmem - (size_t)p) < size) {
 80003fa:	4a0c      	ldr	r2, [pc, #48]	; (800042c <chCoreAllocAligned+0x3c>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80003fc:	6833      	ldr	r3, [r6, #0]
  if (((size_t)endmem - (size_t)p) < size) {
 80003fe:	6815      	ldr	r5, [r2, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8000400:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
 8000402:	424c      	negs	r4, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8000404:	440b      	add	r3, r1
  size = MEM_ALIGN_NEXT(size, align);
 8000406:	1e4a      	subs	r2, r1, #1
 8000408:	1811      	adds	r1, r2, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 800040a:	ea03 0004 	and.w	r0, r3, r4
  size = MEM_ALIGN_NEXT(size, align);
 800040e:	4021      	ands	r1, r4
  if (((size_t)endmem - (size_t)p) < size) {
 8000410:	1a2b      	subs	r3, r5, r0
 8000412:	4299      	cmp	r1, r3
  nextmem = p + size;
 8000414:	bf9a      	itte	ls
 8000416:	1809      	addls	r1, r1, r0
 8000418:	6031      	strls	r1, [r6, #0]
    return NULL;
 800041a:	2000      	movhi	r0, #0
 800041c:	2300      	movs	r3, #0
 800041e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
 8000422:	bc70      	pop	{r4, r5, r6}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	200009ec 	.word	0x200009ec
 800042c:	200009d8 	.word	0x200009d8

08000430 <wakeup.lto_priv.180>:
 8000430:	2320      	movs	r3, #32
 8000432:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000436:	f890 3020 	ldrb.w	r3, [r0, #32]
 800043a:	2b07      	cmp	r3, #7
 800043c:	d80e      	bhi.n	800045c <wakeup.lto_priv.180+0x2c>
 800043e:	e8df f003 	tbb	[pc, r3]
 8000442:	0d28      	.short	0x0d28
 8000444:	0408240d 	.word	0x0408240d
 8000448:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
 800044a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800044c:	6893      	ldr	r3, [r2, #8]
 800044e:	3301      	adds	r3, #1
 8000450:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000452:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000456:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000458:	6802      	ldr	r2, [r0, #0]
 800045a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800045c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800045e:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000460:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000464:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <wakeup.lto_priv.180+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8000468:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 800046a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800046e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000470:	689a      	ldr	r2, [r3, #8]
 8000472:	428a      	cmp	r2, r1
 8000474:	d2fb      	bcs.n	800046e <wakeup.lto_priv.180+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	6042      	str	r2, [r0, #4]
  tp->queue.next             = cp;
 800047a:	6003      	str	r3, [r0, #0]
 800047c:	2100      	movs	r1, #0
  tp->queue.prev->queue.next = tp;
 800047e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000480:	6058      	str	r0, [r3, #4]
 8000482:	f381 8811 	msr	BASEPRI, r1
}
 8000486:	bc10      	pop	{r4}
 8000488:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800048a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	e7e4      	b.n	800045c <wakeup.lto_priv.180+0x2c>
 8000492:	2300      	movs	r3, #0
 8000494:	f383 8811 	msr	BASEPRI, r3
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	20001238 	.word	0x20001238

080004a0 <_idle_thread.lto_priv.79>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80004a0:	e7fe      	b.n	80004a0 <_idle_thread.lto_priv.79>
 80004a2:	bf00      	nop
	...

080004b0 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 80004b0:	e7fe      	b.n	80004b0 <BusFault_Handler>
 80004b2:	bf00      	nop
	...

080004c0 <test_terminate_threads>:
                         test_buffer + (WA_SIZE * 4)};

/*
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <test_terminate_threads+0x30>)
 80004c2:	b430      	push	{r4, r5}
 80004c4:	f103 0014 	add.w	r0, r3, #20
 80004c8:	2520      	movs	r5, #32
 80004ca:	2400      	movs	r4, #0
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 80004cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80004d0:	b14a      	cbz	r2, 80004e6 <test_terminate_threads+0x26>
 80004d2:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 80004d6:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 80004da:	f041 0104 	orr.w	r1, r1, #4
 80004de:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 80004e2:	f384 8811 	msr	BASEPRI, r4
  for (i = 0; i < MAX_THREADS; i++)
 80004e6:	4283      	cmp	r3, r0
 80004e8:	d1f0      	bne.n	80004cc <test_terminate_threads+0xc>
      chThdTerminate(threads[i]);
}
 80004ea:	bc30      	pop	{r4, r5}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20001084 	.word	0x20001084
	...

08000500 <test_emit_token>:
 8000500:	2320      	movs	r3, #32
 8000502:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8000506:	4a06      	ldr	r2, [pc, #24]	; (8000520 <test_emit_token+0x20>)
 8000508:	4906      	ldr	r1, [pc, #24]	; (8000524 <test_emit_token+0x24>)
 800050a:	6813      	ldr	r3, [r2, #0]
 800050c:	428b      	cmp	r3, r1
 800050e:	d202      	bcs.n	8000516 <test_emit_token+0x16>
    *test_tokp++ = token;
 8000510:	1c59      	adds	r1, r3, #1
 8000512:	6011      	str	r1, [r2, #0]
 8000514:	7018      	strb	r0, [r3, #0]
 8000516:	2300      	movs	r3, #0
 8000518:	f383 8811 	msr	BASEPRI, r3
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20001080 	.word	0x20001080
 8000524:	20001080 	.word	0x20001080
	...

08000530 <test_println>:
void test_println(const char *msgp) {
 8000530:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 8000532:	7801      	ldrb	r1, [r0, #0]
 8000534:	b189      	cbz	r1, 800055a <test_println+0x2a>
 8000536:	4d0a      	ldr	r5, [pc, #40]	; (8000560 <test_println+0x30>)
 8000538:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 800053a:	6828      	ldr	r0, [r5, #0]
 800053c:	6803      	ldr	r3, [r0, #0]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	4798      	blx	r3
  while (*msgp)
 8000542:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000546:	2900      	cmp	r1, #0
 8000548:	d1f7      	bne.n	800053a <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 800054a:	6828      	ldr	r0, [r5, #0]
 800054c:	4905      	ldr	r1, [pc, #20]	; (8000564 <test_println+0x34>)
 800054e:	6803      	ldr	r3, [r0, #0]
 8000550:	2202      	movs	r2, #2
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000558:	4718      	bx	r3
 800055a:	4d01      	ldr	r5, [pc, #4]	; (8000560 <test_println+0x30>)
 800055c:	e7f5      	b.n	800054a <test_println+0x1a>
 800055e:	bf00      	nop
 8000560:	20001068 	.word	0x20001068
 8000564:	08006144 	.word	0x08006144
	...

08000570 <test_print>:
  while (*msgp)
 8000570:	7801      	ldrb	r1, [r0, #0]
 8000572:	b159      	cbz	r1, 800058c <test_print+0x1c>
void test_print(const char *msgp) {
 8000574:	b538      	push	{r3, r4, r5, lr}
 8000576:	4d06      	ldr	r5, [pc, #24]	; (8000590 <test_print+0x20>)
 8000578:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 800057a:	6828      	ldr	r0, [r5, #0]
 800057c:	6803      	ldr	r3, [r0, #0]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	4798      	blx	r3
  while (*msgp)
 8000582:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000586:	2900      	cmp	r1, #0
 8000588:	d1f7      	bne.n	800057a <test_print+0xa>
 800058a:	bd38      	pop	{r3, r4, r5, pc}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20001068 	.word	0x20001068
	...

080005a0 <test_printn>:
  if (!n)
 80005a0:	b320      	cbz	r0, 80005ec <test_printn+0x4c>
void test_printn(uint32_t n) {
 80005a2:	b570      	push	{r4, r5, r6, lr}
 80005a4:	b084      	sub	sp, #16
  if (!n)
 80005a6:	466d      	mov	r5, sp
 80005a8:	466c      	mov	r4, sp
      *p++ = (n % 10) + '0', n /= 10;
 80005aa:	4e13      	ldr	r6, [pc, #76]	; (80005f8 <test_printn+0x58>)
 80005ac:	e000      	b.n	80005b0 <test_printn+0x10>
    while (n)
 80005ae:	4614      	mov	r4, r2
      *p++ = (n % 10) + '0', n /= 10;
 80005b0:	fba6 2300 	umull	r2, r3, r6, r0
 80005b4:	08db      	lsrs	r3, r3, #3
 80005b6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80005ba:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80005be:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80005c2:	4622      	mov	r2, r4
 80005c4:	b2c9      	uxtb	r1, r1
 80005c6:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 80005ca:	4618      	mov	r0, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1ee      	bne.n	80005ae <test_printn+0xe>
    while (p > buf)
 80005d0:	42aa      	cmp	r2, r5
 80005d2:	d909      	bls.n	80005e8 <test_printn+0x48>
 80005d4:	4e09      	ldr	r6, [pc, #36]	; (80005fc <test_printn+0x5c>)
 80005d6:	e001      	b.n	80005dc <test_printn+0x3c>
 80005d8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      streamPut(test_chp, *--p);
 80005dc:	6830      	ldr	r0, [r6, #0]
 80005de:	6803      	ldr	r3, [r0, #0]
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	4798      	blx	r3
    while (p > buf)
 80005e4:	42ac      	cmp	r4, r5
 80005e6:	d1f7      	bne.n	80005d8 <test_printn+0x38>
}
 80005e8:	b004      	add	sp, #16
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
    streamPut(test_chp, '0');
 80005ec:	4b03      	ldr	r3, [pc, #12]	; (80005fc <test_printn+0x5c>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	6803      	ldr	r3, [r0, #0]
 80005f2:	2130      	movs	r1, #48	; 0x30
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	4718      	bx	r3
 80005f8:	cccccccd 	.word	0xcccccccd
 80005fc:	20001068 	.word	0x20001068

08000600 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 8000600:	b4f0      	push	{r4, r5, r6, r7}
 8000602:	4e0d      	ldr	r6, [pc, #52]	; (8000638 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 8000604:	4f0d      	ldr	r7, [pc, #52]	; (800063c <_test_assert_sequence+0x3c>)
 8000606:	6835      	ldr	r5, [r6, #0]
 8000608:	463b      	mov	r3, r7
 800060a:	e005      	b.n	8000618 <_test_assert_sequence+0x18>
    if (*cp++ != *expected++)
 800060c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8000610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000614:	4294      	cmp	r4, r2
 8000616:	d106      	bne.n	8000626 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 8000618:	42ab      	cmp	r3, r5
 800061a:	d3f7      	bcc.n	800060c <_test_assert_sequence+0xc>
  if (*expected)
 800061c:	7800      	ldrb	r0, [r0, #0]
 800061e:	b910      	cbnz	r0, 8000626 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 8000620:	6037      	str	r7, [r6, #0]
}
 8000622:	bcf0      	pop	{r4, r5, r6, r7}
 8000624:	4770      	bx	lr
  test_local_fail      = true;
 8000626:	4c06      	ldr	r4, [pc, #24]	; (8000640 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 800062c:	2001      	movs	r0, #1
 800062e:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000630:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8000632:	6019      	str	r1, [r3, #0]
}
 8000634:	bcf0      	pop	{r4, r5, r6, r7}
 8000636:	4770      	bx	lr
 8000638:	20001080 	.word	0x20001080
 800063c:	20001070 	.word	0x20001070
 8000640:	2000131d 	.word	0x2000131d
 8000644:	2000131c 	.word	0x2000131c
 8000648:	20001318 	.word	0x20001318
 800064c:	00000000 	.word	0x00000000

08000650 <_test_assert>:
  if (!condition)
 8000650:	b948      	cbnz	r0, 8000666 <_test_assert+0x16>
bool _test_assert(bool condition, const char *msg) {
 8000652:	b410      	push	{r4}
  test_global_fail     = true;
 8000654:	4a05      	ldr	r2, [pc, #20]	; (800066c <_test_assert+0x1c>)
  test_local_fail      = true;
 8000656:	4c06      	ldr	r4, [pc, #24]	; (8000670 <_test_assert+0x20>)
  test_failure_message = msg;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <_test_assert+0x24>)
  test_local_fail      = true;
 800065a:	2001      	movs	r0, #1
 800065c:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 800065e:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8000660:	6019      	str	r1, [r3, #0]
}
 8000662:	bc10      	pop	{r4}
 8000664:	4770      	bx	lr
  return false;
 8000666:	2000      	movs	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	2000131c 	.word	0x2000131c
 8000670:	2000131d 	.word	0x2000131d
 8000674:	20001318 	.word	0x20001318
	...

08000680 <print_line.lto_priv.164>:
static void print_line(void) {
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	4d08      	ldr	r5, [pc, #32]	; (80006a4 <print_line.lto_priv.164+0x24>)
 8000684:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '-');
 8000686:	6828      	ldr	r0, [r5, #0]
 8000688:	6803      	ldr	r3, [r0, #0]
 800068a:	212d      	movs	r1, #45	; 0x2d
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8000690:	3c01      	subs	r4, #1
 8000692:	d1f8      	bne.n	8000686 <print_line.lto_priv.164+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000694:	6828      	ldr	r0, [r5, #0]
 8000696:	4904      	ldr	r1, [pc, #16]	; (80006a8 <print_line.lto_priv.164+0x28>)
 8000698:	6803      	ldr	r3, [r0, #0]
 800069a:	2202      	movs	r2, #2
 800069c:	681b      	ldr	r3, [r3, #0]
}
 800069e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80006a2:	4718      	bx	r3
 80006a4:	20001068 	.word	0x20001068
 80006a8:	08006144 	.word	0x08006144
 80006ac:	00000000 	.word	0x00000000

080006b0 <__early_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <__early_init+0xcc>)
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80006b2:	4b33      	ldr	r3, [pc, #204]	; (8000780 <__early_init+0xd0>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80006b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 80006b8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80006bc:	6410      	str	r0, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 80006be:	6019      	str	r1, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80006c0:	6813      	ldr	r3, [r2, #0]
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80006c8:	6813      	ldr	r3, [r2, #0]
 80006ca:	0799      	lsls	r1, r3, #30
 80006cc:	d5fc      	bpl.n	80006c8 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80006ce:	6893      	ldr	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80006d0:	492a      	ldr	r1, [pc, #168]	; (800077c <__early_init+0xcc>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80006d2:	f023 0303 	bic.w	r3, r3, #3
 80006d6:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 80006d8:	6893      	ldr	r3, [r2, #8]
 80006da:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80006dc:	688b      	ldr	r3, [r1, #8]
 80006de:	f013 030c 	ands.w	r3, r3, #12
 80006e2:	d1fb      	bne.n	80006dc <__early_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80006e4:	680a      	ldr	r2, [r1, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80006e6:	4825      	ldr	r0, [pc, #148]	; (800077c <__early_init+0xcc>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80006e8:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 80006ec:	600a      	str	r2, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80006ee:	608b      	str	r3, [r1, #8]
  RCC->CR |= RCC_CR_HSEON;
 80006f0:	680b      	ldr	r3, [r1, #0]
 80006f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006f6:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80006f8:	6803      	ldr	r3, [r0, #0]
 80006fa:	039b      	lsls	r3, r3, #14
 80006fc:	d5fc      	bpl.n	80006f8 <__early_init+0x48>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80006fe:	6f43      	ldr	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000700:	4a1e      	ldr	r2, [pc, #120]	; (800077c <__early_init+0xcc>)
  RCC->CSR |= RCC_CSR_LSION;
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	6743      	str	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000708:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800070a:	0799      	lsls	r1, r3, #30
 800070c:	d5fc      	bpl.n	8000708 <__early_init+0x58>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <__early_init+0xd4>)
 8000710:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8000712:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000714:	491a      	ldr	r1, [pc, #104]	; (8000780 <__early_init+0xd0>)
  RCC->CR |= RCC_CR_PLLON;
 8000716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800071a:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800071c:	684b      	ldr	r3, [r1, #4]
 800071e:	045a      	lsls	r2, r3, #17
 8000720:	d5fc      	bpl.n	800071c <__early_init+0x6c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000722:	4a16      	ldr	r2, [pc, #88]	; (800077c <__early_init+0xcc>)
 8000724:	6813      	ldr	r3, [r2, #0]
 8000726:	019b      	lsls	r3, r3, #6
 8000728:	d5fc      	bpl.n	8000724 <__early_init+0x74>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <__early_init+0xd8>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800072c:	4917      	ldr	r1, [pc, #92]	; (800078c <__early_init+0xdc>)
 800072e:	6091      	str	r1, [r2, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <__early_init+0xe0>)
 8000734:	429a      	cmp	r2, r3
 8000736:	d016      	beq.n	8000766 <__early_init+0xb6>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <__early_init+0xe4>)
 800073a:	f240 7205 	movw	r2, #1797	; 0x705
 800073e:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8000740:	4a0e      	ldr	r2, [pc, #56]	; (800077c <__early_init+0xcc>)
 8000742:	6893      	ldr	r3, [r2, #8]
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800074a:	6893      	ldr	r3, [r2, #8]
 800074c:	f003 030c 	and.w	r3, r3, #12
 8000750:	2b08      	cmp	r3, #8
 8000752:	d1fa      	bne.n	800074a <__early_init+0x9a>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8000754:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075a:	6453      	str	r3, [r2, #68]	; 0x44
 800075c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800075e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000762:	6653      	str	r3, [r2, #100]	; 0x64
 8000764:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000766:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <__early_init+0xe8>)
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <__early_init+0xec>)
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d1e3      	bne.n	8000738 <__early_init+0x88>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <__early_init+0xe4>)
 8000772:	f240 1205 	movw	r2, #261	; 0x105
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	e7e2      	b.n	8000740 <__early_init+0x90>
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000
 8000784:	07405408 	.word	0x07405408
 8000788:	e0042000 	.word	0xe0042000
 800078c:	38889400 	.word	0x38889400
 8000790:	20006411 	.word	0x20006411
 8000794:	40023c00 	.word	0x40023c00
 8000798:	e000ed00 	.word	0xe000ed00
 800079c:	410fc241 	.word	0x410fc241

080007a0 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 80007a0:	b508      	push	{r3, lr}
 80007a2:	2220      	movs	r2, #32
 80007a4:	4603      	mov	r3, r0
 80007a6:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 80007aa:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 80007ac:	b128      	cbz	r0, 80007ba <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
 80007ae:	6802      	ldr	r2, [r0, #0]
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	2300      	movs	r3, #0
 80007b4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();

  return objp;
}
 80007b8:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
 80007ba:	689a      	ldr	r2, [r3, #8]
 80007bc:	2a00      	cmp	r2, #0
 80007be:	d0f8      	beq.n	80007b2 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, PORT_NATURAL_ALIGN); /* TODO: Alignment is not properly handled */
 80007c0:	6858      	ldr	r0, [r3, #4]
 80007c2:	2104      	movs	r1, #4
 80007c4:	4790      	blx	r2
 80007c6:	2300      	movs	r3, #0
 80007c8:	f383 8811 	msr	BASEPRI, r3
}
 80007cc:	bd08      	pop	{r3, pc}
 80007ce:	bf00      	nop

080007d0 <chEvtAddEvents>:
 80007d0:	2320      	movs	r3, #32
 80007d2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();
  currp->epending |= events;
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <chEvtAddEvents+0x18>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007dc:	4310      	orrs	r0, r2
 80007de:	6358      	str	r0, [r3, #52]	; 0x34
 80007e0:	2300      	movs	r3, #0
 80007e2:	f383 8811 	msr	BASEPRI, r3
  events = currp->epending;
  chSysUnlock();

  return events;
}
 80007e6:	4770      	bx	lr
 80007e8:	20001238 	.word	0x20001238
 80007ec:	00000000 	.word	0x00000000

080007f0 <chEvtUnregister>:
 80007f0:	2320      	movs	r3, #32
 80007f2:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 80007f6:	4602      	mov	r2, r0
 80007f8:	e002      	b.n	8000800 <chEvtUnregister+0x10>
    if (p->next == elp) {
 80007fa:	428b      	cmp	r3, r1
 80007fc:	d007      	beq.n	800080e <chEvtUnregister+0x1e>
 80007fe:	461a      	mov	r2, r3
  while (p->next != (event_listener_t *)esp) {
 8000800:	6813      	ldr	r3, [r2, #0]
 8000802:	4298      	cmp	r0, r3
 8000804:	d1f9      	bne.n	80007fa <chEvtUnregister+0xa>
 8000806:	2300      	movs	r3, #0
 8000808:	f383 8811 	msr	BASEPRI, r3
 800080c:	4770      	bx	lr
      p->next = elp->next;
 800080e:	680b      	ldr	r3, [r1, #0]
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	2300      	movs	r3, #0
 8000814:	f383 8811 	msr	BASEPRI, r3
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	0000      	movs	r0, r0
	...

08000820 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <chTMStopMeasurementX+0x40>)
 8000824:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 8000826:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000828:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 800082a:	6887      	ldr	r7, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800082c:	6f56      	ldr	r6, [r2, #116]	; 0x74
  if (tmp->last > tmp->worst) {
 800082e:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 8000830:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000834:	1bdb      	subs	r3, r3, r7
 8000836:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000838:	18e4      	adds	r4, r4, r3
 800083a:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 800083e:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000840:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8000842:	bf88      	it	hi
 8000844:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000846:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8000848:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800084a:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 800084e:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000850:	6083      	str	r3, [r0, #8]
    tmp->best = tmp->last;
 8000852:	bf38      	it	cc
 8000854:	6003      	strcc	r3, [r0, #0]
}
 8000856:	bcf0      	pop	{r4, r5, r6, r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e0001000 	.word	0xe0001000
 8000860:	20001238 	.word	0x20001238
	...

08000870 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	2320      	movs	r3, #32
 8000874:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8000878:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <chThdYield+0x54>)
 800087a:	6810      	ldr	r0, [r2, #0]
 800087c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 800087e:	6883      	ldr	r3, [r0, #8]
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8000880:	68a1      	ldr	r1, [r4, #8]
  if (chSchCanYieldS()) {
 8000882:	428b      	cmp	r3, r1
 8000884:	d203      	bcs.n	800088e <chThdYield+0x1e>
 8000886:	2300      	movs	r3, #0
 8000888:	f383 8811 	msr	BASEPRI, r3
 800088c:	bd70      	pop	{r4, r5, r6, pc}
  tqp->next             = tp->queue.next;
 800088e:	6803      	ldr	r3, [r0, #0]
 8000890:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000892:	2601      	movs	r6, #1
  tp->state = CH_STATE_READY;
 8000894:	2500      	movs	r5, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000896:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8000898:	f880 6020 	strb.w	r6, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800089c:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 800089e:	f884 5020 	strb.w	r5, [r4, #32]
 80008a2:	e000      	b.n	80008a6 <chThdYield+0x36>
 80008a4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80008a6:	689a      	ldr	r2, [r3, #8]
 80008a8:	4291      	cmp	r1, r2
 80008aa:	d9fb      	bls.n	80008a4 <chThdYield+0x34>
  tp->queue.prev             = cp->queue.prev;
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 80008b0:	6023      	str	r3, [r4, #0]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80008b2:	4621      	mov	r1, r4
  tp->queue.prev->queue.next = tp;
 80008b4:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80008b6:	605c      	str	r4, [r3, #4]
  chSysSwitch(currp, otp);
 80008b8:	f7ff fcec 	bl	8000294 <_port_switch>
 80008bc:	2300      	movs	r3, #0
 80008be:	f383 8811 	msr	BASEPRI, r3
 80008c2:	bd70      	pop	{r4, r5, r6, pc}
 80008c4:	20001238 	.word	0x20001238
	...

080008d0 <chThdCreateSuspendedI>:
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80008d0:	6883      	ldr	r3, [r0, #8]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80008d2:	6941      	ldr	r1, [r0, #20]
  REG_INSERT(tp);
 80008d4:	4a1e      	ldr	r2, [pc, #120]	; (8000950 <chThdCreateSuspendedI+0x80>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80008d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  tp->wabase = tdp->wbase;
 80008d8:	6845      	ldr	r5, [r0, #4]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80008da:	6906      	ldr	r6, [r0, #16]
  return _thread_init(tp, tdp->name, tdp->prio);
 80008dc:	6804      	ldr	r4, [r0, #0]
 80008de:	68c7      	ldr	r7, [r0, #12]
  REG_INSERT(tp);
 80008e0:	f843 2c38 	str.w	r2, [r3, #-56]
  tp->refs      = (trefs_t)1;
 80008e4:	2001      	movs	r0, #1
 80008e6:	f803 0c26 	strb.w	r0, [r3, #-38]
  tp->state     = CH_STATE_WTSTART;
 80008ea:	f04f 0e02 	mov.w	lr, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 80008ee:	2000      	movs	r0, #0
  tp->state     = CH_STATE_WTSTART;
 80008f0:	f803 ec28 	strb.w	lr, [r3, #-40]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80008f4:	f803 0c27 	strb.w	r0, [r3, #-39]
  return _thread_init(tp, tdp->name, tdp->prio);
 80008f8:	f843 4c30 	str.w	r4, [r3, #-48]
  tp->wabase = tdp->wbase;
 80008fc:	f843 5c2c 	str.w	r5, [r3, #-44]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000900:	f1a3 046c 	sub.w	r4, r3, #108	; 0x6c
  REG_INSERT(tp);
 8000904:	6955      	ldr	r5, [r2, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000906:	f8df e04c 	ldr.w	lr, [pc, #76]	; 8000954 <chThdCreateSuspendedI+0x84>
 800090a:	f843 6c6c 	str.w	r6, [r3, #-108]
 800090e:	f843 1c68 	str.w	r1, [r3, #-104]
 8000912:	f843 4c3c 	str.w	r4, [r3, #-60]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000916:	f1a3 0148 	sub.w	r1, r3, #72	; 0x48
  queue_init(&tp->msgqueue);
 800091a:	f1a3 041c 	sub.w	r4, r3, #28
  list_init(&tp->waiting);
 800091e:	f1a3 0620 	sub.w	r6, r3, #32
  tp->mtxlist   = NULL;
 8000922:	f843 0c10 	str.w	r0, [r3, #-16]
  tp->epending  = (eventmask_t)0;
 8000926:	f843 0c14 	str.w	r0, [r3, #-20]
  tp->prio      = prio;
 800092a:	f843 7c40 	str.w	r7, [r3, #-64]
  tp->realprio  = prio;
 800092e:	f843 7c0c 	str.w	r7, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000932:	f843 ec4c 	str.w	lr, [r3, #-76]
  REG_INSERT(tp);
 8000936:	f843 5c34 	str.w	r5, [r3, #-52]
}
 800093a:	4608      	mov	r0, r1
  REG_INSERT(tp);
 800093c:	6129      	str	r1, [r5, #16]
 800093e:	6151      	str	r1, [r2, #20]
  tlp->next = (thread_t *)tlp;
 8000940:	f843 6c20 	str.w	r6, [r3, #-32]
  tqp->next = (thread_t *)tqp;
 8000944:	f843 4c1c 	str.w	r4, [r3, #-28]
  tqp->prev = (thread_t *)tqp;
 8000948:	f843 4c18 	str.w	r4, [r3, #-24]
}
 800094c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094e:	bf00      	nop
 8000950:	20001238 	.word	0x20001238
 8000954:	080002a5 	.word	0x080002a5
	...

08000960 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 8000962:	6810      	ldr	r0, [r2, #0]
  tqp->next             = tp->queue.next;
 8000964:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 8000966:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000968:	2101      	movs	r1, #1
  thread_t *otp = currp;
 800096a:	6994      	ldr	r4, [r2, #24]
  tqp->next->queue.prev = (thread_t *)tqp;
 800096c:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 800096e:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 8000970:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8000974:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 8000976:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000978:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 800097a:	f884 5020 	strb.w	r5, [r4, #32]
 800097e:	e000      	b.n	8000982 <chSchDoReschedule+0x22>
 8000980:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	4291      	cmp	r1, r2
 8000986:	d3fb      	bcc.n	8000980 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8000988:	685a      	ldr	r2, [r3, #4]
 800098a:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 800098c:	6023      	str	r3, [r4, #0]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800098e:	4621      	mov	r1, r4
  tp->queue.prev->queue.next = tp;
 8000990:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000992:	605c      	str	r4, [r3, #4]
}
 8000994:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8000996:	f7ff bc7d 	b.w	8000294 <_port_switch>
 800099a:	bf00      	nop
 800099c:	20001238 	.word	0x20001238

080009a0 <chSchRescheduleS>:
  return firstprio(&ch.rlist.queue) > currp->prio;
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <chSchRescheduleS+0x14>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 80009a6:	6892      	ldr	r2, [r2, #8]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d800      	bhi.n	80009b0 <chSchRescheduleS+0x10>
 80009ae:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80009b0:	f7ff bfd6 	b.w	8000960 <chSchDoReschedule>
 80009b4:	20001238 	.word	0x20001238
	...

080009c0 <chThdSetPriority>:
tprio_t chThdSetPriority(tprio_t newprio) {
 80009c0:	b510      	push	{r4, lr}
 80009c2:	2320      	movs	r3, #32
 80009c4:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <chThdSetPriority+0x2c>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 80009ce:	6899      	ldr	r1, [r3, #8]
 80009d0:	428c      	cmp	r4, r1
 80009d2:	d001      	beq.n	80009d8 <chThdSetPriority+0x18>
 80009d4:	4281      	cmp	r1, r0
 80009d6:	d200      	bcs.n	80009da <chThdSetPriority+0x1a>
    currp->prio = newprio;
 80009d8:	6098      	str	r0, [r3, #8]
  currp->realprio = newprio;
 80009da:	63d8      	str	r0, [r3, #60]	; 0x3c
  chSchRescheduleS();
 80009dc:	f7ff ffe0 	bl	80009a0 <chSchRescheduleS>
 80009e0:	2300      	movs	r3, #0
 80009e2:	f383 8811 	msr	BASEPRI, r3
}
 80009e6:	4620      	mov	r0, r4
 80009e8:	bd10      	pop	{r4, pc}
 80009ea:	bf00      	nop
 80009ec:	20001238 	.word	0x20001238

080009f0 <chSchWakeupS>:
  thread_t *otp = currp;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80009f2:	b470      	push	{r4, r5, r6}
 80009f4:	4604      	mov	r4, r0
  thread_t *otp = currp;
 80009f6:	699d      	ldr	r5, [r3, #24]
  ntp->u.rdymsg = msg;
 80009f8:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80009fa:	68a8      	ldr	r0, [r5, #8]
 80009fc:	68a1      	ldr	r1, [r4, #8]
 80009fe:	4281      	cmp	r1, r0
  tp->state = CH_STATE_READY;
 8000a00:	f04f 0200 	mov.w	r2, #0
  if (ntp->prio <= otp->prio) {
 8000a04:	d80c      	bhi.n	8000a20 <chSchWakeupS+0x30>
  tp->state = CH_STATE_READY;
 8000a06:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 8000a0a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000a0c:	689a      	ldr	r2, [r3, #8]
 8000a0e:	4291      	cmp	r1, r2
 8000a10:	d9fb      	bls.n	8000a0a <chSchWakeupS+0x1a>
  tp->queue.prev             = cp->queue.prev;
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 8000a16:	6023      	str	r3, [r4, #0]
  tp->queue.prev->queue.next = tp;
 8000a18:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000a1a:	605c      	str	r4, [r3, #4]
}
 8000a1c:	bc70      	pop	{r4, r5, r6}
 8000a1e:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 8000a20:	f885 2020 	strb.w	r2, [r5, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8000a24:	461a      	mov	r2, r3
    cp = cp->queue.next;
 8000a26:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8000a28:	6891      	ldr	r1, [r2, #8]
 8000a2a:	4288      	cmp	r0, r1
 8000a2c:	d9fb      	bls.n	8000a26 <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
 8000a2e:	6850      	ldr	r0, [r2, #4]
 8000a30:	6068      	str	r0, [r5, #4]
    ntp->state = CH_STATE_CURRENT;
 8000a32:	2601      	movs	r6, #1
  tp->queue.next             = cp;
 8000a34:	602a      	str	r2, [r5, #0]
  tp->queue.prev->queue.next = tp;
 8000a36:	6005      	str	r5, [r0, #0]
  cp->queue.prev             = tp;
 8000a38:	6055      	str	r5, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8000a3a:	f884 6020 	strb.w	r6, [r4, #32]
    chSysSwitch(ntp, otp);
 8000a3e:	4629      	mov	r1, r5
 8000a40:	4620      	mov	r0, r4
    currp = ntp;
 8000a42:	619c      	str	r4, [r3, #24]
}
 8000a44:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 8000a46:	f7ff bc25 	b.w	8000294 <_port_switch>
 8000a4a:	bf00      	nop
 8000a4c:	20001238 	.word	0x20001238

08000a50 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8000a50:	b508      	push	{r3, lr}
 8000a52:	2320      	movs	r3, #32
 8000a54:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->cnt <= (cnt_t)0) {
 8000a58:	6883      	ldr	r3, [r0, #8]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	6083      	str	r3, [r0, #8]
 8000a60:	dd03      	ble.n	8000a6a <chSemSignal+0x1a>
 8000a62:	2300      	movs	r3, #0
 8000a64:	f383 8811 	msr	BASEPRI, r3
 8000a68:	bd08      	pop	{r3, pc}
 8000a6a:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 8000a6c:	6800      	ldr	r0, [r0, #0]
  tqp->next             = tp->queue.next;
 8000a6e:	6802      	ldr	r2, [r0, #0]
 8000a70:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 8000a72:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000a74:	6053      	str	r3, [r2, #4]
 8000a76:	f7ff ffbb 	bl	80009f0 <chSchWakeupS>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f383 8811 	msr	BASEPRI, r3
 8000a80:	bd08      	pop	{r3, pc}
 8000a82:	bf00      	nop
	...

08000a90 <chSchGoSleepS>:
  thread_t *otp = currp;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <chSchGoSleepS+0x24>)
 8000a92:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8000a94:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8000a96:	b410      	push	{r4}
  otp->state = newstate;
 8000a98:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 8000a9c:	6810      	ldr	r0, [r2, #0]
 8000a9e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8000aa0:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000aa2:	6043      	str	r3, [r0, #4]
 8000aa4:	f882 4020 	strb.w	r4, [r2, #32]
  chSysSwitch(currp, otp);
 8000aa8:	4610      	mov	r0, r2
}
 8000aaa:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000aac:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8000aae:	f7ff bbf1 	b.w	8000294 <_port_switch>
 8000ab2:	bf00      	nop
 8000ab4:	20001238 	.word	0x20001238
	...

08000ac0 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8000ac0:	b510      	push	{r4, lr}
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8000ac8:	4c0c      	ldr	r4, [pc, #48]	; (8000afc <chMsgWait+0x3c>)
 8000aca:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 8000acc:	4613      	mov	r3, r2
 8000ace:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 8000ad2:	4298      	cmp	r0, r3
 8000ad4:	d009      	beq.n	8000aea <chMsgWait+0x2a>
  tqp->next             = tp->queue.next;
 8000ad6:	6801      	ldr	r1, [r0, #0]
 8000ad8:	62d1      	str	r1, [r2, #44]	; 0x2c
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 8000ada:	220d      	movs	r2, #13
  tqp->next->queue.prev = (thread_t *)tqp;
 8000adc:	604b      	str	r3, [r1, #4]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f880 2020 	strb.w	r2, [r0, #32]
 8000ae4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8000ae8:	bd10      	pop	{r4, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 8000aea:	200e      	movs	r0, #14
 8000aec:	f7ff ffd0 	bl	8000a90 <chSchGoSleepS>
 8000af0:	69a2      	ldr	r2, [r4, #24]
 8000af2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8000af4:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 8000af8:	e7ed      	b.n	8000ad6 <chMsgWait+0x16>
 8000afa:	bf00      	nop
 8000afc:	20001238 	.word	0x20001238

08000b00 <chSemWait>:
 8000b00:	2320      	movs	r3, #32
 8000b02:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8000b06:	6883      	ldr	r3, [r0, #8]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	6083      	str	r3, [r0, #8]
 8000b0e:	db04      	blt.n	8000b1a <chSemWait+0x1a>
  return MSG_OK;
 8000b10:	2000      	movs	r0, #0
 8000b12:	2300      	movs	r3, #0
 8000b14:	f383 8811 	msr	BASEPRI, r3
}
 8000b18:	4770      	bx	lr
msg_t chSemWait(semaphore_t *sp) {
 8000b1a:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8000b1c:	4c08      	ldr	r4, [pc, #32]	; (8000b40 <chSemWait+0x40>)
 8000b1e:	69a2      	ldr	r2, [r4, #24]
 8000b20:	6250      	str	r0, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8000b22:	6841      	ldr	r1, [r0, #4]
 8000b24:	6051      	str	r1, [r2, #4]
 8000b26:	4603      	mov	r3, r0
  tp->queue.next             = (thread_t *)tqp;
 8000b28:	6010      	str	r0, [r2, #0]
  tp->queue.prev->queue.next = tp;
 8000b2a:	600a      	str	r2, [r1, #0]
    chSchGoSleepS(CH_STATE_WTSEM);
 8000b2c:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	f7ff ffae 	bl	8000a90 <chSchGoSleepS>
    return currp->u.rdymsg;
 8000b34:	69a3      	ldr	r3, [r4, #24]
 8000b36:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f383 8811 	msr	BASEPRI, r3
}
 8000b3e:	bd10      	pop	{r4, pc}
 8000b40:	20001238 	.word	0x20001238
	...

08000b50 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8000b50:	2200      	movs	r2, #0
 8000b52:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <chSchReadyI+0x28>)
thread_t *chSchReadyI(thread_t *tp) {
 8000b56:	b410      	push	{r4}
 8000b58:	4604      	mov	r4, r0
  tp->state = CH_STATE_READY;
 8000b5a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000b5e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	428a      	cmp	r2, r1
 8000b64:	d2fb      	bcs.n	8000b5e <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 8000b6a:	6023      	str	r3, [r4, #0]
}
 8000b6c:	4620      	mov	r0, r4
  tp->queue.prev->queue.next = tp;
 8000b6e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000b70:	605c      	str	r4, [r3, #4]
}
 8000b72:	bc10      	pop	{r4}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20001238 	.word	0x20001238
 8000b7c:	00000000 	.word	0x00000000

08000b80 <chMsgSend>:
  thread_t *ctp = currp;
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <chMsgSend+0x3c>)
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8000b82:	b510      	push	{r4, lr}
 8000b84:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8000b86:	699c      	ldr	r4, [r3, #24]
 8000b88:	f382 8811 	msr	BASEPRI, r2
  ctp->u.sentmsg = msg;
 8000b8c:	6261      	str	r1, [r4, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8000b8e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000b90:	6062      	str	r2, [r4, #4]
  msg_insert(ctp, &tp->msgqueue);
 8000b92:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  tp->queue.next             = (thread_t *)tqp;
 8000b96:	6021      	str	r1, [r4, #0]
  tp->queue.prev->queue.next = tp;
 8000b98:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 8000b9a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 8000b9e:	6304      	str	r4, [r0, #48]	; 0x30
 8000ba0:	2a0e      	cmp	r2, #14
 8000ba2:	d007      	beq.n	8000bb4 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8000ba4:	200c      	movs	r0, #12
 8000ba6:	f7ff ff73 	bl	8000a90 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 8000baa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000bac:	2300      	movs	r3, #0
 8000bae:	f383 8811 	msr	BASEPRI, r3
}
 8000bb2:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
 8000bb4:	f7ff ffcc 	bl	8000b50 <chSchReadyI>
 8000bb8:	e7f4      	b.n	8000ba4 <chMsgSend+0x24>
 8000bba:	bf00      	nop
 8000bbc:	20001238 	.word	0x20001238

08000bc0 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8000bc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000bc2:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8000bc6:	4319      	orrs	r1, r3
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000bc8:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000bca:	6341      	str	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000bcc:	d009      	beq.n	8000be2 <chEvtSignalI+0x22>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000bce:	2a0b      	cmp	r2, #11
 8000bd0:	d000      	beq.n	8000bd4 <chEvtSignalI+0x14>
 8000bd2:	4770      	bx	lr
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000bd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000bd6:	438b      	bics	r3, r1
 8000bd8:	d1fb      	bne.n	8000bd2 <chEvtSignalI+0x12>
    tp->u.rdymsg = MSG_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000bde:	f7ff bfb7 	b.w	8000b50 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000be2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000be4:	4219      	tst	r1, r3
 8000be6:	d1f8      	bne.n	8000bda <chEvtSignalI+0x1a>
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	0000      	movs	r0, r0
	...

08000bf0 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000bf0:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 8000bf2:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 8000bf4:	42a0      	cmp	r0, r4
 8000bf6:	d00f      	beq.n	8000c18 <chEvtBroadcastFlagsI+0x28>
 8000bf8:	4606      	mov	r6, r0
 8000bfa:	460d      	mov	r5, r1
    elp->flags |= flags;
 8000bfc:	68e3      	ldr	r3, [r4, #12]
 8000bfe:	432b      	orrs	r3, r5
 8000c00:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000c02:	b115      	cbz	r5, 8000c0a <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 8000c04:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000c06:	4213      	tst	r3, r2
 8000c08:	d003      	beq.n	8000c12 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 8000c0a:	68a1      	ldr	r1, [r4, #8]
 8000c0c:	6860      	ldr	r0, [r4, #4]
 8000c0e:	f7ff ffd7 	bl	8000bc0 <chEvtSignalI>
    elp = elp->next;
 8000c12:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000c14:	42a6      	cmp	r6, r4
 8000c16:	d1f1      	bne.n	8000bfc <chEvtBroadcastFlagsI+0xc>
 8000c18:	bd70      	pop	{r4, r5, r6, pc}
 8000c1a:	bf00      	nop
 8000c1c:	0000      	movs	r0, r0
	...

08000c20 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8000c24:	4d6e      	ldr	r5, [pc, #440]	; (8000de0 <VectorD8+0x1c0>)
 8000c26:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8000c28:	f8d6 a00c 	ldr.w	sl, [r6, #12]
  uint16_t sr = u->SR;
 8000c2c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8000c2e:	05da      	lsls	r2, r3, #23
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000c30:	b082      	sub	sp, #8
  uint16_t sr = u->SR;
 8000c32:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8000c34:	f100 8088 	bmi.w	8000d48 <VectorD8+0x128>
 8000c38:	2320      	movs	r3, #32
 8000c3a:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000c3e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000c42:	d04d      	beq.n	8000ce0 <VectorD8+0xc0>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000c44:	4f67      	ldr	r7, [pc, #412]	; (8000de4 <VectorD8+0x1c4>)

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000c46:	f04f 0900 	mov.w	r9, #0
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000c4a:	f107 0808 	add.w	r8, r7, #8
 8000c4e:	e007      	b.n	8000c60 <VectorD8+0x40>
    if (sr & USART_SR_RXNE)
 8000c50:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000c52:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000c54:	d41d      	bmi.n	8000c92 <VectorD8+0x72>
    sr = u->SR;
 8000c56:	6834      	ldr	r4, [r6, #0]
 8000c58:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000c5a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000c5e:	d03f      	beq.n	8000ce0 <VectorD8+0xc0>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000c60:	0723      	lsls	r3, r4, #28
 8000c62:	d0f5      	beq.n	8000c50 <VectorD8+0x30>
    sts |= SD_OVERRUN_ERROR;
 8000c64:	f014 0f08 	tst.w	r4, #8
 8000c68:	bf0c      	ite	eq
 8000c6a:	2100      	moveq	r1, #0
 8000c6c:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8000c6e:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 8000c70:	bf48      	it	mi
 8000c72:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8000c76:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8000c78:	bf48      	it	mi
 8000c7a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8000c7e:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8000c80:	bf48      	it	mi
 8000c82:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8000c86:	4638      	mov	r0, r7
 8000c88:	f7ff ffb2 	bl	8000bf0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8000c8c:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000c8e:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000c90:	d5e1      	bpl.n	8000c56 <VectorD8+0x36>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000c92:	696a      	ldr	r2, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8000c94:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	d042      	beq.n	8000d22 <VectorD8+0x102>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 8000c9c:	6a2a      	ldr	r2, [r5, #32]
 8000c9e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000ca0:	428a      	cmp	r2, r1
 8000ca2:	d048      	beq.n	8000d36 <VectorD8+0x116>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8000ca4:	6969      	ldr	r1, [r5, #20]
 8000ca6:	4023      	ands	r3, r4
  *iqp->q_wrptr++ = b;
 8000ca8:	1c50      	adds	r0, r2, #1
  iqp->q_counter++;
 8000caa:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 8000cac:	6228      	str	r0, [r5, #32]
  iqp->q_counter++;
 8000cae:	6169      	str	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8000cb0:	7013      	strb	r3, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8000cb2:	6a2a      	ldr	r2, [r5, #32]
 8000cb4:	69eb      	ldr	r3, [r5, #28]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d301      	bcc.n	8000cbe <VectorD8+0x9e>
    iqp->q_wrptr = iqp->q_buffer;
 8000cba:	69ab      	ldr	r3, [r5, #24]
 8000cbc:	622b      	str	r3, [r5, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000cbe:	68eb      	ldr	r3, [r5, #12]
 8000cc0:	4543      	cmp	r3, r8
 8000cc2:	d0c8      	beq.n	8000c56 <VectorD8+0x36>
  tqp->next             = tp->queue.next;
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	60ea      	str	r2, [r5, #12]
  (void) chSchReadyI(tp);
 8000cc8:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8000cca:	f8c2 8004 	str.w	r8, [r2, #4]
  tp->u.rdymsg = msg;
 8000cce:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000cd2:	f7ff ff3d 	bl	8000b50 <chSchReadyI>
    sr = u->SR;
 8000cd6:	6834      	ldr	r4, [r6, #0]
 8000cd8:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000cda:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000cde:	d1bf      	bne.n	8000c60 <VectorD8+0x40>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000ce6:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8000cea:	d001      	beq.n	8000cf0 <VectorD8+0xd0>
 8000cec:	0622      	lsls	r2, r4, #24
 8000cee:	d43a      	bmi.n	8000d66 <VectorD8+0x146>
  if (sr & USART_SR_TC) {
 8000cf0:	0663      	lsls	r3, r4, #25
 8000cf2:	d511      	bpl.n	8000d18 <VectorD8+0xf8>
 8000cf4:	2320      	movs	r3, #32
 8000cf6:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
 8000cfa:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000cfc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d056      	beq.n	8000db0 <VectorD8+0x190>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000d02:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000d06:	ea0a 0303 	and.w	r3, sl, r3
    u->SR = ~USART_SR_TC;
 8000d0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000d0e:	60f3      	str	r3, [r6, #12]
 8000d10:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8000d12:	6032      	str	r2, [r6, #0]
 8000d14:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 8000d18:	b002      	add	sp, #8
 8000d1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8000d1e:	f7ff bad7 	b.w	80002d0 <_port_irq_epilogue>
 8000d22:	2104      	movs	r1, #4
 8000d24:	4638      	mov	r0, r7
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	f7ff ff62 	bl	8000bf0 <chEvtBroadcastFlagsI>
  if (iqIsFullI(iqp)) {
 8000d2c:	6a2a      	ldr	r2, [r5, #32]
 8000d2e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d30:	9b01      	ldr	r3, [sp, #4]
 8000d32:	428a      	cmp	r2, r1
 8000d34:	d1b6      	bne.n	8000ca4 <VectorD8+0x84>
 8000d36:	6969      	ldr	r1, [r5, #20]
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d0b3      	beq.n	8000ca4 <VectorD8+0x84>
 8000d3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d40:	4638      	mov	r0, r7
 8000d42:	f7ff ff55 	bl	8000bf0 <chEvtBroadcastFlagsI>
 8000d46:	e786      	b.n	8000c56 <VectorD8+0x36>
 8000d48:	2320      	movs	r3, #32
 8000d4a:	f383 8811 	msr	BASEPRI, r3
 8000d4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d52:	1d28      	adds	r0, r5, #4
 8000d54:	f7ff ff4c 	bl	8000bf0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8000d58:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8000d5c:	6033      	str	r3, [r6, #0]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f383 8811 	msr	BASEPRI, r3
 8000d64:	e768      	b.n	8000c38 <VectorD8+0x18>
 8000d66:	2320      	movs	r3, #32
 8000d68:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8000d6c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d6e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d025      	beq.n	8000dc0 <VectorD8+0x1a0>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8000d74:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8000d76:	6c29      	ldr	r1, [r5, #64]	; 0x40
  b = *oqp->q_rdptr++;
 8000d78:	1c58      	adds	r0, r3, #1
  oqp->q_counter++;
 8000d7a:	3201      	adds	r2, #1
 8000d7c:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8000d7e:	64a8      	str	r0, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8000d80:	4288      	cmp	r0, r1
  b = *oqp->q_rdptr++;
 8000d82:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8000d84:	d301      	bcc.n	8000d8a <VectorD8+0x16a>
    oqp->q_rdptr = oqp->q_buffer;
 8000d86:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000d88:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000d8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d8c:	4a16      	ldr	r2, [pc, #88]	; (8000de8 <VectorD8+0x1c8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d009      	beq.n	8000da6 <VectorD8+0x186>
  tqp->next             = tp->queue.next;
 8000d92:	6819      	ldr	r1, [r3, #0]
 8000d94:	6329      	str	r1, [r5, #48]	; 0x30
  tp->u.rdymsg = msg;
 8000d96:	f04f 0e00 	mov.w	lr, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000d9a:	604a      	str	r2, [r1, #4]
  (void) chSchReadyI(tp);
 8000d9c:	4618      	mov	r0, r3
  tp->u.rdymsg = msg;
 8000d9e:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000da2:	f7ff fed5 	bl	8000b50 <chSchReadyI>
      u->DR = b;
 8000da6:	6077      	str	r7, [r6, #4]
 8000da8:	2300      	movs	r3, #0
 8000daa:	f383 8811 	msr	BASEPRI, r3
 8000dae:	e79f      	b.n	8000cf0 <VectorD8+0xd0>
    if (oqIsEmptyI(&sdp->oqueue))
 8000db0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0a5      	beq.n	8000d02 <VectorD8+0xe2>
 8000db6:	2110      	movs	r1, #16
 8000db8:	480a      	ldr	r0, [pc, #40]	; (8000de4 <VectorD8+0x1c4>)
 8000dba:	f7ff ff19 	bl	8000bf0 <chEvtBroadcastFlagsI>
 8000dbe:	e7a0      	b.n	8000d02 <VectorD8+0xe2>
  if (oqIsEmptyI(oqp)) {
 8000dc0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d0d6      	beq.n	8000d74 <VectorD8+0x154>
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <VectorD8+0x1c4>)
 8000dca:	f7ff ff11 	bl	8000bf0 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8000dce:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000dd2:	ea0a 0303 	and.w	r3, sl, r3
 8000dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dda:	60f3      	str	r3, [r6, #12]
 8000ddc:	e7e4      	b.n	8000da8 <VectorD8+0x188>
 8000dde:	bf00      	nop
 8000de0:	20000884 	.word	0x20000884
 8000de4:	20000888 	.word	0x20000888
 8000de8:	200008b4 	.word	0x200008b4
 8000dec:	00000000 	.word	0x00000000

08000df0 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <chMtxUnlockS+0x4c>)
void chMtxUnlockS(mutex_t *mp) {
 8000df2:	b430      	push	{r4, r5}
 8000df4:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000df6:	6805      	ldr	r5, [r0, #0]
  thread_t *ctp = currp;
 8000df8:	6998      	ldr	r0, [r3, #24]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8000dfa:	68e3      	ldr	r3, [r4, #12]
 8000dfc:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000dfe:	42a5      	cmp	r5, r4
 8000e00:	d017      	beq.n	8000e32 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8000e02:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8000e04:	b14b      	cbz	r3, 8000e1a <chMtxUnlockS+0x2a>
 8000e06:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d003      	beq.n	8000e14 <chMtxUnlockS+0x24>
 8000e0c:	6892      	ldr	r2, [r2, #8]
 8000e0e:	4291      	cmp	r1, r2
 8000e10:	bf38      	it	cc
 8000e12:	4611      	movcc	r1, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8000e14:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f5      	bne.n	8000e06 <chMtxUnlockS+0x16>
  tqp->next             = tp->queue.next;
 8000e1a:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8000e1c:	6baa      	ldr	r2, [r5, #56]	; 0x38
      ctp->prio = newprio;
 8000e1e:	6081      	str	r1, [r0, #8]
 8000e20:	6023      	str	r3, [r4, #0]
      tp->mtxlist = mp;
      (void) chSchReadyI(tp);
 8000e22:	4628      	mov	r0, r5
  tqp->next->queue.prev = (thread_t *)tqp;
 8000e24:	605c      	str	r4, [r3, #4]
      mp->owner = tp;
 8000e26:	60a5      	str	r5, [r4, #8]
      mp->next = tp->mtxlist;
 8000e28:	60e2      	str	r2, [r4, #12]
      tp->mtxlist = mp;
 8000e2a:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8000e2c:	bc30      	pop	{r4, r5}
      (void) chSchReadyI(tp);
 8000e2e:	f7ff be8f 	b.w	8000b50 <chSchReadyI>
      mp->owner = NULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60ab      	str	r3, [r5, #8]
}
 8000e36:	bc30      	pop	{r4, r5}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20001238 	.word	0x20001238

08000e40 <chMtxUnlock>:
  thread_t *ctp = currp;
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <chMtxUnlock+0x60>)
void chMtxUnlock(mutex_t *mp) {
 8000e42:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8000e44:	699d      	ldr	r5, [r3, #24]
 8000e46:	2320      	movs	r3, #32
 8000e48:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000e4c:	6804      	ldr	r4, [r0, #0]
    ctp->mtxlist = mp->next;
 8000e4e:	68c3      	ldr	r3, [r0, #12]
 8000e50:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8000e52:	4284      	cmp	r4, r0
 8000e54:	d01d      	beq.n	8000e92 <chMtxUnlock+0x52>
      tprio_t newprio = ctp->realprio;
 8000e56:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 8000e58:	b14b      	cbz	r3, 8000e6e <chMtxUnlock+0x2e>
 8000e5a:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d003      	beq.n	8000e68 <chMtxUnlock+0x28>
 8000e60:	6892      	ldr	r2, [r2, #8]
 8000e62:	4291      	cmp	r1, r2
 8000e64:	bf38      	it	cc
 8000e66:	4611      	movcc	r1, r2
        lmp = lmp->next;
 8000e68:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f5      	bne.n	8000e5a <chMtxUnlock+0x1a>
 8000e6e:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
 8000e70:	6822      	ldr	r2, [r4, #0]
      mp->next = tp->mtxlist;
 8000e72:	6ba6      	ldr	r6, [r4, #56]	; 0x38
      ctp->prio = newprio;
 8000e74:	60a9      	str	r1, [r5, #8]
      (void) chSchReadyI(tp);
 8000e76:	4620      	mov	r0, r4
 8000e78:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000e7a:	6053      	str	r3, [r2, #4]
      mp->owner = tp;
 8000e7c:	609c      	str	r4, [r3, #8]
      mp->next = tp->mtxlist;
 8000e7e:	60de      	str	r6, [r3, #12]
      tp->mtxlist = mp;
 8000e80:	63a3      	str	r3, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 8000e82:	f7ff fe65 	bl	8000b50 <chSchReadyI>
      chSchRescheduleS();
 8000e86:	f7ff fd8b 	bl	80009a0 <chSchRescheduleS>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f383 8811 	msr	BASEPRI, r3
 8000e90:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60a3      	str	r3, [r4, #8]
 8000e96:	2300      	movs	r3, #0
 8000e98:	f383 8811 	msr	BASEPRI, r3
 8000e9c:	bd70      	pop	{r4, r5, r6, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20001238 	.word	0x20001238
	...

08000eb0 <chMtxLockS>:
  thread_t *ctp = currp;
 8000eb0:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <chMtxLockS+0xc4>)
  if (mp->owner != NULL) {
 8000eb2:	6882      	ldr	r2, [r0, #8]
void chMtxLockS(mutex_t *mp) {
 8000eb4:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8000eb6:	699c      	ldr	r4, [r3, #24]
  if (mp->owner != NULL) {
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d056      	beq.n	8000f6a <chMtxLockS+0xba>
      while (tp->prio < ctp->prio) {
 8000ebc:	68a1      	ldr	r1, [r4, #8]
 8000ebe:	6893      	ldr	r3, [r2, #8]
 8000ec0:	4299      	cmp	r1, r3
 8000ec2:	4605      	mov	r5, r0
 8000ec4:	d907      	bls.n	8000ed6 <chMtxLockS+0x26>
        switch (tp->state) {
 8000ec6:	f892 3020 	ldrb.w	r3, [r2, #32]
        tp->prio = ctp->prio;
 8000eca:	6091      	str	r1, [r2, #8]
        switch (tp->state) {
 8000ecc:	2b06      	cmp	r3, #6
 8000ece:	d033      	beq.n	8000f38 <chMtxLockS+0x88>
 8000ed0:	2b07      	cmp	r3, #7
 8000ed2:	d01d      	beq.n	8000f10 <chMtxLockS+0x60>
 8000ed4:	b19b      	cbz	r3, 8000efe <chMtxLockS+0x4e>
      queue_prio_insert(ctp, &mp->queue);
 8000ed6:	462b      	mov	r3, r5
 8000ed8:	e003      	b.n	8000ee2 <chMtxLockS+0x32>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000eda:	6899      	ldr	r1, [r3, #8]
 8000edc:	68a2      	ldr	r2, [r4, #8]
 8000ede:	4291      	cmp	r1, r2
 8000ee0:	d302      	bcc.n	8000ee8 <chMtxLockS+0x38>
    cp = cp->queue.next;
 8000ee2:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000ee4:	429d      	cmp	r5, r3
 8000ee6:	d1f8      	bne.n	8000eda <chMtxLockS+0x2a>
  tp->queue.prev             = cp->queue.prev;
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 8000eec:	6023      	str	r3, [r4, #0]
  tp->queue.prev->queue.next = tp;
 8000eee:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000ef0:	605c      	str	r4, [r3, #4]
      ctp->u.wtmtxp = mp;
 8000ef2:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8000ef4:	2006      	movs	r0, #6
}
 8000ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 8000efa:	f7ff bdc9 	b.w	8000a90 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 8000efe:	e892 000a 	ldmia.w	r2, {r1, r3}
 8000f02:	6019      	str	r1, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000f04:	6811      	ldr	r1, [r2, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 8000f06:	4610      	mov	r0, r2
 8000f08:	604b      	str	r3, [r1, #4]
 8000f0a:	f7ff fe21 	bl	8000b50 <chSchReadyI>
 8000f0e:	e7e2      	b.n	8000ed6 <chMtxLockS+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
 8000f10:	e892 0009 	ldmia.w	r2, {r0, r3}
 8000f14:	6018      	str	r0, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000f16:	6810      	ldr	r0, [r2, #0]
 8000f18:	6043      	str	r3, [r0, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8000f1a:	6a56      	ldr	r6, [r2, #36]	; 0x24
 8000f1c:	4633      	mov	r3, r6
 8000f1e:	e002      	b.n	8000f26 <chMtxLockS+0x76>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f20:	6898      	ldr	r0, [r3, #8]
 8000f22:	4281      	cmp	r1, r0
 8000f24:	d802      	bhi.n	8000f2c <chMtxLockS+0x7c>
    cp = cp->queue.next;
 8000f26:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f28:	429e      	cmp	r6, r3
 8000f2a:	d1f9      	bne.n	8000f20 <chMtxLockS+0x70>
  tp->queue.prev             = cp->queue.prev;
 8000f2c:	6859      	ldr	r1, [r3, #4]
 8000f2e:	6051      	str	r1, [r2, #4]
  tp->queue.next             = cp;
 8000f30:	6013      	str	r3, [r2, #0]
  tp->queue.prev->queue.next = tp;
 8000f32:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	e7ce      	b.n	8000ed6 <chMtxLockS+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
 8000f38:	e892 0009 	ldmia.w	r2, {r0, r3}
 8000f3c:	6018      	str	r0, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000f3e:	6810      	ldr	r0, [r2, #0]
 8000f40:	6043      	str	r3, [r0, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8000f42:	6a56      	ldr	r6, [r2, #36]	; 0x24
 8000f44:	4633      	mov	r3, r6
 8000f46:	e002      	b.n	8000f4e <chMtxLockS+0x9e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f48:	6898      	ldr	r0, [r3, #8]
 8000f4a:	4281      	cmp	r1, r0
 8000f4c:	d802      	bhi.n	8000f54 <chMtxLockS+0xa4>
    cp = cp->queue.next;
 8000f4e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d1f9      	bne.n	8000f48 <chMtxLockS+0x98>
  tp->queue.prev             = cp->queue.prev;
 8000f54:	6859      	ldr	r1, [r3, #4]
 8000f56:	6051      	str	r1, [r2, #4]
  tp->queue.next             = cp;
 8000f58:	6013      	str	r3, [r2, #0]
  tp->queue.prev->queue.next = tp;
 8000f5a:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 8000f5c:	605a      	str	r2, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8000f5e:	68b2      	ldr	r2, [r6, #8]
      while (tp->prio < ctp->prio) {
 8000f60:	68a1      	ldr	r1, [r4, #8]
 8000f62:	6893      	ldr	r3, [r2, #8]
 8000f64:	428b      	cmp	r3, r1
 8000f66:	d3ae      	bcc.n	8000ec6 <chMtxLockS+0x16>
 8000f68:	e7b5      	b.n	8000ed6 <chMtxLockS+0x26>
    mp->next = ctp->mtxlist;
 8000f6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f6c:	60c3      	str	r3, [r0, #12]
    mp->owner = ctp;
 8000f6e:	6084      	str	r4, [r0, #8]
    ctp->mtxlist = mp;
 8000f70:	63a0      	str	r0, [r4, #56]	; 0x38
 8000f72:	bd70      	pop	{r4, r5, r6, pc}
 8000f74:	20001238 	.word	0x20001238
	...

08000f80 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 8000f80:	b508      	push	{r3, lr}
 8000f82:	2320      	movs	r3, #32
 8000f84:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 8000f88:	f7ff ff92 	bl	8000eb0 <chMtxLockS>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f383 8811 	msr	BASEPRI, r3
 8000f92:	bd08      	pop	{r3, pc}
	...

08000fa0 <chHeapStatus>:
 *                      free free block found space or @ NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8000fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8000fa4:	4c17      	ldr	r4, [pc, #92]	; (8001004 <chHeapStatus+0x64>)
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	bf18      	it	ne
 8000faa:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 8000fac:	f104 0710 	add.w	r7, r4, #16
 8000fb0:	4638      	mov	r0, r7
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8000fb2:	4689      	mov	r9, r1
 8000fb4:	4690      	mov	r8, r2
  H_LOCK(heapp);
 8000fb6:	f7ff ffe3 	bl	8000f80 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8000fba:	68a3      	ldr	r3, [r4, #8]
 8000fbc:	b1f3      	cbz	r3, 8000ffc <chHeapStatus+0x5c>
 8000fbe:	2400      	movs	r4, #0
 8000fc0:	4625      	mov	r5, r4
 8000fc2:	4626      	mov	r6, r4
    size_t pages = H_PAGES(H_NEXT(qp));
 8000fc4:	6858      	ldr	r0, [r3, #4]
  while (H_NEXT(qp) != NULL) {
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4284      	cmp	r4, r0

    /* Updating counters.*/
    n++;
 8000fca:	f106 0601 	add.w	r6, r6, #1
    tpages += pages;
 8000fce:	4405      	add	r5, r0
 8000fd0:	bf38      	it	cc
 8000fd2:	4604      	movcc	r4, r0
  while (H_NEXT(qp) != NULL) {
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f5      	bne.n	8000fc4 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8000fd8:	f1b9 0f00 	cmp.w	r9, #0
 8000fdc:	d002      	beq.n	8000fe4 <chHeapStatus+0x44>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8000fde:	00ed      	lsls	r5, r5, #3
 8000fe0:	f8c9 5000 	str.w	r5, [r9]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8000fe4:	f1b8 0f00 	cmp.w	r8, #0
 8000fe8:	d002      	beq.n	8000ff0 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	f8c8 4000 	str.w	r4, [r8]
  }
  H_UNLOCK(heapp);
 8000ff0:	4638      	mov	r0, r7
 8000ff2:	f7ff ff25 	bl	8000e40 <chMtxUnlock>

  return n;
}
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  lpages = 0U;
 8000ffc:	461c      	mov	r4, r3
  tpages = 0U;
 8000ffe:	461d      	mov	r5, r3
  n = 0U;
 8001000:	461e      	mov	r6, r3
 8001002:	e7e9      	b.n	8000fd8 <chHeapStatus+0x38>
 8001004:	200012b0 	.word	0x200012b0
	...

08001010 <chHeapFree>:
void chHeapFree(void *p) {
 8001010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8001012:	f850 3c04 	ldr.w	r3, [r0, #-4]
  heapp = H_HEAP(hp);
 8001016:	f850 5c08 	ldr.w	r5, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800101a:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800101c:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 800101e:	f105 0710 	add.w	r7, r5, #16
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8001022:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 8001026:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 8001028:	f1a0 0408 	sub.w	r4, r0, #8
  qp = &heapp->header;
 800102c:	3508      	adds	r5, #8
  H_LOCK(heapp);
 800102e:	4638      	mov	r0, r7
 8001030:	f7ff ffa6 	bl	8000f80 <chMtxLock>
  qp = &heapp->header;
 8001034:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
 8001036:	42ab      	cmp	r3, r5
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8001038:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 800103a:	d001      	beq.n	8001040 <chHeapFree+0x30>
 800103c:	42a3      	cmp	r3, r4
 800103e:	d202      	bcs.n	8001046 <chHeapFree+0x36>
 8001040:	b11a      	cbz	r2, 800104a <chHeapFree+0x3a>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8001042:	4294      	cmp	r4, r2
 8001044:	d301      	bcc.n	800104a <chHeapFree+0x3a>
    qp = H_NEXT(qp);
 8001046:	4613      	mov	r3, r2
 8001048:	e7f5      	b.n	8001036 <chHeapFree+0x26>
      H_NEXT(hp) = H_NEXT(qp);
 800104a:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 800104e:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8001050:	e916 0005 	ldmdb	r6, {r0, r2}
 8001054:	3201      	adds	r2, #1
 8001056:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 800105a:	4281      	cmp	r1, r0
 800105c:	d00a      	beq.n	8001074 <chHeapFree+0x64>
      if ((H_LIMIT(qp) == hp)) {
 800105e:	6859      	ldr	r1, [r3, #4]
 8001060:	1c4a      	adds	r2, r1, #1
 8001062:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001066:	4294      	cmp	r4, r2
 8001068:	d012      	beq.n	8001090 <chHeapFree+0x80>
  H_UNLOCK(heapp);
 800106a:	4638      	mov	r0, r7
}
 800106c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8001070:	f7ff bee6 	b.w	8000e40 <chMtxUnlock>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8001074:	6849      	ldr	r1, [r1, #4]
 8001076:	4411      	add	r1, r2
 8001078:	f846 1c04 	str.w	r1, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800107c:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8001080:	f846 2c08 	str.w	r2, [r6, #-8]
      if ((H_LIMIT(qp) == hp)) {
 8001084:	6859      	ldr	r1, [r3, #4]
 8001086:	1c4a      	adds	r2, r1, #1
 8001088:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800108c:	4294      	cmp	r4, r2
 800108e:	d1ec      	bne.n	800106a <chHeapFree+0x5a>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8001090:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8001094:	3201      	adds	r2, #1
 8001096:	4411      	add	r1, r2
 8001098:	6059      	str	r1, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 800109a:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800109e:	601a      	str	r2, [r3, #0]
  H_UNLOCK(heapp);
 80010a0:	4638      	mov	r0, r7
}
 80010a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 80010a6:	f7ff becb 	b.w	8000e40 <chMtxUnlock>
 80010aa:	bf00      	nop
 80010ac:	0000      	movs	r0, r0
	...

080010b0 <chThdRelease>:
 80010b0:	2220      	movs	r2, #32
 80010b2:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 80010b6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80010c0:	6a03      	ldr	r3, [r0, #32]
 80010c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80010c6:	2b0f      	cmp	r3, #15
 80010c8:	d003      	beq.n	80010d2 <chThdRelease+0x22>
 80010ca:	2300      	movs	r3, #0
 80010cc:	f383 8811 	msr	BASEPRI, r3
 80010d0:	4770      	bx	lr
    REG_REMOVE(tp);
 80010d2:	6943      	ldr	r3, [r0, #20]
 80010d4:	6901      	ldr	r1, [r0, #16]
void chThdRelease(thread_t *tp) {
 80010d6:	b410      	push	{r4}
    REG_REMOVE(tp);
 80010d8:	6119      	str	r1, [r3, #16]
 80010da:	6904      	ldr	r4, [r0, #16]
 80010dc:	2100      	movs	r1, #0
 80010de:	6163      	str	r3, [r4, #20]
 80010e0:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 80010e4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d00c      	beq.n	800110a <chThdRelease+0x5a>
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d108      	bne.n	8001106 <chThdRelease+0x56>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 80010f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80010f6:	69c0      	ldr	r0, [r0, #28]
 80010f8:	f382 8811 	msr	BASEPRI, r2
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->next = mp->next;
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	6002      	str	r2, [r0, #0]
  mp->next = php;
 8001100:	6018      	str	r0, [r3, #0]
 8001102:	f381 8811 	msr	BASEPRI, r1
}
 8001106:	bc10      	pop	{r4}
 8001108:	4770      	bx	lr
      chHeapFree(chThdGetWorkingAreaX(tp));
 800110a:	69c0      	ldr	r0, [r0, #28]
}
 800110c:	bc10      	pop	{r4}
      chHeapFree(chThdGetWorkingAreaX(tp));
 800110e:	f7ff bf7f 	b.w	8001010 <chHeapFree>
 8001112:	bf00      	nop
	...

08001120 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8001120:	b538      	push	{r3, r4, r5, lr}
 8001122:	4604      	mov	r4, r0
 8001124:	2320      	movs	r3, #32
 8001126:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 800112a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800112e:	2b0f      	cmp	r3, #15
 8001130:	d007      	beq.n	8001142 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <chThdWait+0x34>)
  tp->queue.next = tlp->next;
 8001134:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001136:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8001138:	2009      	movs	r0, #9
 800113a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 800113c:	62a3      	str	r3, [r4, #40]	; 0x28
 800113e:	f7ff fca7 	bl	8000a90 <chSchGoSleepS>
  msg = tp->u.exitcode;
 8001142:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001144:	2300      	movs	r3, #0
 8001146:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 800114a:	4620      	mov	r0, r4
 800114c:	f7ff ffb0 	bl	80010b0 <chThdRelease>
}
 8001150:	4628      	mov	r0, r5
 8001152:	bd38      	pop	{r3, r4, r5, pc}
 8001154:	20001238 	.word	0x20001238
	...

08001160 <test_wait_threads>:

/*
 * Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8001160:	b570      	push	{r4, r5, r6, lr}
 8001162:	4c06      	ldr	r4, [pc, #24]	; (800117c <test_wait_threads+0x1c>)
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8001164:	2600      	movs	r6, #0
 8001166:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800116a:	6820      	ldr	r0, [r4, #0]
 800116c:	b110      	cbz	r0, 8001174 <test_wait_threads+0x14>
      chThdWait(threads[i]);
 800116e:	f7ff ffd7 	bl	8001120 <chThdWait>
      threads[i] = NULL;
 8001172:	6026      	str	r6, [r4, #0]
 8001174:	3404      	adds	r4, #4
  for (i = 0; i < MAX_THREADS; i++)
 8001176:	42ac      	cmp	r4, r5
 8001178:	d1f7      	bne.n	800116a <test_wait_threads+0xa>
    }
}
 800117a:	bd70      	pop	{r4, r5, r6, pc}
 800117c:	20001084 	.word	0x20001084

08001180 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8001180:	6883      	ldr	r3, [r0, #8]
 8001182:	3301      	adds	r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	6083      	str	r3, [r0, #8]
 8001188:	dd00      	ble.n	800118c <chSemSignalI+0xc>
 800118a:	4770      	bx	lr
  thread_t *tp = tqp->next;
 800118c:	6803      	ldr	r3, [r0, #0]
  tqp->next             = tp->queue.next;
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	6002      	str	r2, [r0, #0]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
 8001192:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8001194:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 8001196:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 8001198:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800119a:	f7ff bcd9 	b.w	8000b50 <chSchReadyI>
 800119e:	bf00      	nop

080011a0 <chSemResetI>:
void chSemResetI(semaphore_t *sp, cnt_t n) {
 80011a0:	b570      	push	{r4, r5, r6, lr}
  cnt = sp->cnt;
 80011a2:	6885      	ldr	r5, [r0, #8]
  sp->cnt = n;
 80011a4:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 80011a6:	3501      	adds	r5, #1
 80011a8:	2d00      	cmp	r5, #0
 80011aa:	dc0c      	bgt.n	80011c6 <chSemResetI+0x26>
 80011ac:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 80011ae:	f06f 0601 	mvn.w	r6, #1
  thread_t *tp = tqp->prev;
 80011b2:	6860      	ldr	r0, [r4, #4]
  tqp->prev             = tp->queue.prev;
 80011b4:	6843      	ldr	r3, [r0, #4]
 80011b6:	6063      	str	r3, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 80011b8:	601c      	str	r4, [r3, #0]
 80011ba:	f7ff fcc9 	bl	8000b50 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
 80011be:	3501      	adds	r5, #1
 80011c0:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 80011c2:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 80011c4:	d1f5      	bne.n	80011b2 <chSemResetI+0x12>
 80011c6:	bd70      	pop	{r4, r5, r6, pc}
	...

080011d0 <chSemReset>:
void chSemReset(semaphore_t *sp, cnt_t n) {
 80011d0:	b508      	push	{r3, lr}
 80011d2:	2320      	movs	r3, #32
 80011d4:	f383 8811 	msr	BASEPRI, r3
  chSemResetI(sp, n);
 80011d8:	f7ff ffe2 	bl	80011a0 <chSemResetI>
  chSchRescheduleS();
 80011dc:	f7ff fbe0 	bl	80009a0 <chSchRescheduleS>
 80011e0:	2300      	movs	r3, #0
 80011e2:	f383 8811 	msr	BASEPRI, r3
 80011e6:	bd08      	pop	{r3, pc}
	...

080011f0 <chThdExit>:
void chThdExit(msg_t msg) {
 80011f0:	b538      	push	{r3, r4, r5, lr}
 80011f2:	2220      	movs	r2, #32
 80011f4:	4603      	mov	r3, r0
 80011f6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <chThdExit+0x4c>)
 80011fc:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 80011fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8001200:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8001202:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8001206:	4285      	cmp	r5, r0
 8001208:	d006      	beq.n	8001218 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 800120a:	6803      	ldr	r3, [r0, #0]
 800120c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800120e:	f7ff fc9f 	bl	8000b50 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8001212:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001214:	42a8      	cmp	r0, r5
 8001216:	d1f8      	bne.n	800120a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 8001218:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800121c:	b943      	cbnz	r3, 8001230 <chThdExit+0x40>
 800121e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001222:	079b      	lsls	r3, r3, #30
 8001224:	d104      	bne.n	8001230 <chThdExit+0x40>
    REG_REMOVE(tp);
 8001226:	6963      	ldr	r3, [r4, #20]
 8001228:	6922      	ldr	r2, [r4, #16]
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	6922      	ldr	r2, [r4, #16]
 800122e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8001230:	200f      	movs	r0, #15
}
 8001232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8001236:	f7ff bc2b 	b.w	8000a90 <chSchGoSleepS>
 800123a:	bf00      	nop
 800123c:	20001238 	.word	0x20001238

08001240 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <chVTDoResetI+0x68>)
 8001242:	69da      	ldr	r2, [r3, #28]
 8001244:	4282      	cmp	r2, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 8001246:	b410      	push	{r4}
  if (ch.vtlist.next != vtp) {
 8001248:	d00f      	beq.n	800126a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 800124a:	6841      	ldr	r1, [r0, #4]
 800124c:	6802      	ldr	r2, [r0, #0]
 800124e:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 8001250:	6802      	ldr	r2, [r0, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001252:	331c      	adds	r3, #28
    vtp->func = NULL;
 8001254:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001256:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 8001258:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 800125a:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800125c:	d003      	beq.n	8001266 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 800125e:	6881      	ldr	r1, [r0, #8]
 8001260:	6893      	ldr	r3, [r2, #8]
 8001262:	440b      	add	r3, r1
 8001264:	6093      	str	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001266:	bc10      	pop	{r4}
 8001268:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 800126a:	4618      	mov	r0, r3
 800126c:	6811      	ldr	r1, [r2, #0]
 800126e:	f840 1f1c 	str.w	r1, [r0, #28]!
  vtp->func = NULL;
 8001272:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001274:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001276:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 8001278:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800127a:	d011      	beq.n	80012a0 <chVTDoResetI+0x60>
  ch.vtlist.next->delta += vtp->delta;
 800127c:	6894      	ldr	r4, [r2, #8]
 800127e:	6888      	ldr	r0, [r1, #8]
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8001280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8001282:	1903      	adds	r3, r0, r4
  return (systime_t)STM32_ST_TIM->CNT;
 8001284:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001288:	608b      	str	r3, [r1, #8]
 800128a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 800128c:	1a8a      	subs	r2, r1, r2
  if (nowdelta >= ch.vtlist.next->delta) {
 800128e:	4293      	cmp	r3, r2
 8001290:	d9e9      	bls.n	8001266 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 8001292:	1a9b      	subs	r3, r3, r2
  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 8001294:	2b02      	cmp	r3, #2
 8001296:	bf2c      	ite	cs
 8001298:	18cb      	addcs	r3, r1, r3
 800129a:	1c8b      	addcc	r3, r1, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800129c:	6363      	str	r3, [r4, #52]	; 0x34
 800129e:	e7e2      	b.n	8001266 <chVTDoResetI+0x26>
  STM32_ST_TIM->DIER = 0;
 80012a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012a4:	60dc      	str	r4, [r3, #12]
 80012a6:	e7de      	b.n	8001266 <chVTDoResetI+0x26>
 80012a8:	20001238 	.word	0x20001238
 80012ac:	00000000 	.word	0x00000000

080012b0 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 80012b0:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80012b2:	4d1c      	ldr	r5, [pc, #112]	; (8001324 <chVTDoSetI+0x74>)
 80012b4:	462e      	mov	r6, r5
 80012b6:	2902      	cmp	r1, #2
 80012b8:	f856 4f1c 	ldr.w	r4, [r6, #28]!
  vtp->par = par;
 80012bc:	6103      	str	r3, [r0, #16]
  return (systime_t)STM32_ST_TIM->CNT;
 80012be:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80012c2:	bf38      	it	cc
 80012c4:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80012c6:	42b4      	cmp	r4, r6
  vtp->func = vtfunc;
 80012c8:	60c2      	str	r2, [r0, #12]
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80012cc:	d01c      	beq.n	8001308 <chVTDoSetI+0x58>
    delta = now - ch.vtlist.lasttime + delay;
 80012ce:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80012d0:	1a9b      	subs	r3, r3, r2
    if (delta < now - ch.vtlist.lasttime) {
 80012d2:	1859      	adds	r1, r3, r1
      delta -= p->delta;
 80012d4:	68a3      	ldr	r3, [r4, #8]
    if (delta < now - ch.vtlist.lasttime) {
 80012d6:	d312      	bcc.n	80012fe <chVTDoSetI+0x4e>
    p = p->next;
 80012d8:	6824      	ldr	r4, [r4, #0]
    delta -= p->delta;
 80012da:	1ac9      	subs	r1, r1, r3
  while (p->delta < delta) {
 80012dc:	68a3      	ldr	r3, [r4, #8]
 80012de:	428b      	cmp	r3, r1
 80012e0:	d3fa      	bcc.n	80012d8 <chVTDoSetI+0x28>
  vtp->prev = vtp->next->prev;
 80012e2:	6863      	ldr	r3, [r4, #4]
 80012e4:	6043      	str	r3, [r0, #4]
  vtp->next = p;
 80012e6:	6004      	str	r4, [r0, #0]
  vtp->prev->next = vtp;
 80012e8:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
 80012ea:	6060      	str	r0, [r4, #4]
  vtp->delta = delta
 80012ec:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
 80012ee:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.delta = (systime_t)-1;
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 80012f4:	1a59      	subs	r1, r3, r1
 80012f6:	60a1      	str	r1, [r4, #8]
  ch.vtlist.delta = (systime_t)-1;
 80012f8:	626a      	str	r2, [r5, #36]	; 0x24
}
 80012fa:	bcf0      	pop	{r4, r5, r6, r7}
 80012fc:	4770      	bx	lr
    else if (delta < p->delta) {
 80012fe:	4299      	cmp	r1, r3
 8001300:	d2ed      	bcs.n	80012de <chVTDoSetI+0x2e>
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
 8001302:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001304:	637a      	str	r2, [r7, #52]	; 0x34
 8001306:	e7ea      	b.n	80012de <chVTDoSetI+0x2e>
      ch.vtlist.lasttime = now;
 8001308:	62ab      	str	r3, [r5, #40]	; 0x28
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 800130a:	185e      	adds	r6, r3, r1
  STM32_ST_TIM->SR     = 0;
 800130c:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800130e:	2302      	movs	r3, #2
      ch.vtlist.next = vtp;
 8001310:	61e8      	str	r0, [r5, #28]
      ch.vtlist.prev = vtp;
 8001312:	6228      	str	r0, [r5, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8001314:	6004      	str	r4, [r0, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001316:	6044      	str	r4, [r0, #4]
      vtp->delta = delay;
 8001318:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800131a:	637e      	str	r6, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800131c:	613a      	str	r2, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	e7eb      	b.n	80012fa <chVTDoSetI+0x4a>
 8001322:	bf00      	nop
 8001324:	20001238 	.word	0x20001238
	...

08001330 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001330:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != time) {
 8001332:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001334:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 8001336:	d012      	beq.n	800135e <chSchGoSleepTimeoutS+0x2e>
    chVTDoSetI(&vt, time, wakeup, currp);
 8001338:	4c0c      	ldr	r4, [pc, #48]	; (800136c <chSchGoSleepTimeoutS+0x3c>)
 800133a:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <chSchGoSleepTimeoutS+0x40>)
 800133c:	69a3      	ldr	r3, [r4, #24]
 800133e:	4605      	mov	r5, r0
 8001340:	a801      	add	r0, sp, #4
 8001342:	f7ff ffb5 	bl	80012b0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8001346:	4628      	mov	r0, r5
 8001348:	f7ff fba2 	bl	8000a90 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800134c:	9b04      	ldr	r3, [sp, #16]
 800134e:	b113      	cbz	r3, 8001356 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8001350:	a801      	add	r0, sp, #4
 8001352:	f7ff ff75 	bl	8001240 <chVTDoResetI>
  return currp->u.rdymsg;
 8001356:	69a3      	ldr	r3, [r4, #24]
}
 8001358:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800135a:	b007      	add	sp, #28
 800135c:	bd30      	pop	{r4, r5, pc}
 800135e:	4c03      	ldr	r4, [pc, #12]	; (800136c <chSchGoSleepTimeoutS+0x3c>)
    chSchGoSleepS(newstate);
 8001360:	f7ff fb96 	bl	8000a90 <chSchGoSleepS>
  return currp->u.rdymsg;
 8001364:	69a3      	ldr	r3, [r4, #24]
}
 8001366:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001368:	b007      	add	sp, #28
 800136a:	bd30      	pop	{r4, r5, pc}
 800136c:	20001238 	.word	0x20001238
 8001370:	08000431 	.word	0x08000431
	...

08001380 <chSemWaitTimeoutS>:
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8001380:	4603      	mov	r3, r0
  if (--sp->cnt < (cnt_t)0) {
 8001382:	6880      	ldr	r0, [r0, #8]
 8001384:	1e42      	subs	r2, r0, #1
 8001386:	2a00      	cmp	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	db01      	blt.n	8001390 <chSemWaitTimeoutS+0x10>
  return MSG_OK;
 800138c:	2000      	movs	r0, #0
 800138e:	4770      	bx	lr
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8001390:	b410      	push	{r4}
    if (TIME_IMMEDIATE == time) {
 8001392:	b159      	cbz	r1, 80013ac <chSemWaitTimeoutS+0x2c>
    currp->u.wtsemp = sp;
 8001394:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <chSemWaitTimeoutS+0x38>)
 8001396:	6992      	ldr	r2, [r2, #24]
 8001398:	6253      	str	r3, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 800139a:	685c      	ldr	r4, [r3, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 800139c:	2005      	movs	r0, #5
 800139e:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->queue.prev->queue.next = tp;
 80013a2:	6022      	str	r2, [r4, #0]
  tqp->prev                  = tp;
 80013a4:	605a      	str	r2, [r3, #4]
}
 80013a6:	bc10      	pop	{r4}
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 80013a8:	f7ff bfc2 	b.w	8001330 <chSchGoSleepTimeoutS>
      sp->cnt++;
 80013ac:	6098      	str	r0, [r3, #8]
}
 80013ae:	bc10      	pop	{r4}
      return MSG_TIMEOUT;
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20001238 	.word	0x20001238
 80013bc:	00000000 	.word	0x00000000

080013c0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 80013c0:	b161      	cbz	r1, 80013dc <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80013c4:	b410      	push	{r4}
 80013c6:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 80013c8:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 80013ca:	699b      	ldr	r3, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80013cc:	2004      	movs	r0, #4
 80013ce:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
 80013d2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 80013d4:	6053      	str	r3, [r2, #4]
}
 80013d6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80013d8:	f7ff bfaa 	b.w	8001330 <chSchGoSleepTimeoutS>
}
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20001238 	.word	0x20001238
	...

080013f0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 80013f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f4:	4699      	mov	r9, r3
 80013f6:	b083      	sub	sp, #12
 80013f8:	4604      	mov	r4, r0
 80013fa:	460d      	mov	r5, r1
 80013fc:	4616      	mov	r6, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 80013fe:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001402:	2320      	movs	r3, #32
 8001404:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 8001408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  size_t w = 0;
 800140c:	2700      	movs	r7, #0
 800140e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001410:	9300      	str	r3, [sp, #0]
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001412:	eb09 0302 	add.w	r3, r9, r2
 8001416:	9301      	str	r3, [sp, #4]
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001418:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800141c:	46ba      	mov	sl, r7
    while (oqIsFullI(oqp)) {
 800141e:	68a3      	ldr	r3, [r4, #8]
 8001420:	b1fb      	cbz	r3, 8001462 <oqWriteTimeout+0x72>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001422:	6962      	ldr	r2, [r4, #20]
    oqp->q_counter--;
 8001424:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001426:	1c51      	adds	r1, r2, #1
    oqp->q_counter--;
 8001428:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800142a:	6161      	str	r1, [r4, #20]
    oqp->q_counter--;
 800142c:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800142e:	782b      	ldrb	r3, [r5, #0]
 8001430:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001432:	6923      	ldr	r3, [r4, #16]
 8001434:	6962      	ldr	r2, [r4, #20]
 8001436:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8001438:	bf24      	itt	cs
 800143a:	68e3      	ldrcs	r3, [r4, #12]
 800143c:	6163      	strcs	r3, [r4, #20]
    *oqp->q_wrptr++ = *bp++;
 800143e:	3501      	adds	r5, #1
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 8001440:	f1b8 0f00 	cmp.w	r8, #0
 8001444:	d001      	beq.n	800144a <oqWriteTimeout+0x5a>
      nfy(oqp);
 8001446:	4620      	mov	r0, r4
 8001448:	47c0      	blx	r8
 800144a:	f38a 8811 	msr	BASEPRI, sl

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 800144e:	3e01      	subs	r6, #1
    w++;
 8001450:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8001454:	d017      	beq.n	8001486 <oqWriteTimeout+0x96>
 8001456:	9b00      	ldr	r3, [sp, #0]
 8001458:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
 800145c:	68a3      	ldr	r3, [r4, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1df      	bne.n	8001422 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001462:	f11b 0f03 	cmn.w	fp, #3
 8001466:	d812      	bhi.n	800148e <oqWriteTimeout+0x9e>
 8001468:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800146c:	6a51      	ldr	r1, [r2, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 800146e:	9a01      	ldr	r2, [sp, #4]
 8001470:	1a51      	subs	r1, r2, r1
        if (next_timeout > timeout) {
 8001472:	4589      	cmp	r9, r1
 8001474:	d305      	bcc.n	8001482 <oqWriteTimeout+0x92>
  return chThdEnqueueTimeoutS(tqp, time);
 8001476:	4620      	mov	r0, r4
 8001478:	f7ff ffa2 	bl	80013c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800147c:	2800      	cmp	r0, #0
 800147e:	d0ce      	beq.n	800141e <oqWriteTimeout+0x2e>
 8001480:	2300      	movs	r3, #0
 8001482:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
 8001486:	4638      	mov	r0, r7
 8001488:	b003      	add	sp, #12
 800148a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148e:	4649      	mov	r1, r9
 8001490:	4620      	mov	r0, r4
 8001492:	f7ff ff95 	bl	80013c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001496:	2800      	cmp	r0, #0
 8001498:	d0c1      	beq.n	800141e <oqWriteTimeout+0x2e>
 800149a:	e7f1      	b.n	8001480 <oqWriteTimeout+0x90>
 800149c:	0000      	movs	r0, r0
	...

080014a0 <_writet.lto_priv.86>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80014a0:	3030      	adds	r0, #48	; 0x30
 80014a2:	f7ff bfa5 	b.w	80013f0 <oqWriteTimeout>
 80014a6:	bf00      	nop
	...

080014b0 <_write.lto_priv.80>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80014b0:	3030      	adds	r0, #48	; 0x30
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014b6:	f7ff bf9b 	b.w	80013f0 <oqWriteTimeout>
 80014ba:	bf00      	nop
 80014bc:	0000      	movs	r0, r0
	...

080014c0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80014c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c2:	4604      	mov	r4, r0
 80014c4:	460f      	mov	r7, r1
 80014c6:	4616      	mov	r6, r2
 80014c8:	2320      	movs	r3, #32
 80014ca:	f383 8811 	msr	BASEPRI, r3
 80014ce:	e003      	b.n	80014d8 <oqPutTimeout+0x18>
 80014d0:	f7ff ff76 	bl	80013c0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80014d4:	2800      	cmp	r0, #0
 80014d6:	db19      	blt.n	800150c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
 80014d8:	68a5      	ldr	r5, [r4, #8]
 80014da:	4631      	mov	r1, r6
 80014dc:	4620      	mov	r0, r4
 80014de:	2d00      	cmp	r5, #0
 80014e0:	d0f6      	beq.n	80014d0 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 80014e2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80014e4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80014e6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80014e8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80014ea:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80014ec:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80014ee:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80014f0:	6923      	ldr	r3, [r4, #16]
 80014f2:	6962      	ldr	r2, [r4, #20]
 80014f4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80014f6:	bf24      	itt	cs
 80014f8:	68e3      	ldrcs	r3, [r4, #12]
 80014fa:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 80014fc:	69e3      	ldr	r3, [r4, #28]
 80014fe:	b10b      	cbz	r3, 8001504 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001500:	4620      	mov	r0, r4
 8001502:	4798      	blx	r3
 8001504:	2000      	movs	r0, #0
 8001506:	f380 8811 	msr	BASEPRI, r0
}
 800150a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800150c:	f385 8811 	msr	BASEPRI, r5
 8001510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001512:	bf00      	nop
	...

08001520 <_putt.lto_priv.84>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001520:	3030      	adds	r0, #48	; 0x30
 8001522:	f7ff bfcd 	b.w	80014c0 <oqPutTimeout>
 8001526:	bf00      	nop
	...

08001530 <_put.lto_priv.82>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001530:	3030      	adds	r0, #48	; 0x30
 8001532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001536:	f7ff bfc3 	b.w	80014c0 <oqPutTimeout>
 800153a:	bf00      	nop
 800153c:	0000      	movs	r0, r0
	...

08001540 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
 8001540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001544:	4699      	mov	r9, r3
 8001546:	b083      	sub	sp, #12
 8001548:	4604      	mov	r4, r0
 800154a:	460d      	mov	r5, r1
 800154c:	4616      	mov	r6, r2
  qnotify_t nfy = iqp->q_notify;
 800154e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001552:	2320      	movs	r3, #32
 8001554:	f383 8811 	msr	BASEPRI, r3
 8001558:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  size_t r = 0;
 800155c:	2700      	movs	r7, #0
 800155e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001560:	9300      	str	r3, [sp, #0]
  deadline = osalOsGetSystemTimeX() + timeout;
 8001562:	eb09 0302 	add.w	r3, r9, r2
 8001566:	9301      	str	r3, [sp, #4]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001568:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800156c:	46ba      	mov	sl, r7
    while (iqIsEmptyI(iqp)) {
 800156e:	68a3      	ldr	r3, [r4, #8]
 8001570:	b1fb      	cbz	r3, 80015b2 <iqReadTimeout+0x72>
    *bp++ = *iqp->q_rdptr++;
 8001572:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 8001574:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001576:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 8001578:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 800157a:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 800157c:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800157e:	7813      	ldrb	r3, [r2, #0]
 8001580:	702b      	strb	r3, [r5, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 8001582:	6923      	ldr	r3, [r4, #16]
 8001584:	69a2      	ldr	r2, [r4, #24]
 8001586:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001588:	bf24      	itt	cs
 800158a:	68e3      	ldrcs	r3, [r4, #12]
 800158c:	61a3      	strcs	r3, [r4, #24]
    *bp++ = *iqp->q_rdptr++;
 800158e:	3501      	adds	r5, #1
    if (nfy != NULL) {
 8001590:	f1b8 0f00 	cmp.w	r8, #0
 8001594:	d001      	beq.n	800159a <iqReadTimeout+0x5a>
      nfy(iqp);
 8001596:	4620      	mov	r0, r4
 8001598:	47c0      	blx	r8
 800159a:	f38a 8811 	msr	BASEPRI, sl
    if (--n == 0U) {
 800159e:	3e01      	subs	r6, #1
    r++;
 80015a0:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 80015a4:	d017      	beq.n	80015d6 <iqReadTimeout+0x96>
 80015a6:	9b00      	ldr	r3, [sp, #0]
 80015a8:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
 80015ac:	68a3      	ldr	r3, [r4, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1df      	bne.n	8001572 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80015b2:	f11b 0f03 	cmn.w	fp, #3
 80015b6:	d812      	bhi.n	80015de <iqReadTimeout+0x9e>
 80015b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015bc:	6a51      	ldr	r1, [r2, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 80015be:	9a01      	ldr	r2, [sp, #4]
 80015c0:	1a51      	subs	r1, r2, r1
        if (next_timeout > timeout) {
 80015c2:	4589      	cmp	r9, r1
 80015c4:	d305      	bcc.n	80015d2 <iqReadTimeout+0x92>
 80015c6:	4620      	mov	r0, r4
 80015c8:	f7ff fefa 	bl	80013c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 80015cc:	2800      	cmp	r0, #0
 80015ce:	d0ce      	beq.n	800156e <iqReadTimeout+0x2e>
 80015d0:	2300      	movs	r3, #0
 80015d2:	f383 8811 	msr	BASEPRI, r3
}
 80015d6:	4638      	mov	r0, r7
 80015d8:	b003      	add	sp, #12
 80015da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015de:	4649      	mov	r1, r9
 80015e0:	4620      	mov	r0, r4
 80015e2:	f7ff feed 	bl	80013c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d0c1      	beq.n	800156e <iqReadTimeout+0x2e>
 80015ea:	e7f1      	b.n	80015d0 <iqReadTimeout+0x90>
 80015ec:	0000      	movs	r0, r0
	...

080015f0 <_readt.lto_priv.87>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80015f0:	300c      	adds	r0, #12
 80015f2:	f7ff bfa5 	b.w	8001540 <iqReadTimeout>
 80015f6:	bf00      	nop
	...

08001600 <_read.lto_priv.81>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001600:	300c      	adds	r0, #12
 8001602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001606:	f7ff bf9b 	b.w	8001540 <iqReadTimeout>
 800160a:	bf00      	nop
 800160c:	0000      	movs	r0, r0
	...

08001610 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001610:	b570      	push	{r4, r5, r6, lr}
 8001612:	2320      	movs	r3, #32
 8001614:	4604      	mov	r4, r0
 8001616:	460e      	mov	r6, r1
 8001618:	f383 8811 	msr	BASEPRI, r3
 800161c:	e003      	b.n	8001626 <iqGetTimeout+0x16>
 800161e:	f7ff fecf 	bl	80013c0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001622:	2800      	cmp	r0, #0
 8001624:	db1a      	blt.n	800165c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8001626:	68a5      	ldr	r5, [r4, #8]
 8001628:	4631      	mov	r1, r6
 800162a:	4620      	mov	r0, r4
 800162c:	2d00      	cmp	r5, #0
 800162e:	d0f6      	beq.n	800161e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8001630:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8001632:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001634:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8001636:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001638:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800163a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800163c:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800163e:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001640:	bf28      	it	cs
 8001642:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8001644:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001646:	bf28      	it	cs
 8001648:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 800164a:	69e3      	ldr	r3, [r4, #28]
 800164c:	b10b      	cbz	r3, 8001652 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 800164e:	4620      	mov	r0, r4
 8001650:	4798      	blx	r3
 8001652:	2300      	movs	r3, #0
 8001654:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8001658:	4628      	mov	r0, r5
}
 800165a:	bd70      	pop	{r4, r5, r6, pc}
 800165c:	f385 8811 	msr	BASEPRI, r5
 8001660:	bd70      	pop	{r4, r5, r6, pc}
 8001662:	bf00      	nop
	...

08001670 <_gett.lto_priv.85>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001670:	300c      	adds	r0, #12
 8001672:	f7ff bfcd 	b.w	8001610 <iqGetTimeout>
 8001676:	bf00      	nop
	...

08001680 <_get.lto_priv.83>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001680:	300c      	adds	r0, #12
 8001682:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001686:	f7ff bfc3 	b.w	8001610 <iqGetTimeout>
 800168a:	bf00      	nop
 800168c:	0000      	movs	r0, r0
	...

08001690 <chThdSleep>:
void chThdSleep(systime_t time) {
 8001690:	b508      	push	{r3, lr}
 8001692:	4601      	mov	r1, r0
 8001694:	2320      	movs	r3, #32
 8001696:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800169a:	2008      	movs	r0, #8
 800169c:	f7ff fe48 	bl	8001330 <chSchGoSleepTimeoutS>
 80016a0:	2300      	movs	r3, #0
 80016a2:	f383 8811 	msr	BASEPRI, r3
 80016a6:	bd08      	pop	{r3, pc}
	...

080016b0 <chSysRestoreStatusX.part.2>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 80016b0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016b2:	f3ef 8405 	mrs	r4, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 80016b6:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 80016ba:	b11c      	cbz	r4, 80016c4 <chSysRestoreStatusX.part.2+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80016bc:	2300      	movs	r3, #0
 80016be:	f383 8811 	msr	BASEPRI, r3
 80016c2:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 80016c4:	f7ff f96c 	bl	80009a0 <chSchRescheduleS>
 80016c8:	f384 8811 	msr	BASEPRI, r4
 80016cc:	bd10      	pop	{r4, pc}
 80016ce:	bf00      	nop

080016d0 <chSysGetStatusAndLockX.part.1>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016d0:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80016d4:	2320      	movs	r3, #32
 80016d6:	f383 8811 	msr	BASEPRI, r3
 80016da:	4770      	bx	lr
 80016dc:	0000      	movs	r0, r0
	...

080016e0 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80016e0:	07c2      	lsls	r2, r0, #31
bool chSysIntegrityCheckI(unsigned testmask) {
 80016e2:	b410      	push	{r4}
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 80016e4:	d512      	bpl.n	800170c <chSysIntegrityCheckI+0x2c>
    tp = ch.rlist.queue.next;
 80016e6:	4a2c      	ldr	r2, [pc, #176]	; (8001798 <chSysIntegrityCheckI+0xb8>)
 80016e8:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80016ea:	4291      	cmp	r1, r2
 80016ec:	d042      	beq.n	8001774 <chSysIntegrityCheckI+0x94>
 80016ee:	2300      	movs	r3, #0
      tp = tp->queue.next;
 80016f0:	6809      	ldr	r1, [r1, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80016f2:	4291      	cmp	r1, r2
      n++;
 80016f4:	f103 0301 	add.w	r3, r3, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 80016f8:	d1fa      	bne.n	80016f0 <chSysIntegrityCheckI+0x10>
    tp = ch.rlist.queue.prev;
 80016fa:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 80016fc:	428c      	cmp	r4, r1
 80016fe:	d036      	beq.n	800176e <chSysIntegrityCheckI+0x8e>
      tp = tp->queue.prev;
 8001700:	6864      	ldr	r4, [r4, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001702:	4294      	cmp	r4, r2
      n--;
 8001704:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001708:	d1fa      	bne.n	8001700 <chSysIntegrityCheckI+0x20>
    if (n != (cnt_t)0) {
 800170a:	bb83      	cbnz	r3, 800176e <chSysIntegrityCheckI+0x8e>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 800170c:	0783      	lsls	r3, r0, #30
 800170e:	d514      	bpl.n	800173a <chSysIntegrityCheckI+0x5a>
    vtp = ch.vtlist.next;
 8001710:	4a21      	ldr	r2, [pc, #132]	; (8001798 <chSysIntegrityCheckI+0xb8>)
 8001712:	4614      	mov	r4, r2
 8001714:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001718:	42a1      	cmp	r1, r4
 800171a:	d031      	beq.n	8001780 <chSysIntegrityCheckI+0xa0>
 800171c:	2300      	movs	r3, #0
      vtp = vtp->next;
 800171e:	6809      	ldr	r1, [r1, #0]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001720:	42a1      	cmp	r1, r4
      n++;
 8001722:	f103 0301 	add.w	r3, r3, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001726:	d1fa      	bne.n	800171e <chSysIntegrityCheckI+0x3e>
    vtp = ch.vtlist.prev;
 8001728:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800172a:	428a      	cmp	r2, r1
 800172c:	d01f      	beq.n	800176e <chSysIntegrityCheckI+0x8e>
      vtp = vtp->prev;
 800172e:	6852      	ldr	r2, [r2, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001730:	42a2      	cmp	r2, r4
      n--;
 8001732:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001736:	d1fa      	bne.n	800172e <chSysIntegrityCheckI+0x4e>
    if (n != (cnt_t)0) {
 8001738:	b9cb      	cbnz	r3, 800176e <chSysIntegrityCheckI+0x8e>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 800173a:	f010 0004 	ands.w	r0, r0, #4
 800173e:	d014      	beq.n	800176a <chSysIntegrityCheckI+0x8a>
    tp = ch.rlist.newer;
 8001740:	4a15      	ldr	r2, [pc, #84]	; (8001798 <chSysIntegrityCheckI+0xb8>)
 8001742:	6913      	ldr	r3, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8001744:	4293      	cmp	r3, r2
 8001746:	d021      	beq.n	800178c <chSysIntegrityCheckI+0xac>
 8001748:	2000      	movs	r0, #0
      tp = tp->newer;
 800174a:	691b      	ldr	r3, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800174c:	4293      	cmp	r3, r2
      n++;
 800174e:	f100 0001 	add.w	r0, r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 8001752:	d1fa      	bne.n	800174a <chSysIntegrityCheckI+0x6a>
    tp = ch.rlist.older;
 8001754:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8001756:	4299      	cmp	r1, r3
 8001758:	d009      	beq.n	800176e <chSysIntegrityCheckI+0x8e>
      tp = tp->older;
 800175a:	6949      	ldr	r1, [r1, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800175c:	4291      	cmp	r1, r2
      n--;
 800175e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    while (tp != (thread_t *)&ch.rlist) {
 8001762:	d1fa      	bne.n	800175a <chSysIntegrityCheckI+0x7a>
    if (n != (cnt_t)0) {
 8001764:	3000      	adds	r0, #0
 8001766:	bf18      	it	ne
 8001768:	2001      	movne	r0, #1
}
 800176a:	bc10      	pop	{r4}
 800176c:	4770      	bx	lr
      return true;
 800176e:	2001      	movs	r0, #1
}
 8001770:	bc10      	pop	{r4}
 8001772:	4770      	bx	lr
    tp = ch.rlist.queue.prev;
 8001774:	6854      	ldr	r4, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001776:	4294      	cmp	r4, r2
    n = (cnt_t)0;
 8001778:	bf18      	it	ne
 800177a:	2300      	movne	r3, #0
    while (tp != (thread_t *)&ch.rlist.queue) {
 800177c:	d1c0      	bne.n	8001700 <chSysIntegrityCheckI+0x20>
 800177e:	e7c5      	b.n	800170c <chSysIntegrityCheckI+0x2c>
    vtp = ch.vtlist.prev;
 8001780:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001782:	42a2      	cmp	r2, r4
    n = (cnt_t)0;
 8001784:	bf18      	it	ne
 8001786:	2300      	movne	r3, #0
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001788:	d1d1      	bne.n	800172e <chSysIntegrityCheckI+0x4e>
 800178a:	e7d6      	b.n	800173a <chSysIntegrityCheckI+0x5a>
    tp = ch.rlist.older;
 800178c:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800178e:	4299      	cmp	r1, r3
    n = (cnt_t)0;
 8001790:	f04f 0000 	mov.w	r0, #0
    while (tp != (thread_t *)&ch.rlist) {
 8001794:	d1e1      	bne.n	800175a <chSysIntegrityCheckI+0x7a>
 8001796:	e7e8      	b.n	800176a <chSysIntegrityCheckI+0x8a>
 8001798:	20001238 	.word	0x20001238
 800179c:	00000000 	.word	0x00000000

080017a0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 80017a2:	4f12      	ldr	r7, [pc, #72]	; (80017ec <__init_ram_areas+0x4c>)
void __init_ram_areas(void) {
 80017a4:	4d12      	ldr	r5, [pc, #72]	; (80017f0 <__init_ram_areas+0x50>)
 80017a6:	4c13      	ldr	r4, [pc, #76]	; (80017f4 <__init_ram_areas+0x54>)
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <__init_ram_areas+0x58>)
 80017aa:	4914      	ldr	r1, [pc, #80]	; (80017fc <__init_ram_areas+0x5c>)
 80017ac:	f107 0e80 	add.w	lr, r7, #128	; 0x80
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80017b0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 80017b2:	429c      	cmp	r4, r3
 80017b4:	d911      	bls.n	80017da <__init_ram_areas+0x3a>
 80017b6:	3904      	subs	r1, #4
 80017b8:	461a      	mov	r2, r3
      *p = *tp;
 80017ba:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80017be:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 80017c2:	4294      	cmp	r4, r2
 80017c4:	d8f9      	bhi.n	80017ba <__init_ram_areas+0x1a>
 80017c6:	43da      	mvns	r2, r3
 80017c8:	4414      	add	r4, r2
 80017ca:	f024 0403 	bic.w	r4, r4, #3
 80017ce:	3404      	adds	r4, #4
 80017d0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 80017d2:	429d      	cmp	r5, r3
 80017d4:	d903      	bls.n	80017de <__init_ram_areas+0x3e>
      *p = 0;
 80017d6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 80017da:	429d      	cmp	r5, r3
 80017dc:	d8fb      	bhi.n	80017d6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
 80017de:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80017e0:	4577      	cmp	r7, lr
 80017e2:	d202      	bcs.n	80017ea <__init_ram_areas+0x4a>
 80017e4:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
 80017e8:	e7e3      	b.n	80017b2 <__init_ram_areas+0x12>
 80017ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ec:	080060c4 	.word	0x080060c4
 80017f0:	20001320 	.word	0x20001320
 80017f4:	20001320 	.word	0x20001320
 80017f8:	20001320 	.word	0x20001320
 80017fc:	080074c0 	.word	0x080074c0

08001800 <__default_exit>:
void __default_exit(void) {
 8001800:	e7fe      	b.n	8001800 <__default_exit>
 8001802:	bf00      	nop
	...

08001810 <__late_init>:
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
	...

08001820 <__core_init>:
void __core_init(void) {
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
	...

08001830 <test_009_001_setup.lto_priv.148>:
  mp->next = NULL;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <test_009_001_setup.lto_priv.148+0x10>)
 8001832:	2200      	movs	r2, #0
  mp->object_size = size;
 8001834:	2104      	movs	r1, #4
 8001836:	6059      	str	r1, [r3, #4]
  mp->next = NULL;
 8001838:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000818 	.word	0x20000818
	...

08001850 <null_provider.lto_priv.170>:

  (void)size;
  (void)align;

  return NULL;
}
 8001850:	2000      	movs	r0, #0
 8001852:	4770      	bx	lr
	...

08001860 <test_008_003_setup.lto_priv.145>:
 * - [8.3.3] Resetting the mailbox.
 * - [8.3.4] Testing chMBFetch() and chMBFetchI() timeout.
 * .
 */

static void test_008_003_setup(void) {
 8001860:	b470      	push	{r4, r5, r6}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));

  mbp->buffer = buf;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <test_008_003_setup.lto_priv.145+0x30>)
 8001864:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <test_008_003_setup.lto_priv.145+0x34>)
 8001866:	601a      	str	r2, [r3, #0]
  mbp->rdptr = buf;
  mbp->wrptr = buf;
  mbp->top = &buf[n];
 8001868:	f102 0610 	add.w	r6, r2, #16
  sp->cnt = n;
 800186c:	2504      	movs	r5, #4
 800186e:	2400      	movs	r4, #0
  tqp->next = (thread_t *)tqp;
 8001870:	f103 001c 	add.w	r0, r3, #28
 8001874:	f103 0110 	add.w	r1, r3, #16
 8001878:	605e      	str	r6, [r3, #4]
 800187a:	625d      	str	r5, [r3, #36]	; 0x24
 800187c:	619c      	str	r4, [r3, #24]
  mbp->rdptr = buf;
 800187e:	60da      	str	r2, [r3, #12]
  mbp->wrptr = buf;
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	61d8      	str	r0, [r3, #28]
  tqp->prev = (thread_t *)tqp;
 8001884:	6218      	str	r0, [r3, #32]
  tqp->next = (thread_t *)tqp;
 8001886:	6119      	str	r1, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8001888:	6159      	str	r1, [r3, #20]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 800188a:	bc70      	pop	{r4, r5, r6}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000854 	.word	0x20000854
 8001894:	200012f0 	.word	0x200012f0
	...

080018a0 <test_008_002_setup.lto_priv.142>:
 80018a0:	f7ff bfde 	b.w	8001860 <test_008_003_setup.lto_priv.145>
	...

080018b0 <test_008_001_setup.lto_priv.139>:
 80018b0:	f7ff bfd6 	b.w	8001860 <test_008_003_setup.lto_priv.145>
	...

080018c0 <test_008_003_teardown.lto_priv.146>:

static void test_008_003_teardown(void) {
  chMBReset(&mb1);
 80018c0:	f004 bae6 	b.w	8005e90 <chMBReset.constprop.29>
	...

080018d0 <test_008_002_teardown.lto_priv.143>:
 80018d0:	f7ff bff6 	b.w	80018c0 <test_008_003_teardown.lto_priv.146>
	...

080018e0 <test_008_001_teardown.lto_priv.140>:
 80018e0:	f7ff bfee 	b.w	80018c0 <test_008_003_teardown.lto_priv.146>
	...

080018f0 <test_008_003_execute.lto_priv.147>:
}

static void test_008_003_execute(void) {
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [8.3.1] Filling the mailbox.*/
  test_set_step(1);
 80018f2:	4e57      	ldr	r6, [pc, #348]	; (8001a50 <test_008_003_execute.lto_priv.147+0x160>)
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80018f4:	4d57      	ldr	r5, [pc, #348]	; (8001a54 <test_008_003_execute.lto_priv.147+0x164>)
  test_set_step(1);
 80018f6:	2301      	movs	r3, #1
static void test_008_003_execute(void) {
 80018f8:	b083      	sub	sp, #12
  test_set_step(1);
 80018fa:	6033      	str	r3, [r6, #0]
 80018fc:	2442      	movs	r4, #66	; 0x42
      msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 80018fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001902:	4620      	mov	r0, r4
 8001904:	f004 fad4 	bl	8005eb0 <chMBPost.constprop.28>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001908:	fab0 f080 	clz	r0, r0
 800190c:	4629      	mov	r1, r5
 800190e:	0940      	lsrs	r0, r0, #5
 8001910:	f7fe fe9e 	bl	8000650 <_test_assert>
 8001914:	3401      	adds	r4, #1
 8001916:	b988      	cbnz	r0, 800193c <test_008_003_execute.lto_priv.147+0x4c>
    for (i = 0; i < MB_SIZE; i++) {
 8001918:	2c46      	cmp	r4, #70	; 0x46
 800191a:	d1f0      	bne.n	80018fe <test_008_003_execute.lto_priv.147+0xe>
    }
  }

  /* [8.3.2] Testing chMBPost(), chMBPostI(), chMBPostAhead() and
     chMBPostAheadI() timeout.*/
  test_set_step(2);
 800191c:	2302      	movs	r3, #2
  {
    msg1 = chMBPost(&mb1, 'X', 1);
 800191e:	2101      	movs	r1, #1
 8001920:	2058      	movs	r0, #88	; 0x58
  test_set_step(2);
 8001922:	6033      	str	r3, [r6, #0]
    msg1 = chMBPost(&mb1, 'X', 1);
 8001924:	f004 fac4 	bl	8005eb0 <chMBPost.constprop.28>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8001928:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800192c:	fab0 f080 	clz	r0, r0
 8001930:	4948      	ldr	r1, [pc, #288]	; (8001a54 <test_008_003_execute.lto_priv.147+0x164>)
 8001932:	0940      	lsrs	r0, r0, #5
 8001934:	f7fe fe8c 	bl	8000650 <_test_assert>
 8001938:	4605      	mov	r5, r0
 800193a:	b108      	cbz	r0, 8001940 <test_008_003_execute.lto_priv.147+0x50>
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
}
 800193c:	b003      	add	sp, #12
 800193e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001940:	2320      	movs	r3, #32
 8001942:	f383 8811 	msr	BASEPRI, r3
 8001946:	4c44      	ldr	r4, [pc, #272]	; (8001a58 <test_008_003_execute.lto_priv.147+0x168>)
 8001948:	6a63      	ldr	r3, [r4, #36]	; 0x24
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 800194a:	2b00      	cmp	r3, #0
 800194c:	dd7c      	ble.n	8001a48 <test_008_003_execute.lto_priv.147+0x158>
    return MSG_TIMEOUT;
  }

  chSemFastWaitI(&mbp->emptysem);
  *mbp->wrptr++ = msg;
 800194e:	68a1      	ldr	r1, [r4, #8]
  if (mbp->wrptr >= mbp->top) {
 8001950:	6860      	ldr	r0, [r4, #4]
  *mbp->wrptr++ = msg;
 8001952:	1d0a      	adds	r2, r1, #4
  sp->cnt--;
 8001954:	3b01      	subs	r3, #1
  if (mbp->wrptr >= mbp->top) {
 8001956:	4282      	cmp	r2, r0
  *mbp->wrptr++ = msg;
 8001958:	f04f 0758 	mov.w	r7, #88	; 0x58
 800195c:	6263      	str	r3, [r4, #36]	; 0x24
 800195e:	60a2      	str	r2, [r4, #8]
     mbp->wrptr = mbp->buffer;
 8001960:	bf28      	it	cs
 8001962:	6823      	ldrcs	r3, [r4, #0]
  *mbp->wrptr++ = msg;
 8001964:	600f      	str	r7, [r1, #0]
  }
  chSemSignalI(&mbp->fullsem);
 8001966:	483d      	ldr	r0, [pc, #244]	; (8001a5c <test_008_003_execute.lto_priv.147+0x16c>)
     mbp->wrptr = mbp->buffer;
 8001968:	bf28      	it	cs
 800196a:	60a3      	strcs	r3, [r4, #8]
  chSemSignalI(&mbp->fullsem);
 800196c:	f7ff fc08 	bl	8001180 <chSemSignalI>
 8001970:	2300      	movs	r3, #0
 8001972:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8001976:	4937      	ldr	r1, [pc, #220]	; (8001a54 <test_008_003_execute.lto_priv.147+0x164>)
 8001978:	4628      	mov	r0, r5
 800197a:	f7fe fe69 	bl	8000650 <_test_assert>
 800197e:	2800      	cmp	r0, #0
 8001980:	d1dc      	bne.n	800193c <test_008_003_execute.lto_priv.147+0x4c>
    msg1 = chMBPostAhead(&mb1, 'X', 1);
 8001982:	2101      	movs	r1, #1
 8001984:	2058      	movs	r0, #88	; 0x58
 8001986:	f004 fabb 	bl	8005f00 <chMBPostAhead.constprop.26>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800198a:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800198e:	fab0 f080 	clz	r0, r0
 8001992:	4930      	ldr	r1, [pc, #192]	; (8001a54 <test_008_003_execute.lto_priv.147+0x164>)
 8001994:	0940      	lsrs	r0, r0, #5
 8001996:	f7fe fe5b 	bl	8000650 <_test_assert>
 800199a:	4605      	mov	r5, r0
 800199c:	2800      	cmp	r0, #0
 800199e:	d1cd      	bne.n	800193c <test_008_003_execute.lto_priv.147+0x4c>
 80019a0:	2320      	movs	r3, #32
 80019a2:	f383 8811 	msr	BASEPRI, r3
 80019a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 80019a8:	2a00      	cmp	r2, #0
 80019aa:	dd4b      	ble.n	8001a44 <test_008_003_execute.lto_priv.147+0x154>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->emptysem);
  if (--mbp->rdptr < mbp->buffer) {
 80019ac:	68e3      	ldr	r3, [r4, #12]
 80019ae:	6821      	ldr	r1, [r4, #0]
 80019b0:	3b04      	subs	r3, #4
 80019b2:	3a01      	subs	r2, #1
 80019b4:	428b      	cmp	r3, r1
 80019b6:	6262      	str	r2, [r4, #36]	; 0x24
 80019b8:	60e3      	str	r3, [r4, #12]
 80019ba:	d202      	bcs.n	80019c2 <test_008_003_execute.lto_priv.147+0xd2>
    mbp->rdptr = mbp->top - 1;
 80019bc:	6863      	ldr	r3, [r4, #4]
 80019be:	3b04      	subs	r3, #4
 80019c0:	60e3      	str	r3, [r4, #12]
  }
  *mbp->rdptr = msg;
 80019c2:	2258      	movs	r2, #88	; 0x58
 80019c4:	601a      	str	r2, [r3, #0]
  chSemSignalI(&mbp->fullsem);
 80019c6:	4825      	ldr	r0, [pc, #148]	; (8001a5c <test_008_003_execute.lto_priv.147+0x16c>)
 80019c8:	f7ff fbda 	bl	8001180 <chSemSignalI>
 80019cc:	2300      	movs	r3, #0
 80019ce:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80019d2:	4920      	ldr	r1, [pc, #128]	; (8001a54 <test_008_003_execute.lto_priv.147+0x164>)
 80019d4:	4628      	mov	r0, r5
 80019d6:	f7fe fe3b 	bl	8000650 <_test_assert>
 80019da:	2800      	cmp	r0, #0
 80019dc:	d1ae      	bne.n	800193c <test_008_003_execute.lto_priv.147+0x4c>
  test_set_step(3);
 80019de:	2303      	movs	r3, #3
 80019e0:	6033      	str	r3, [r6, #0]
    chMBReset(&mb1);
 80019e2:	f004 fa55 	bl	8005e90 <chMBReset.constprop.29>
  test_set_step(4);
 80019e6:	2304      	movs	r3, #4
    msg1 = chMBFetch(&mb1, &msg2, 1);
 80019e8:	2101      	movs	r1, #1
 80019ea:	eb0d 0003 	add.w	r0, sp, r3
  test_set_step(4);
 80019ee:	6033      	str	r3, [r6, #0]
    msg1 = chMBFetch(&mb1, &msg2, 1);
 80019f0:	f004 fab6 	bl	8005f60 <chMBFetch.constprop.24>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80019f4:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80019f8:	fab0 f080 	clz	r0, r0
 80019fc:	4915      	ldr	r1, [pc, #84]	; (8001a54 <test_008_003_execute.lto_priv.147+0x164>)
 80019fe:	0940      	lsrs	r0, r0, #5
 8001a00:	f7fe fe26 	bl	8000650 <_test_assert>
 8001a04:	4605      	mov	r5, r0
 8001a06:	2800      	cmp	r0, #0
 8001a08:	d198      	bne.n	800193c <test_008_003_execute.lto_priv.147+0x4c>
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	f383 8811 	msr	BASEPRI, r3
 8001a10:	69a2      	ldr	r2, [r4, #24]
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
 8001a12:	2a00      	cmp	r2, #0
 8001a14:	dd1a      	ble.n	8001a4c <test_008_003_execute.lto_priv.147+0x15c>
    return MSG_TIMEOUT;
  }
  chSemFastWaitI(&mbp->fullsem);
  *msgp = *mbp->rdptr++;
 8001a16:	68e3      	ldr	r3, [r4, #12]
  if (mbp->rdptr >= mbp->top) {
    mbp->rdptr = mbp->buffer;
  }
  chSemSignalI(&mbp->emptysem);
 8001a18:	4811      	ldr	r0, [pc, #68]	; (8001a60 <test_008_003_execute.lto_priv.147+0x170>)
 8001a1a:	3a01      	subs	r2, #1
 8001a1c:	61a2      	str	r2, [r4, #24]
  if (mbp->rdptr >= mbp->top) {
 8001a1e:	6862      	ldr	r2, [r4, #4]
  *msgp = *mbp->rdptr++;
 8001a20:	6819      	ldr	r1, [r3, #0]
 8001a22:	9101      	str	r1, [sp, #4]
 8001a24:	3304      	adds	r3, #4
  if (mbp->rdptr >= mbp->top) {
 8001a26:	4293      	cmp	r3, r2
  *msgp = *mbp->rdptr++;
 8001a28:	60e3      	str	r3, [r4, #12]
    mbp->rdptr = mbp->buffer;
 8001a2a:	bf24      	itt	cs
 8001a2c:	6823      	ldrcs	r3, [r4, #0]
 8001a2e:	60e3      	strcs	r3, [r4, #12]
  chSemSignalI(&mbp->emptysem);
 8001a30:	f7ff fba6 	bl	8001180 <chSemSignalI>
 8001a34:	2300      	movs	r3, #0
 8001a36:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8001a3a:	4906      	ldr	r1, [pc, #24]	; (8001a54 <test_008_003_execute.lto_priv.147+0x164>)
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	f7fe fe07 	bl	8000650 <_test_assert>
 8001a42:	e77b      	b.n	800193c <test_008_003_execute.lto_priv.147+0x4c>
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8001a44:	2501      	movs	r5, #1
 8001a46:	e7c1      	b.n	80019cc <test_008_003_execute.lto_priv.147+0xdc>
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8001a48:	2501      	movs	r5, #1
 8001a4a:	e791      	b.n	8001970 <test_008_003_execute.lto_priv.147+0x80>
  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
 8001a4c:	2501      	movs	r5, #1
 8001a4e:	e7f1      	b.n	8001a34 <test_008_003_execute.lto_priv.147+0x144>
 8001a50:	2000106c 	.word	0x2000106c
 8001a54:	08006270 	.word	0x08006270
 8001a58:	20000854 	.word	0x20000854
 8001a5c:	20000864 	.word	0x20000864
 8001a60:	20000870 	.word	0x20000870
	...

08001a70 <test_008_002_execute.lto_priv.144>:
static void test_008_002_execute(void) {
 8001a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8001a74:	4fb8      	ldr	r7, [pc, #736]	; (8001d58 <test_008_002_execute.lto_priv.144+0x2e8>)
 8001a76:	2301      	movs	r3, #1
static void test_008_002_execute(void) {
 8001a78:	b083      	sub	sp, #12
  test_set_step(1);
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	2620      	movs	r6, #32
 8001a7e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8001a82:	4cb6      	ldr	r4, [pc, #728]	; (8001d5c <test_008_002_execute.lto_priv.144+0x2ec>)
 8001a84:	49b6      	ldr	r1, [pc, #728]	; (8001d60 <test_008_002_execute.lto_priv.144+0x2f0>)
 8001a86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a88:	f1a0 0004 	sub.w	r0, r0, #4
 8001a8c:	fab0 f080 	clz	r0, r0
 8001a90:	0940      	lsrs	r0, r0, #5
 8001a92:	f7fe fddd 	bl	8000650 <_test_assert>
 8001a96:	b128      	cbz	r0, 8001aa4 <test_008_002_execute.lto_priv.144+0x34>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f383 8811 	msr	BASEPRI, r3
}
 8001a9e:	b003      	add	sp, #12
 8001aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001aa4:	4605      	mov	r5, r0
 8001aa6:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8001aaa:	2302      	movs	r3, #2
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	f386 8811 	msr	BASEPRI, r6
    chMBResetI(&mb1);
 8001ab2:	f004 f9d5 	bl	8005e60 <chMBResetI.constprop.30>
 8001ab6:	f385 8811 	msr	BASEPRI, r5
 8001aba:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8001abe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ac0:	49a8      	ldr	r1, [pc, #672]	; (8001d64 <test_008_002_execute.lto_priv.144+0x2f4>)
 8001ac2:	f1a0 0004 	sub.w	r0, r0, #4
 8001ac6:	fab0 f080 	clz	r0, r0
 8001aca:	0940      	lsrs	r0, r0, #5
 8001acc:	f7fe fdc0 	bl	8000650 <_test_assert>
 8001ad0:	4680      	mov	r8, r0
 8001ad2:	b120      	cbz	r0, 8001ade <test_008_002_execute.lto_priv.144+0x6e>
 8001ad4:	f385 8811 	msr	BASEPRI, r5
}
 8001ad8:	b003      	add	sp, #12
 8001ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ade:	f380 8811 	msr	BASEPRI, r0
 8001ae2:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8001ae6:	69a0      	ldr	r0, [r4, #24]
 8001ae8:	499f      	ldr	r1, [pc, #636]	; (8001d68 <test_008_002_execute.lto_priv.144+0x2f8>)
 8001aea:	fab0 f080 	clz	r0, r0
 8001aee:	0940      	lsrs	r0, r0, #5
 8001af0:	f7fe fdae 	bl	8000650 <_test_assert>
 8001af4:	4605      	mov	r5, r0
 8001af6:	b120      	cbz	r0, 8001b02 <test_008_002_execute.lto_priv.144+0x92>
 8001af8:	f388 8811 	msr	BASEPRI, r8
}
 8001afc:	b003      	add	sp, #12
 8001afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b02:	f380 8811 	msr	BASEPRI, r0
 8001b06:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8001b0a:	6820      	ldr	r0, [r4, #0]
 8001b0c:	68a3      	ldr	r3, [r4, #8]
 8001b0e:	4997      	ldr	r1, [pc, #604]	; (8001d6c <test_008_002_execute.lto_priv.144+0x2fc>)
 8001b10:	1ac0      	subs	r0, r0, r3
 8001b12:	fab0 f080 	clz	r0, r0
 8001b16:	0940      	lsrs	r0, r0, #5
 8001b18:	f7fe fd9a 	bl	8000650 <_test_assert>
 8001b1c:	4680      	mov	r8, r0
 8001b1e:	2800      	cmp	r0, #0
 8001b20:	d1d8      	bne.n	8001ad4 <test_008_002_execute.lto_priv.144+0x64>
 8001b22:	f380 8811 	msr	BASEPRI, r0
 8001b26:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	68e3      	ldr	r3, [r4, #12]
 8001b2e:	4990      	ldr	r1, [pc, #576]	; (8001d70 <test_008_002_execute.lto_priv.144+0x300>)
 8001b30:	1ac0      	subs	r0, r0, r3
 8001b32:	fab0 f080 	clz	r0, r0
 8001b36:	0940      	lsrs	r0, r0, #5
 8001b38:	f7fe fd8a 	bl	8000650 <_test_assert>
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	d1db      	bne.n	8001af8 <test_008_002_execute.lto_priv.144+0x88>
 8001b40:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8001b44:	2303      	movs	r3, #3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001b46:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8001d78 <test_008_002_execute.lto_priv.144+0x308>
  test_set_step(3);
 8001b4a:	603b      	str	r3, [r7, #0]
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8001b4c:	4606      	mov	r6, r0
  chSemSignalI(&mbp->fullsem);
 8001b4e:	f104 0810 	add.w	r8, r4, #16
 8001b52:	2542      	movs	r5, #66	; 0x42
 8001b54:	2320      	movs	r3, #32
 8001b56:	f383 8811 	msr	BASEPRI, r3
 8001b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
  chSemSignalI(&mbp->fullsem);
 8001b62:	4640      	mov	r0, r8
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8001b64:	f340 80d1 	ble.w	8001d0a <test_008_002_execute.lto_priv.144+0x29a>
  *mbp->wrptr++ = msg;
 8001b68:	68a2      	ldr	r2, [r4, #8]
  if (mbp->wrptr >= mbp->top) {
 8001b6a:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8001b6e:	6261      	str	r1, [r4, #36]	; 0x24
  *mbp->wrptr++ = msg;
 8001b70:	1d13      	adds	r3, r2, #4
  if (mbp->wrptr >= mbp->top) {
 8001b72:	4573      	cmp	r3, lr
  *mbp->wrptr++ = msg;
 8001b74:	60a3      	str	r3, [r4, #8]
 8001b76:	6015      	str	r5, [r2, #0]
     mbp->wrptr = mbp->buffer;
 8001b78:	bf24      	itt	cs
 8001b7a:	6823      	ldrcs	r3, [r4, #0]
 8001b7c:	60a3      	strcs	r3, [r4, #8]
  chSemSignalI(&mbp->fullsem);
 8001b7e:	f7ff faff 	bl	8001180 <chSemSignalI>
 8001b82:	2001      	movs	r0, #1
 8001b84:	f386 8811 	msr	BASEPRI, r6
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001b88:	4649      	mov	r1, r9
 8001b8a:	f7fe fd61 	bl	8000650 <_test_assert>
 8001b8e:	3501      	adds	r5, #1
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d184      	bne.n	8001a9e <test_008_002_execute.lto_priv.144+0x2e>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8001b94:	2d45      	cmp	r5, #69	; 0x45
 8001b96:	d1dd      	bne.n	8001b54 <test_008_002_execute.lto_priv.144+0xe4>
 8001b98:	2320      	movs	r3, #32
 8001b9a:	f383 8811 	msr	BASEPRI, r3
 8001b9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8001ba0:	2a00      	cmp	r2, #0
 8001ba2:	dd10      	ble.n	8001bc6 <test_008_002_execute.lto_priv.144+0x156>
  if (--mbp->rdptr < mbp->buffer) {
 8001ba4:	68e3      	ldr	r3, [r4, #12]
 8001ba6:	6821      	ldr	r1, [r4, #0]
 8001ba8:	3b04      	subs	r3, #4
 8001baa:	3a01      	subs	r2, #1
 8001bac:	428b      	cmp	r3, r1
 8001bae:	6262      	str	r2, [r4, #36]	; 0x24
 8001bb0:	60e3      	str	r3, [r4, #12]
 8001bb2:	d202      	bcs.n	8001bba <test_008_002_execute.lto_priv.144+0x14a>
    mbp->rdptr = mbp->top - 1;
 8001bb4:	6863      	ldr	r3, [r4, #4]
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	60e3      	str	r3, [r4, #12]
  *mbp->rdptr = msg;
 8001bba:	2241      	movs	r2, #65	; 0x41
  chSemSignalI(&mbp->fullsem);
 8001bbc:	486d      	ldr	r0, [pc, #436]	; (8001d74 <test_008_002_execute.lto_priv.144+0x304>)
  *mbp->rdptr = msg;
 8001bbe:	601a      	str	r2, [r3, #0]
  chSemSignalI(&mbp->fullsem);
 8001bc0:	f7ff fade 	bl	8001180 <chSemSignalI>
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001bcc:	496a      	ldr	r1, [pc, #424]	; (8001d78 <test_008_002_execute.lto_priv.144+0x308>)
 8001bce:	f7fe fd3f 	bl	8000650 <_test_assert>
 8001bd2:	4605      	mov	r5, r0
 8001bd4:	2800      	cmp	r0, #0
 8001bd6:	f47f af62 	bne.w	8001a9e <test_008_002_execute.lto_priv.144+0x2e>
  test_set_step(4);
 8001bda:	2604      	movs	r6, #4
 8001bdc:	603e      	str	r6, [r7, #0]
 8001bde:	f04f 0820 	mov.w	r8, #32
 8001be2:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8001be6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001be8:	4964      	ldr	r1, [pc, #400]	; (8001d7c <test_008_002_execute.lto_priv.144+0x30c>)
 8001bea:	fab0 f080 	clz	r0, r0
 8001bee:	0940      	lsrs	r0, r0, #5
 8001bf0:	f7fe fd2e 	bl	8000650 <_test_assert>
 8001bf4:	4681      	mov	r9, r0
 8001bf6:	2800      	cmp	r0, #0
 8001bf8:	f47f af6c 	bne.w	8001ad4 <test_008_002_execute.lto_priv.144+0x64>
 8001bfc:	f380 8811 	msr	BASEPRI, r0
 8001c00:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8001c04:	69a0      	ldr	r0, [r4, #24]
 8001c06:	495e      	ldr	r1, [pc, #376]	; (8001d80 <test_008_002_execute.lto_priv.144+0x310>)
 8001c08:	f1a0 0004 	sub.w	r0, r0, #4
 8001c0c:	fab0 f080 	clz	r0, r0
 8001c10:	0940      	lsrs	r0, r0, #5
 8001c12:	f7fe fd1d 	bl	8000650 <_test_assert>
 8001c16:	4605      	mov	r5, r0
 8001c18:	b110      	cbz	r0, 8001c20 <test_008_002_execute.lto_priv.144+0x1b0>
 8001c1a:	f389 8811 	msr	BASEPRI, r9
 8001c1e:	e73e      	b.n	8001a9e <test_008_002_execute.lto_priv.144+0x2e>
 8001c20:	f380 8811 	msr	BASEPRI, r0
 8001c24:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8001c28:	68e0      	ldr	r0, [r4, #12]
 8001c2a:	68a3      	ldr	r3, [r4, #8]
 8001c2c:	4955      	ldr	r1, [pc, #340]	; (8001d84 <test_008_002_execute.lto_priv.144+0x314>)
 8001c2e:	eba0 0e03 	sub.w	lr, r0, r3
 8001c32:	f1de 0000 	rsbs	r0, lr, #0
 8001c36:	eb40 000e 	adc.w	r0, r0, lr
 8001c3a:	f7fe fd09 	bl	8000650 <_test_assert>
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	f47f af48 	bne.w	8001ad4 <test_008_002_execute.lto_priv.144+0x64>
 8001c44:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 8001c48:	2305      	movs	r3, #5
  chSemSignalI(&mbp->emptysem);
 8001c4a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8001d90 <test_008_002_execute.lto_priv.144+0x320>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001c4e:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8001d78 <test_008_002_execute.lto_priv.144+0x308>
  test_set_step(5);
 8001c52:	603b      	str	r3, [r7, #0]
  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
 8001c54:	4605      	mov	r5, r0
 8001c56:	2320      	movs	r3, #32
 8001c58:	f383 8811 	msr	BASEPRI, r3
 8001c5c:	69a3      	ldr	r3, [r4, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
  chSemSignalI(&mbp->emptysem);
 8001c64:	4648      	mov	r0, r9
  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
 8001c66:	dd52      	ble.n	8001d0e <test_008_002_execute.lto_priv.144+0x29e>
  *msgp = *mbp->rdptr++;
 8001c68:	68e3      	ldr	r3, [r4, #12]
 8001c6a:	61a2      	str	r2, [r4, #24]
  if (mbp->rdptr >= mbp->top) {
 8001c6c:	6862      	ldr	r2, [r4, #4]
  *msgp = *mbp->rdptr++;
 8001c6e:	6819      	ldr	r1, [r3, #0]
 8001c70:	9101      	str	r1, [sp, #4]
 8001c72:	3304      	adds	r3, #4
  if (mbp->rdptr >= mbp->top) {
 8001c74:	4293      	cmp	r3, r2
  *msgp = *mbp->rdptr++;
 8001c76:	60e3      	str	r3, [r4, #12]
    mbp->rdptr = mbp->buffer;
 8001c78:	bf24      	itt	cs
 8001c7a:	6823      	ldrcs	r3, [r4, #0]
 8001c7c:	60e3      	strcs	r3, [r4, #12]
  chSemSignalI(&mbp->emptysem);
 8001c7e:	f7ff fa7f 	bl	8001180 <chSemSignalI>
 8001c82:	2001      	movs	r0, #1
 8001c84:	f385 8811 	msr	BASEPRI, r5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001c88:	4641      	mov	r1, r8
 8001c8a:	f7fe fce1 	bl	8000650 <_test_assert>
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	f47f af05 	bne.w	8001a9e <test_008_002_execute.lto_priv.144+0x2e>
      test_emit_token(msg2);
 8001c94:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001c98:	f7fe fc32 	bl	8000500 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8001c9c:	3e01      	subs	r6, #1
 8001c9e:	d1da      	bne.n	8001c56 <test_008_002_execute.lto_priv.144+0x1e6>
    test_assert_sequence("ABCD", "wrong get sequence");
 8001ca0:	4939      	ldr	r1, [pc, #228]	; (8001d88 <test_008_002_execute.lto_priv.144+0x318>)
 8001ca2:	483a      	ldr	r0, [pc, #232]	; (8001d8c <test_008_002_execute.lto_priv.144+0x31c>)
 8001ca4:	f7fe fcac 	bl	8000600 <_test_assert_sequence>
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	f47f aef8 	bne.w	8001a9e <test_008_002_execute.lto_priv.144+0x2e>
  test_set_step(6);
 8001cae:	2306      	movs	r3, #6
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cb4:	2046      	movs	r0, #70	; 0x46
  test_set_step(6);
 8001cb6:	603b      	str	r3, [r7, #0]
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8001cb8:	f004 f8fa 	bl	8005eb0 <chMBPost.constprop.28>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001cbc:	fab0 f080 	clz	r0, r0
 8001cc0:	0940      	lsrs	r0, r0, #5
 8001cc2:	492d      	ldr	r1, [pc, #180]	; (8001d78 <test_008_002_execute.lto_priv.144+0x308>)
 8001cc4:	f7fe fcc4 	bl	8000650 <_test_assert>
 8001cc8:	2800      	cmp	r0, #0
 8001cca:	f47f aee8 	bne.w	8001a9e <test_008_002_execute.lto_priv.144+0x2e>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8001cce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd2:	a801      	add	r0, sp, #4
 8001cd4:	f004 f944 	bl	8005f60 <chMBFetch.constprop.24>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001cd8:	fab0 f080 	clz	r0, r0
 8001cdc:	0940      	lsrs	r0, r0, #5
 8001cde:	4926      	ldr	r1, [pc, #152]	; (8001d78 <test_008_002_execute.lto_priv.144+0x308>)
 8001ce0:	f7fe fcb6 	bl	8000650 <_test_assert>
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	f47f aeda 	bne.w	8001a9e <test_008_002_execute.lto_priv.144+0x2e>
  test_set_step(7);
 8001cea:	2307      	movs	r3, #7
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	2520      	movs	r5, #32
 8001cf0:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8001cf4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001cf6:	491b      	ldr	r1, [pc, #108]	; (8001d64 <test_008_002_execute.lto_priv.144+0x2f4>)
 8001cf8:	1f07      	subs	r7, r0, #4
 8001cfa:	4278      	negs	r0, r7
 8001cfc:	4178      	adcs	r0, r7
 8001cfe:	f7fe fca7 	bl	8000650 <_test_assert>
 8001d02:	b130      	cbz	r0, 8001d12 <test_008_002_execute.lto_priv.144+0x2a2>
 8001d04:	f386 8811 	msr	BASEPRI, r6
 8001d08:	e6c9      	b.n	8001a9e <test_008_002_execute.lto_priv.144+0x2e>
  if (chSemGetCounterI(&mbp->emptysem) <= (cnt_t)0) {
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	e73a      	b.n	8001b84 <test_008_002_execute.lto_priv.144+0x114>
  if (chSemGetCounterI(&mbp->fullsem) <= (cnt_t)0) {
 8001d0e:	2000      	movs	r0, #0
 8001d10:	e7b8      	b.n	8001c84 <test_008_002_execute.lto_priv.144+0x214>
 8001d12:	f386 8811 	msr	BASEPRI, r6
 8001d16:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8001d1a:	69a0      	ldr	r0, [r4, #24]
 8001d1c:	4912      	ldr	r1, [pc, #72]	; (8001d68 <test_008_002_execute.lto_priv.144+0x2f8>)
 8001d1e:	fab0 f080 	clz	r0, r0
 8001d22:	0940      	lsrs	r0, r0, #5
 8001d24:	f7fe fc94 	bl	8000650 <_test_assert>
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	d1eb      	bne.n	8001d04 <test_008_002_execute.lto_priv.144+0x294>
 8001d2c:	f386 8811 	msr	BASEPRI, r6
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8001d30:	6820      	ldr	r0, [r4, #0]
 8001d32:	68a3      	ldr	r3, [r4, #8]
 8001d34:	490d      	ldr	r1, [pc, #52]	; (8001d6c <test_008_002_execute.lto_priv.144+0x2fc>)
 8001d36:	1ac2      	subs	r2, r0, r3
 8001d38:	4250      	negs	r0, r2
 8001d3a:	4150      	adcs	r0, r2
 8001d3c:	f7fe fc88 	bl	8000650 <_test_assert>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	f47f aeac 	bne.w	8001a9e <test_008_002_execute.lto_priv.144+0x2e>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8001d46:	6820      	ldr	r0, [r4, #0]
 8001d48:	68e3      	ldr	r3, [r4, #12]
 8001d4a:	4909      	ldr	r1, [pc, #36]	; (8001d70 <test_008_002_execute.lto_priv.144+0x300>)
 8001d4c:	1ac3      	subs	r3, r0, r3
 8001d4e:	4258      	negs	r0, r3
 8001d50:	4158      	adcs	r0, r3
 8001d52:	f7fe fc7d 	bl	8000650 <_test_assert>
 8001d56:	e6a2      	b.n	8001a9e <test_008_002_execute.lto_priv.144+0x2e>
 8001d58:	2000106c 	.word	0x2000106c
 8001d5c:	20000854 	.word	0x20000854
 8001d60:	080061b8 	.word	0x080061b8
 8001d64:	080061c4 	.word	0x080061c4
 8001d68:	080061d0 	.word	0x080061d0
 8001d6c:	080061dc 	.word	0x080061dc
 8001d70:	08006200 	.word	0x08006200
 8001d74:	20000864 	.word	0x20000864
 8001d78:	08006270 	.word	0x08006270
 8001d7c:	08006224 	.word	0x08006224
 8001d80:	08006230 	.word	0x08006230
 8001d84:	0800623c 	.word	0x0800623c
 8001d88:	08006254 	.word	0x08006254
 8001d8c:	08006268 	.word	0x08006268
 8001d90:	20000870 	.word	0x20000870
	...

08001da0 <test_008_001_execute.lto_priv.141>:
static void test_008_001_execute(void) {
 8001da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8001da4:	4f95      	ldr	r7, [pc, #596]	; (8001ffc <test_008_001_execute.lto_priv.141+0x25c>)
 8001da6:	2301      	movs	r3, #1
static void test_008_001_execute(void) {
 8001da8:	b083      	sub	sp, #12
  test_set_step(1);
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	2620      	movs	r6, #32
 8001dae:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8001db2:	4c93      	ldr	r4, [pc, #588]	; (8002000 <test_008_001_execute.lto_priv.141+0x260>)
 8001db4:	4993      	ldr	r1, [pc, #588]	; (8002004 <test_008_001_execute.lto_priv.141+0x264>)
 8001db6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001db8:	f1a0 0004 	sub.w	r0, r0, #4
 8001dbc:	fab0 f080 	clz	r0, r0
 8001dc0:	0940      	lsrs	r0, r0, #5
 8001dc2:	f7fe fc45 	bl	8000650 <_test_assert>
 8001dc6:	b128      	cbz	r0, 8001dd4 <test_008_001_execute.lto_priv.141+0x34>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f383 8811 	msr	BASEPRI, r3
}
 8001dce:	b003      	add	sp, #12
 8001dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8001dda:	2302      	movs	r3, #2
 8001ddc:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8001dde:	f004 f857 	bl	8005e90 <chMBReset.constprop.29>
 8001de2:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8001de6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001de8:	4987      	ldr	r1, [pc, #540]	; (8002008 <test_008_001_execute.lto_priv.141+0x268>)
 8001dea:	f1a0 0004 	sub.w	r0, r0, #4
 8001dee:	fab0 f080 	clz	r0, r0
 8001df2:	0940      	lsrs	r0, r0, #5
 8001df4:	f7fe fc2c 	bl	8000650 <_test_assert>
 8001df8:	4680      	mov	r8, r0
 8001dfa:	b120      	cbz	r0, 8001e06 <test_008_001_execute.lto_priv.141+0x66>
 8001dfc:	f385 8811 	msr	BASEPRI, r5
}
 8001e00:	b003      	add	sp, #12
 8001e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e06:	f380 8811 	msr	BASEPRI, r0
 8001e0a:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8001e0e:	69a0      	ldr	r0, [r4, #24]
 8001e10:	497e      	ldr	r1, [pc, #504]	; (800200c <test_008_001_execute.lto_priv.141+0x26c>)
 8001e12:	fab0 f080 	clz	r0, r0
 8001e16:	0940      	lsrs	r0, r0, #5
 8001e18:	f7fe fc1a 	bl	8000650 <_test_assert>
 8001e1c:	4605      	mov	r5, r0
 8001e1e:	b120      	cbz	r0, 8001e2a <test_008_001_execute.lto_priv.141+0x8a>
 8001e20:	f388 8811 	msr	BASEPRI, r8
}
 8001e24:	b003      	add	sp, #12
 8001e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e2a:	f380 8811 	msr	BASEPRI, r0
 8001e2e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8001e32:	6820      	ldr	r0, [r4, #0]
 8001e34:	68a3      	ldr	r3, [r4, #8]
 8001e36:	4976      	ldr	r1, [pc, #472]	; (8002010 <test_008_001_execute.lto_priv.141+0x270>)
 8001e38:	1ac0      	subs	r0, r0, r3
 8001e3a:	fab0 f080 	clz	r0, r0
 8001e3e:	0940      	lsrs	r0, r0, #5
 8001e40:	f7fe fc06 	bl	8000650 <_test_assert>
 8001e44:	4680      	mov	r8, r0
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d1d8      	bne.n	8001dfc <test_008_001_execute.lto_priv.141+0x5c>
 8001e4a:	f380 8811 	msr	BASEPRI, r0
 8001e4e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8001e52:	6820      	ldr	r0, [r4, #0]
 8001e54:	68e3      	ldr	r3, [r4, #12]
 8001e56:	496f      	ldr	r1, [pc, #444]	; (8002014 <test_008_001_execute.lto_priv.141+0x274>)
 8001e58:	1ac0      	subs	r0, r0, r3
 8001e5a:	fab0 f080 	clz	r0, r0
 8001e5e:	0940      	lsrs	r0, r0, #5
 8001e60:	f7fe fbf6 	bl	8000650 <_test_assert>
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d1db      	bne.n	8001e20 <test_008_001_execute.lto_priv.141+0x80>
 8001e68:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8001e6c:	2303      	movs	r3, #3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001e6e:	4e6a      	ldr	r6, [pc, #424]	; (8002018 <test_008_001_execute.lto_priv.141+0x278>)
  test_set_step(3);
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	2542      	movs	r5, #66	; 0x42
      msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e78:	4628      	mov	r0, r5
 8001e7a:	f004 f819 	bl	8005eb0 <chMBPost.constprop.28>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001e7e:	fab0 f080 	clz	r0, r0
 8001e82:	4631      	mov	r1, r6
 8001e84:	0940      	lsrs	r0, r0, #5
 8001e86:	f7fe fbe3 	bl	8000650 <_test_assert>
 8001e8a:	3501      	adds	r5, #1
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d19e      	bne.n	8001dce <test_008_001_execute.lto_priv.141+0x2e>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8001e90:	2d45      	cmp	r5, #69	; 0x45
 8001e92:	d1ef      	bne.n	8001e74 <test_008_001_execute.lto_priv.141+0xd4>
    msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e98:	2041      	movs	r0, #65	; 0x41
 8001e9a:	f004 f831 	bl	8005f00 <chMBPostAhead.constprop.26>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001e9e:	fab0 f080 	clz	r0, r0
 8001ea2:	0940      	lsrs	r0, r0, #5
 8001ea4:	495c      	ldr	r1, [pc, #368]	; (8002018 <test_008_001_execute.lto_priv.141+0x278>)
 8001ea6:	f7fe fbd3 	bl	8000650 <_test_assert>
 8001eaa:	4605      	mov	r5, r0
 8001eac:	2800      	cmp	r0, #0
 8001eae:	d18e      	bne.n	8001dce <test_008_001_execute.lto_priv.141+0x2e>
  test_set_step(4);
 8001eb0:	2604      	movs	r6, #4
 8001eb2:	603e      	str	r6, [r7, #0]
 8001eb4:	f04f 0820 	mov.w	r8, #32
 8001eb8:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8001ebc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ebe:	4957      	ldr	r1, [pc, #348]	; (800201c <test_008_001_execute.lto_priv.141+0x27c>)
 8001ec0:	fab0 f080 	clz	r0, r0
 8001ec4:	0940      	lsrs	r0, r0, #5
 8001ec6:	f7fe fbc3 	bl	8000650 <_test_assert>
 8001eca:	4681      	mov	r9, r0
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	d195      	bne.n	8001dfc <test_008_001_execute.lto_priv.141+0x5c>
 8001ed0:	f380 8811 	msr	BASEPRI, r0
 8001ed4:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8001ed8:	69a0      	ldr	r0, [r4, #24]
 8001eda:	4951      	ldr	r1, [pc, #324]	; (8002020 <test_008_001_execute.lto_priv.141+0x280>)
 8001edc:	f1a0 0004 	sub.w	r0, r0, #4
 8001ee0:	fab0 f080 	clz	r0, r0
 8001ee4:	0940      	lsrs	r0, r0, #5
 8001ee6:	f7fe fbb3 	bl	8000650 <_test_assert>
 8001eea:	4605      	mov	r5, r0
 8001eec:	b110      	cbz	r0, 8001ef4 <test_008_001_execute.lto_priv.141+0x154>
 8001eee:	f389 8811 	msr	BASEPRI, r9
 8001ef2:	e76c      	b.n	8001dce <test_008_001_execute.lto_priv.141+0x2e>
 8001ef4:	f380 8811 	msr	BASEPRI, r0
 8001ef8:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8001efc:	68e0      	ldr	r0, [r4, #12]
 8001efe:	68a3      	ldr	r3, [r4, #8]
 8001f00:	4948      	ldr	r1, [pc, #288]	; (8002024 <test_008_001_execute.lto_priv.141+0x284>)
 8001f02:	eba0 0e03 	sub.w	lr, r0, r3
 8001f06:	f1de 0000 	rsbs	r0, lr, #0
 8001f0a:	eb40 000e 	adc.w	r0, r0, lr
 8001f0e:	f7fe fb9f 	bl	8000650 <_test_assert>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	f47f af72 	bne.w	8001dfc <test_008_001_execute.lto_priv.141+0x5c>
 8001f18:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 8001f1c:	2305      	movs	r3, #5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001f1e:	4d3e      	ldr	r5, [pc, #248]	; (8002018 <test_008_001_execute.lto_priv.141+0x278>)
  test_set_step(5);
 8001f20:	603b      	str	r3, [r7, #0]
      msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8001f22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f26:	a801      	add	r0, sp, #4
 8001f28:	f004 f81a 	bl	8005f60 <chMBFetch.constprop.24>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001f2c:	fab0 f080 	clz	r0, r0
 8001f30:	4629      	mov	r1, r5
 8001f32:	0940      	lsrs	r0, r0, #5
 8001f34:	f7fe fb8c 	bl	8000650 <_test_assert>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	f47f af48 	bne.w	8001dce <test_008_001_execute.lto_priv.141+0x2e>
      test_emit_token(msg2);
 8001f3e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001f42:	f7fe fadd 	bl	8000500 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8001f46:	3e01      	subs	r6, #1
 8001f48:	d1eb      	bne.n	8001f22 <test_008_001_execute.lto_priv.141+0x182>
    test_assert_sequence("ABCD", "wrong get sequence");
 8001f4a:	4937      	ldr	r1, [pc, #220]	; (8002028 <test_008_001_execute.lto_priv.141+0x288>)
 8001f4c:	4837      	ldr	r0, [pc, #220]	; (800202c <test_008_001_execute.lto_priv.141+0x28c>)
 8001f4e:	f7fe fb57 	bl	8000600 <_test_assert_sequence>
 8001f52:	2800      	cmp	r0, #0
 8001f54:	f47f af3b 	bne.w	8001dce <test_008_001_execute.lto_priv.141+0x2e>
  test_set_step(6);
 8001f58:	2306      	movs	r3, #6
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8001f5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f5e:	2046      	movs	r0, #70	; 0x46
  test_set_step(6);
 8001f60:	603b      	str	r3, [r7, #0]
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8001f62:	f003 ffa5 	bl	8005eb0 <chMBPost.constprop.28>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001f66:	fab0 f080 	clz	r0, r0
 8001f6a:	0940      	lsrs	r0, r0, #5
 8001f6c:	492a      	ldr	r1, [pc, #168]	; (8002018 <test_008_001_execute.lto_priv.141+0x278>)
 8001f6e:	f7fe fb6f 	bl	8000650 <_test_assert>
 8001f72:	2800      	cmp	r0, #0
 8001f74:	f47f af2b 	bne.w	8001dce <test_008_001_execute.lto_priv.141+0x2e>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f7c:	a801      	add	r0, sp, #4
 8001f7e:	f003 ffef 	bl	8005f60 <chMBFetch.constprop.24>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8001f82:	fab0 f080 	clz	r0, r0
 8001f86:	0940      	lsrs	r0, r0, #5
 8001f88:	4923      	ldr	r1, [pc, #140]	; (8002018 <test_008_001_execute.lto_priv.141+0x278>)
 8001f8a:	f7fe fb61 	bl	8000650 <_test_assert>
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	f47f af1d 	bne.w	8001dce <test_008_001_execute.lto_priv.141+0x2e>
  test_set_step(7);
 8001f94:	2307      	movs	r3, #7
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	2520      	movs	r5, #32
 8001f9a:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8001f9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001fa0:	4919      	ldr	r1, [pc, #100]	; (8002008 <test_008_001_execute.lto_priv.141+0x268>)
 8001fa2:	1f07      	subs	r7, r0, #4
 8001fa4:	4278      	negs	r0, r7
 8001fa6:	4178      	adcs	r0, r7
 8001fa8:	f7fe fb52 	bl	8000650 <_test_assert>
 8001fac:	b110      	cbz	r0, 8001fb4 <test_008_001_execute.lto_priv.141+0x214>
 8001fae:	f386 8811 	msr	BASEPRI, r6
 8001fb2:	e70c      	b.n	8001dce <test_008_001_execute.lto_priv.141+0x2e>
 8001fb4:	f386 8811 	msr	BASEPRI, r6
 8001fb8:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8001fbc:	69a0      	ldr	r0, [r4, #24]
 8001fbe:	4913      	ldr	r1, [pc, #76]	; (800200c <test_008_001_execute.lto_priv.141+0x26c>)
 8001fc0:	fab0 f080 	clz	r0, r0
 8001fc4:	0940      	lsrs	r0, r0, #5
 8001fc6:	f7fe fb43 	bl	8000650 <_test_assert>
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d1ef      	bne.n	8001fae <test_008_001_execute.lto_priv.141+0x20e>
 8001fce:	f386 8811 	msr	BASEPRI, r6
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8001fd2:	6820      	ldr	r0, [r4, #0]
 8001fd4:	68a3      	ldr	r3, [r4, #8]
 8001fd6:	490e      	ldr	r1, [pc, #56]	; (8002010 <test_008_001_execute.lto_priv.141+0x270>)
 8001fd8:	1ac2      	subs	r2, r0, r3
 8001fda:	4250      	negs	r0, r2
 8001fdc:	4150      	adcs	r0, r2
 8001fde:	f7fe fb37 	bl	8000650 <_test_assert>
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	f47f aef3 	bne.w	8001dce <test_008_001_execute.lto_priv.141+0x2e>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8001fe8:	6820      	ldr	r0, [r4, #0]
 8001fea:	68e3      	ldr	r3, [r4, #12]
 8001fec:	4909      	ldr	r1, [pc, #36]	; (8002014 <test_008_001_execute.lto_priv.141+0x274>)
 8001fee:	1ac3      	subs	r3, r0, r3
 8001ff0:	4258      	negs	r0, r3
 8001ff2:	4158      	adcs	r0, r3
 8001ff4:	f7fe fb2c 	bl	8000650 <_test_assert>
 8001ff8:	e6e9      	b.n	8001dce <test_008_001_execute.lto_priv.141+0x2e>
 8001ffa:	bf00      	nop
 8001ffc:	2000106c 	.word	0x2000106c
 8002000:	20000854 	.word	0x20000854
 8002004:	080061b8 	.word	0x080061b8
 8002008:	080061c4 	.word	0x080061c4
 800200c:	080061d0 	.word	0x080061d0
 8002010:	080061dc 	.word	0x080061dc
 8002014:	08006200 	.word	0x08006200
 8002018:	08006270 	.word	0x08006270
 800201c:	08006224 	.word	0x08006224
 8002020:	08006230 	.word	0x08006230
 8002024:	0800623c 	.word	0x0800623c
 8002028:	08006254 	.word	0x08006254
 800202c:	08006268 	.word	0x08006268

08002030 <test_007_007_setup.lto_priv.137>:
 *   has been emptied.
 * - [7.7.4] Unregistering from the Event Sources.
 * .
 */

static void test_007_007_setup(void) {
 8002030:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8002032:	f003 fdd5 	bl	8005be0 <chEvtGetAndClearEvents.constprop.47>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8002036:	4a02      	ldr	r2, [pc, #8]	; (8002040 <test_007_007_setup.lto_priv.137+0x10>)
 8002038:	4b02      	ldr	r3, [pc, #8]	; (8002044 <test_007_007_setup.lto_priv.137+0x14>)
 800203a:	6012      	str	r2, [r2, #0]
 800203c:	601b      	str	r3, [r3, #0]
 800203e:	bd08      	pop	{r3, pc}
 8002040:	20000800 	.word	0x20000800
 8002044:	20000804 	.word	0x20000804
	...

08002050 <test_007_006_setup.lto_priv.135>:
  chEvtGetAndClearEvents(ALL_EVENTS);
 8002050:	f003 bdc6 	b.w	8005be0 <chEvtGetAndClearEvents.constprop.47>
	...

08002060 <test_007_005_setup.lto_priv.133>:
 8002060:	f7ff bff6 	b.w	8002050 <test_007_006_setup.lto_priv.135>
	...

08002070 <test_007_007_execute.lto_priv.138>:
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}

static void test_007_007_execute(void) {
 8002070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [7.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8002074:	4d3c      	ldr	r5, [pc, #240]	; (8002168 <test_007_007_execute.lto_priv.138+0xf8>)
 8002076:	2301      	movs	r3, #1
static void test_007_007_execute(void) {
 8002078:	b08b      	sub	sp, #44	; 0x2c
  test_set_step(1);
 800207a:	602b      	str	r3, [r5, #0]
 800207c:	2220      	movs	r2, #32
 800207e:	f382 8811 	msr	BASEPRI, r2
  elp->next     = esp->next;
 8002082:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8002188 <test_007_007_execute.lto_priv.138+0x118>
  elp->listener = currp;
 8002086:	4f39      	ldr	r7, [pc, #228]	; (800216c <test_007_007_execute.lto_priv.138+0xfc>)
  elp->next     = esp->next;
 8002088:	f8d8 0000 	ldr.w	r0, [r8]
  elp->listener = currp;
 800208c:	69b9      	ldr	r1, [r7, #24]
  elp->events   = events;
 800208e:	9307      	str	r3, [sp, #28]
  elp->next     = esp->next;
 8002090:	ae0a      	add	r6, sp, #40	; 0x28
  elp->flags    = (eventflags_t)0;
 8002092:	2300      	movs	r3, #0
  elp->next     = esp->next;
 8002094:	f846 0d14 	str.w	r0, [r6, #-20]!
  elp->wflags   = wflags;
 8002098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  elp->listener = currp;
 800209c:	9106      	str	r1, [sp, #24]
  esp->next     = elp;
 800209e:	f8c8 6000 	str.w	r6, [r8]
  elp->flags    = (eventflags_t)0;
 80020a2:	9308      	str	r3, [sp, #32]
  elp->wflags   = wflags;
 80020a4:	9009      	str	r0, [sp, #36]	; 0x24
 80020a6:	f383 8811 	msr	BASEPRI, r3
 80020aa:	f382 8811 	msr	BASEPRI, r2
  elp->next     = esp->next;
 80020ae:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800218c <test_007_007_execute.lto_priv.138+0x11c>
  elp->listener = currp;
 80020b2:	69ba      	ldr	r2, [r7, #24]
  elp->next     = esp->next;
 80020b4:	f8d9 1000 	ldr.w	r1, [r9]
  elp->flags    = (eventflags_t)0;
 80020b8:	9303      	str	r3, [sp, #12]
  elp->next     = esp->next;
 80020ba:	ac0a      	add	r4, sp, #40	; 0x28
  elp->events   = events;
 80020bc:	f04f 0a04 	mov.w	sl, #4
  elp->next     = esp->next;
 80020c0:	f844 1d28 	str.w	r1, [r4, #-40]!
  elp->wflags   = wflags;
 80020c4:	9004      	str	r0, [sp, #16]
  elp->listener = currp;
 80020c6:	9201      	str	r2, [sp, #4]
  esp->next     = elp;
 80020c8:	f8c9 4000 	str.w	r4, [r9]
  elp->events   = events;
 80020cc:	f8cd a008 	str.w	sl, [sp, #8]
 80020d0:	f383 8811 	msr	BASEPRI, r3
  }

  /* [7.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 80020d4:	2302      	movs	r3, #2
 80020d6:	602b      	str	r3, [r5, #0]
  {
    target_time = test_wait_tick() + MS2ST(50);
 80020d8:	f001 fe72 	bl	8003dc0 <test_wait_tick>
  return chThdGetSelfX()->prio;
 80020dc:	69ba      	ldr	r2, [r7, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <test_007_007_execute.lto_priv.138+0x100>)
 80020e0:	6891      	ldr	r1, [r2, #8]
 80020e2:	4a24      	ldr	r2, [pc, #144]	; (8002174 <test_007_007_execute.lto_priv.138+0x104>)
    target_time = test_wait_tick() + MS2ST(50);
 80020e4:	4683      	mov	fp, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80020e6:	3901      	subs	r1, #1
 80020e8:	4823      	ldr	r0, [pc, #140]	; (8002178 <test_007_007_execute.lto_priv.138+0x108>)
 80020ea:	f003 fc79 	bl	80059e0 <chThdCreateStatic.constprop.65>
 80020ee:	4a23      	ldr	r2, [pc, #140]	; (800217c <test_007_007_execute.lto_priv.138+0x10c>)
  }

  /* [7.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 80020f0:	2303      	movs	r3, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80020f2:	6010      	str	r0, [r2, #0]
  test_set_step(3);
 80020f4:	602b      	str	r3, [r5, #0]
  {
    m = chEvtWaitAll(5);
 80020f6:	f003 fdbb 	bl	8005c70 <chEvtWaitAll.constprop.41>
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 80020fa:	f50b 7102 	add.w	r1, fp, #520	; 0x208
 80020fe:	f50b 70fa 	add.w	r0, fp, #500	; 0x1f4
 8002102:	f003 ffc5 	bl	8006090 <_test_assert_time_window.constprop.2>
 8002106:	b110      	cbz	r0, 800210e <test_007_007_execute.lto_priv.138+0x9e>
    chEvtUnregister(&es1, &el1);
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
}
 8002108:	b00b      	add	sp, #44	; 0x2c
 800210a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800210e:	f003 fd67 	bl	8005be0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 8002112:	fab0 f080 	clz	r0, r0
 8002116:	0940      	lsrs	r0, r0, #5
 8002118:	4919      	ldr	r1, [pc, #100]	; (8002180 <test_007_007_execute.lto_priv.138+0x110>)
 800211a:	f7fe fa99 	bl	8000650 <_test_assert>
 800211e:	2800      	cmp	r0, #0
 8002120:	d1f2      	bne.n	8002108 <test_007_007_execute.lto_priv.138+0x98>
    test_wait_threads();
 8002122:	f7ff f81d 	bl	8001160 <test_wait_threads>
    chEvtUnregister(&es1, &el1);
 8002126:	4631      	mov	r1, r6
 8002128:	4640      	mov	r0, r8
  test_set_step(4);
 800212a:	f8c5 a000 	str.w	sl, [r5]
    chEvtUnregister(&es1, &el1);
 800212e:	f7fe fb5f 	bl	80007f0 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 8002132:	4621      	mov	r1, r4
 8002134:	4648      	mov	r0, r9
 8002136:	f7fe fb5b 	bl	80007f0 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 800213a:	f8d8 0000 	ldr.w	r0, [r8]
 800213e:	4911      	ldr	r1, [pc, #68]	; (8002184 <test_007_007_execute.lto_priv.138+0x114>)
 8002140:	eba0 0008 	sub.w	r0, r0, r8
 8002144:	fab0 f080 	clz	r0, r0
 8002148:	0940      	lsrs	r0, r0, #5
 800214a:	f7fe fa81 	bl	8000650 <_test_assert>
 800214e:	2800      	cmp	r0, #0
 8002150:	d1da      	bne.n	8002108 <test_007_007_execute.lto_priv.138+0x98>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 8002152:	f8d9 0000 	ldr.w	r0, [r9]
 8002156:	490b      	ldr	r1, [pc, #44]	; (8002184 <test_007_007_execute.lto_priv.138+0x114>)
 8002158:	eba0 0009 	sub.w	r0, r0, r9
 800215c:	fab0 f080 	clz	r0, r0
 8002160:	0940      	lsrs	r0, r0, #5
 8002162:	f7fe fa75 	bl	8000650 <_test_assert>
 8002166:	e7cf      	b.n	8002108 <test_007_007_execute.lto_priv.138+0x98>
 8002168:	2000106c 	.word	0x2000106c
 800216c:	20001238 	.word	0x20001238
 8002170:	08006198 	.word	0x08006198
 8002174:	080027f1 	.word	0x080027f1
 8002178:	20000a00 	.word	0x20000a00
 800217c:	20001084 	.word	0x20001084
 8002180:	0800619c 	.word	0x0800619c
 8002184:	080061a8 	.word	0x080061a8
 8002188:	20000800 	.word	0x20000800
 800218c:	20000804 	.word	0x20000804

08002190 <test_007_006_execute.lto_priv.136>:
static void test_007_006_execute(void) {
 8002190:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8002192:	4d57      	ldr	r5, [pc, #348]	; (80022f0 <test_007_006_execute.lto_priv.136+0x160>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8002194:	4c57      	ldr	r4, [pc, #348]	; (80022f4 <test_007_006_execute.lto_priv.136+0x164>)
 8002196:	2001      	movs	r0, #1
 8002198:	6028      	str	r0, [r5, #0]
 800219a:	69a2      	ldr	r2, [r4, #24]
 800219c:	2320      	movs	r3, #32
 800219e:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 80021a2:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80021a4:	b933      	cbnz	r3, 80021b4 <test_007_006_execute.lto_priv.136+0x24>
 80021a6:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 80021aa:	4953      	ldr	r1, [pc, #332]	; (80022f8 <test_007_006_execute.lto_priv.136+0x168>)
 80021ac:	f7fe fa50 	bl	8000650 <_test_assert>
 80021b0:	b180      	cbz	r0, 80021d4 <test_007_006_execute.lto_priv.136+0x44>
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 80021b4:	4258      	negs	r0, r3
 80021b6:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 80021b8:	ea23 0300 	bic.w	r3, r3, r0
 80021bc:	6353      	str	r3, [r2, #52]	; 0x34
 80021be:	2300      	movs	r3, #0
 80021c0:	f383 8811 	msr	BASEPRI, r3
 80021c4:	fab0 f080 	clz	r0, r0
 80021c8:	0940      	lsrs	r0, r0, #5
 80021ca:	494b      	ldr	r1, [pc, #300]	; (80022f8 <test_007_006_execute.lto_priv.136+0x168>)
 80021cc:	f7fe fa40 	bl	8000650 <_test_assert>
 80021d0:	2800      	cmp	r0, #0
 80021d2:	d1ee      	bne.n	80021b2 <test_007_006_execute.lto_priv.136+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80021d4:	69a3      	ldr	r3, [r4, #24]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 80021dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021de:	2a00      	cmp	r2, #0
 80021e0:	d072      	beq.n	80022c8 <test_007_006_execute.lto_priv.136+0x138>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 80021e2:	6358      	str	r0, [r3, #52]	; 0x34
 80021e4:	f380 8811 	msr	BASEPRI, r0
    test_assert(m == 0, "spurious event");
 80021e8:	4943      	ldr	r1, [pc, #268]	; (80022f8 <test_007_006_execute.lto_priv.136+0x168>)
 80021ea:	f7fe fa31 	bl	8000650 <_test_assert>
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d1df      	bne.n	80021b2 <test_007_006_execute.lto_priv.136+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80021f2:	69a3      	ldr	r3, [r4, #24]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 80021fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fc:	3201      	adds	r2, #1
 80021fe:	d067      	beq.n	80022d0 <test_007_006_execute.lto_priv.136+0x140>
 8002200:	f380 8811 	msr	BASEPRI, r0
 8002204:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8002206:	493c      	ldr	r1, [pc, #240]	; (80022f8 <test_007_006_execute.lto_priv.136+0x168>)
 8002208:	f7fe fa22 	bl	8000650 <_test_assert>
 800220c:	2800      	cmp	r0, #0
 800220e:	d1d0      	bne.n	80021b2 <test_007_006_execute.lto_priv.136+0x22>
  test_set_step(2);
 8002210:	2302      	movs	r3, #2
 8002212:	602b      	str	r3, [r5, #0]
  thread_t *ctp = currp;
 8002214:	69a6      	ldr	r6, [r4, #24]
 8002216:	2320      	movs	r3, #32
 8002218:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800221c:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800221e:	b955      	cbnz	r5, 8002236 <test_007_006_execute.lto_priv.136+0xa6>
    ctp->u.ewmask = events;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002224:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002226:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800222a:	200a      	movs	r0, #10
 800222c:	f7ff f880 	bl	8001330 <chSchGoSleepTimeoutS>
 8002230:	2800      	cmp	r0, #0
 8002232:	db51      	blt.n	80022d8 <test_007_006_execute.lto_priv.136+0x148>
    m = ctp->epending & events;
 8002234:	6b75      	ldr	r5, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 8002236:	4268      	negs	r0, r5
 8002238:	4028      	ands	r0, r5
  ctp->epending &= ~m;
 800223a:	ea25 0500 	bic.w	r5, r5, r0
 800223e:	6375      	str	r5, [r6, #52]	; 0x34
 8002240:	2300      	movs	r3, #0
 8002242:	f383 8811 	msr	BASEPRI, r3
 8002246:	fab0 f080 	clz	r0, r0
 800224a:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 800224c:	492a      	ldr	r1, [pc, #168]	; (80022f8 <test_007_006_execute.lto_priv.136+0x168>)
 800224e:	f7fe f9ff 	bl	8000650 <_test_assert>
 8002252:	2800      	cmp	r0, #0
 8002254:	d1ad      	bne.n	80021b2 <test_007_006_execute.lto_priv.136+0x22>
  thread_t *ctp = currp;
 8002256:	69a6      	ldr	r6, [r4, #24]
 8002258:	2320      	movs	r3, #32
 800225a:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800225e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8002260:	b955      	cbnz	r5, 8002278 <test_007_006_execute.lto_priv.136+0xe8>
    ctp->u.ewmask = events;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002266:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8002268:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800226c:	200a      	movs	r0, #10
 800226e:	f7ff f85f 	bl	8001330 <chSchGoSleepTimeoutS>
 8002272:	2800      	cmp	r0, #0
 8002274:	db34      	blt.n	80022e0 <test_007_006_execute.lto_priv.136+0x150>
    m = ctp->epending & events;
 8002276:	6b75      	ldr	r5, [r6, #52]	; 0x34
  ctp->epending &= ~m;
 8002278:	2300      	movs	r3, #0
 800227a:	6373      	str	r3, [r6, #52]	; 0x34
 800227c:	f383 8811 	msr	BASEPRI, r3
 8002280:	fab5 f085 	clz	r0, r5
 8002284:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 8002286:	491c      	ldr	r1, [pc, #112]	; (80022f8 <test_007_006_execute.lto_priv.136+0x168>)
 8002288:	f7fe f9e2 	bl	8000650 <_test_assert>
 800228c:	4605      	mov	r5, r0
 800228e:	2800      	cmp	r0, #0
 8002290:	d18f      	bne.n	80021b2 <test_007_006_execute.lto_priv.136+0x22>
  thread_t *ctp = currp;
 8002292:	69a4      	ldr	r4, [r4, #24]
 8002294:	2320      	movs	r3, #32
 8002296:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 800229a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800229c:	3301      	adds	r3, #1
 800229e:	d009      	beq.n	80022b4 <test_007_006_execute.lto_priv.136+0x124>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a4:	6263      	str	r3, [r4, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 80022a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80022aa:	200b      	movs	r0, #11
 80022ac:	f7ff f840 	bl	8001330 <chSchGoSleepTimeoutS>
 80022b0:	2800      	cmp	r0, #0
 80022b2:	db19      	blt.n	80022e8 <test_007_006_execute.lto_priv.136+0x158>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 80022b4:	2300      	movs	r3, #0
 80022b6:	6363      	str	r3, [r4, #52]	; 0x34
 80022b8:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 80022bc:	4628      	mov	r0, r5
 80022be:	490e      	ldr	r1, [pc, #56]	; (80022f8 <test_007_006_execute.lto_priv.136+0x168>)
}
 80022c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(m == 0, "spurious event");
 80022c4:	f7fe b9c4 	b.w	8000650 <_test_assert>
 80022c8:	f382 8811 	msr	BASEPRI, r2
 80022cc:	2001      	movs	r0, #1
 80022ce:	e78b      	b.n	80021e8 <test_007_006_execute.lto_priv.136+0x58>
 80022d0:	6358      	str	r0, [r3, #52]	; 0x34
 80022d2:	f380 8811 	msr	BASEPRI, r0
 80022d6:	e796      	b.n	8002206 <test_007_006_execute.lto_priv.136+0x76>
 80022d8:	f385 8811 	msr	BASEPRI, r5
 80022dc:	2001      	movs	r0, #1
 80022de:	e7b5      	b.n	800224c <test_007_006_execute.lto_priv.136+0xbc>
 80022e0:	f385 8811 	msr	BASEPRI, r5
 80022e4:	2001      	movs	r0, #1
 80022e6:	e7ce      	b.n	8002286 <test_007_006_execute.lto_priv.136+0xf6>
 80022e8:	f385 8811 	msr	BASEPRI, r5
 80022ec:	2501      	movs	r5, #1
 80022ee:	e7e5      	b.n	80022bc <test_007_006_execute.lto_priv.136+0x12c>
 80022f0:	2000106c 	.word	0x2000106c
 80022f4:	20001238 	.word	0x20001238
 80022f8:	08006188 	.word	0x08006188
 80022fc:	00000000 	.word	0x00000000

08002300 <test_007_005_execute.lto_priv.134>:
static void test_007_005_execute(void) {
 8002300:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8002302:	4c2b      	ldr	r4, [pc, #172]	; (80023b0 <test_007_005_execute.lto_priv.134+0xb0>)
 8002304:	2301      	movs	r3, #1
    chEvtAddEvents(5);
 8002306:	2005      	movs	r0, #5
  test_set_step(1);
 8002308:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(5);
 800230a:	f7fe fa61 	bl	80007d0 <chEvtAddEvents>
  test_set_step(2);
 800230e:	2302      	movs	r3, #2
 8002310:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 8002312:	f003 fcad 	bl	8005c70 <chEvtWaitAll.constprop.41>
    test_assert(m == 5, "unexpected pending bit");
 8002316:	f1a0 0005 	sub.w	r0, r0, #5
 800231a:	fab0 f080 	clz	r0, r0
 800231e:	4925      	ldr	r1, [pc, #148]	; (80023b4 <test_007_005_execute.lto_priv.134+0xb4>)
 8002320:	0940      	lsrs	r0, r0, #5
 8002322:	f7fe f995 	bl	8000650 <_test_assert>
 8002326:	b100      	cbz	r0, 800232a <test_007_005_execute.lto_priv.134+0x2a>
 8002328:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800232a:	f003 fc59 	bl	8005be0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 800232e:	fab0 f080 	clz	r0, r0
 8002332:	0940      	lsrs	r0, r0, #5
 8002334:	4920      	ldr	r1, [pc, #128]	; (80023b8 <test_007_005_execute.lto_priv.134+0xb8>)
 8002336:	f7fe f98b 	bl	8000650 <_test_assert>
 800233a:	2800      	cmp	r0, #0
 800233c:	d1f4      	bne.n	8002328 <test_007_005_execute.lto_priv.134+0x28>
  test_set_step(3);
 800233e:	2303      	movs	r3, #3
    chEvtAddEvents(4);
 8002340:	2004      	movs	r0, #4
  test_set_step(3);
 8002342:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(4);
 8002344:	f7fe fa44 	bl	80007d0 <chEvtAddEvents>
  test_set_step(4);
 8002348:	2304      	movs	r3, #4
 800234a:	6023      	str	r3, [r4, #0]
    target_time = test_wait_tick() + MS2ST(50);
 800234c:	f001 fd38 	bl	8003dc0 <test_wait_tick>
  return ch.rlist.current;
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <test_007_005_execute.lto_priv.134+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002352:	4a1b      	ldr	r2, [pc, #108]	; (80023c0 <test_007_005_execute.lto_priv.134+0xc0>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	6899      	ldr	r1, [r3, #8]
    target_time = test_wait_tick() + MS2ST(50);
 8002358:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800235a:	3901      	subs	r1, #1
 800235c:	4819      	ldr	r0, [pc, #100]	; (80023c4 <test_007_005_execute.lto_priv.134+0xc4>)
 800235e:	f003 fb3f 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8002362:	4a19      	ldr	r2, [pc, #100]	; (80023c8 <test_007_005_execute.lto_priv.134+0xc8>)
  test_set_step(5);
 8002364:	2305      	movs	r3, #5
 8002366:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002368:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAll(5);
 800236a:	f003 fc81 	bl	8005c70 <chEvtWaitAll.constprop.41>
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 800236e:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAll(5);
 8002372:	4604      	mov	r4, r0
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002374:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8002378:	f003 fe8a 	bl	8006090 <_test_assert_time_window.constprop.2>
 800237c:	2800      	cmp	r0, #0
 800237e:	d1d3      	bne.n	8002328 <test_007_005_execute.lto_priv.134+0x28>
    test_assert(m == 5, "event flags error");
 8002380:	f1a4 0005 	sub.w	r0, r4, #5
 8002384:	fab0 f080 	clz	r0, r0
 8002388:	0940      	lsrs	r0, r0, #5
 800238a:	4910      	ldr	r1, [pc, #64]	; (80023cc <test_007_005_execute.lto_priv.134+0xcc>)
 800238c:	f7fe f960 	bl	8000650 <_test_assert>
 8002390:	2800      	cmp	r0, #0
 8002392:	d1c9      	bne.n	8002328 <test_007_005_execute.lto_priv.134+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8002394:	f003 fc24 	bl	8005be0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 8002398:	fab0 f080 	clz	r0, r0
 800239c:	0940      	lsrs	r0, r0, #5
 800239e:	4906      	ldr	r1, [pc, #24]	; (80023b8 <test_007_005_execute.lto_priv.134+0xb8>)
 80023a0:	f7fe f956 	bl	8000650 <_test_assert>
 80023a4:	2800      	cmp	r0, #0
 80023a6:	d1bf      	bne.n	8002328 <test_007_005_execute.lto_priv.134+0x28>
}
 80023a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 80023ac:	f7fe bed8 	b.w	8001160 <test_wait_threads>
 80023b0:	2000106c 	.word	0x2000106c
 80023b4:	0800615c 	.word	0x0800615c
 80023b8:	0800619c 	.word	0x0800619c
 80023bc:	20001238 	.word	0x20001238
 80023c0:	08002831 	.word	0x08002831
 80023c4:	20000a00 	.word	0x20000a00
 80023c8:	20001084 	.word	0x20001084
 80023cc:	08006174 	.word	0x08006174

080023d0 <test_007_004_execute.lto_priv.132>:
static void test_007_004_execute(void) {
 80023d0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 80023d2:	4c29      	ldr	r4, [pc, #164]	; (8002478 <test_007_004_execute.lto_priv.132+0xa8>)
 80023d4:	2301      	movs	r3, #1
    chEvtAddEvents(5);
 80023d6:	2005      	movs	r0, #5
  test_set_step(1);
 80023d8:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(5);
 80023da:	f7fe f9f9 	bl	80007d0 <chEvtAddEvents>
  test_set_step(2);
 80023de:	2302      	movs	r3, #2
 80023e0:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 80023e2:	f003 fc2d 	bl	8005c40 <chEvtWaitAny.constprop.42>
    test_assert(m == 5, "unexpected pending bit");
 80023e6:	f1a0 0005 	sub.w	r0, r0, #5
 80023ea:	fab0 f080 	clz	r0, r0
 80023ee:	4923      	ldr	r1, [pc, #140]	; (800247c <test_007_004_execute.lto_priv.132+0xac>)
 80023f0:	0940      	lsrs	r0, r0, #5
 80023f2:	f7fe f92d 	bl	8000650 <_test_assert>
 80023f6:	b100      	cbz	r0, 80023fa <test_007_004_execute.lto_priv.132+0x2a>
 80023f8:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80023fa:	f003 fbf1 	bl	8005be0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 80023fe:	fab0 f080 	clz	r0, r0
 8002402:	0940      	lsrs	r0, r0, #5
 8002404:	491e      	ldr	r1, [pc, #120]	; (8002480 <test_007_004_execute.lto_priv.132+0xb0>)
 8002406:	f7fe f923 	bl	8000650 <_test_assert>
 800240a:	2800      	cmp	r0, #0
 800240c:	d1f4      	bne.n	80023f8 <test_007_004_execute.lto_priv.132+0x28>
  test_set_step(3);
 800240e:	2303      	movs	r3, #3
 8002410:	6023      	str	r3, [r4, #0]
    target_time = test_wait_tick() + MS2ST(50);
 8002412:	f001 fcd5 	bl	8003dc0 <test_wait_tick>
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <test_007_004_execute.lto_priv.132+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002418:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <test_007_004_execute.lto_priv.132+0xb8>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	6899      	ldr	r1, [r3, #8]
    target_time = test_wait_tick() + MS2ST(50);
 800241e:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002420:	3901      	subs	r1, #1
 8002422:	481a      	ldr	r0, [pc, #104]	; (800248c <test_007_004_execute.lto_priv.132+0xbc>)
 8002424:	f003 fadc 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8002428:	4a19      	ldr	r2, [pc, #100]	; (8002490 <test_007_004_execute.lto_priv.132+0xc0>)
  test_set_step(4);
 800242a:	2304      	movs	r3, #4
 800242c:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800242e:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8002430:	f003 fc06 	bl	8005c40 <chEvtWaitAny.constprop.42>
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002434:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAny(ALL_EVENTS);
 8002438:	4604      	mov	r4, r0
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 800243a:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 800243e:	f003 fe27 	bl	8006090 <_test_assert_time_window.constprop.2>
 8002442:	2800      	cmp	r0, #0
 8002444:	d1d8      	bne.n	80023f8 <test_007_004_execute.lto_priv.132+0x28>
    test_assert(m == 1, "event flag error");
 8002446:	f1a4 0001 	sub.w	r0, r4, #1
 800244a:	fab0 f080 	clz	r0, r0
 800244e:	0940      	lsrs	r0, r0, #5
 8002450:	4910      	ldr	r1, [pc, #64]	; (8002494 <test_007_004_execute.lto_priv.132+0xc4>)
 8002452:	f7fe f8fd 	bl	8000650 <_test_assert>
 8002456:	2800      	cmp	r0, #0
 8002458:	d1ce      	bne.n	80023f8 <test_007_004_execute.lto_priv.132+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800245a:	f003 fbc1 	bl	8005be0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 800245e:	fab0 f080 	clz	r0, r0
 8002462:	0940      	lsrs	r0, r0, #5
 8002464:	4906      	ldr	r1, [pc, #24]	; (8002480 <test_007_004_execute.lto_priv.132+0xb0>)
 8002466:	f7fe f8f3 	bl	8000650 <_test_assert>
 800246a:	2800      	cmp	r0, #0
 800246c:	d1c4      	bne.n	80023f8 <test_007_004_execute.lto_priv.132+0x28>
}
 800246e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8002472:	f7fe be75 	b.w	8001160 <test_wait_threads>
 8002476:	bf00      	nop
 8002478:	2000106c 	.word	0x2000106c
 800247c:	0800615c 	.word	0x0800615c
 8002480:	0800619c 	.word	0x0800619c
 8002484:	20001238 	.word	0x20001238
 8002488:	08002831 	.word	0x08002831
 800248c:	20000a00 	.word	0x20000a00
 8002490:	20001084 	.word	0x20001084
 8002494:	08006148 	.word	0x08006148
	...

080024a0 <test_005_009_setup.lto_priv.123>:
  tqp->next = (thread_t *)tqp;
 80024a0:	4a06      	ldr	r2, [pc, #24]	; (80024bc <test_005_009_setup.lto_priv.123+0x1c>)
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <test_005_009_setup.lto_priv.123+0x20>)
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <test_005_009_setup.lto_priv.123+0x24>)
 80024a6:	6012      	str	r2, [r2, #0]
  mp->owner = NULL;
 80024a8:	2000      	movs	r0, #0
 80024aa:	6009      	str	r1, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 80024ac:	6049      	str	r1, [r1, #4]
 80024ae:	6052      	str	r2, [r2, #4]
 80024b0:	6090      	str	r0, [r2, #8]
 80024b2:	6098      	str	r0, [r3, #8]
  tqp->next = (thread_t *)tqp;
 80024b4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80024b6:	605b      	str	r3, [r3, #4]
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000844 	.word	0x20000844
 80024c0:	20000808 	.word	0x20000808
 80024c4:	20000824 	.word	0x20000824
	...

080024d0 <test_005_008_setup.lto_priv.121>:
  tqp->next = (thread_t *)tqp;
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <test_005_008_setup.lto_priv.121+0x14>)
 80024d2:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <test_005_008_setup.lto_priv.121+0x18>)
 80024d4:	601b      	str	r3, [r3, #0]
 80024d6:	2100      	movs	r1, #0
 80024d8:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
 80024da:	6052      	str	r2, [r2, #4]
 80024dc:	605b      	str	r3, [r3, #4]
 80024de:	6099      	str	r1, [r3, #8]
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000844 	.word	0x20000844
 80024e8:	20000824 	.word	0x20000824
 80024ec:	00000000 	.word	0x00000000

080024f0 <test_005_007_setup.lto_priv.119>:
 80024f0:	f7ff bfee 	b.w	80024d0 <test_005_008_setup.lto_priv.121>
	...

08002500 <test_005_005_setup.lto_priv.117>:
  tqp->next = (thread_t *)tqp;
 8002500:	4b02      	ldr	r3, [pc, #8]	; (800250c <test_005_005_setup.lto_priv.117+0xc>)
 8002502:	2200      	movs	r2, #0
 8002504:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8002506:	605b      	str	r3, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	4770      	bx	lr
 800250c:	20000844 	.word	0x20000844

08002510 <test_005_004_setup.lto_priv.114>:
  tqp->next = (thread_t *)tqp;
 8002510:	4a04      	ldr	r2, [pc, #16]	; (8002524 <test_005_004_setup.lto_priv.114+0x14>)
 8002512:	4b05      	ldr	r3, [pc, #20]	; (8002528 <test_005_004_setup.lto_priv.114+0x18>)
 8002514:	6012      	str	r2, [r2, #0]
 8002516:	2100      	movs	r1, #0
  tqp->prev = (thread_t *)tqp;
 8002518:	6052      	str	r2, [r2, #4]
 800251a:	6091      	str	r1, [r2, #8]
 800251c:	6099      	str	r1, [r3, #8]
  tqp->next = (thread_t *)tqp;
 800251e:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8002520:	605b      	str	r3, [r3, #4]
 8002522:	4770      	bx	lr
 8002524:	20000844 	.word	0x20000844
 8002528:	20000808 	.word	0x20000808
 800252c:	00000000 	.word	0x00000000

08002530 <test_005_001_setup.lto_priv.112>:
 8002530:	f7ff bfe6 	b.w	8002500 <test_005_005_setup.lto_priv.117>
	...

08002540 <test_007_004_setup.lto_priv.131>:
 8002540:	f7ff bd86 	b.w	8002050 <test_007_006_setup.lto_priv.135>
	...

08002550 <test_007_003_setup.lto_priv.129>:
 8002550:	f7ff bd7e 	b.w	8002050 <test_007_006_setup.lto_priv.135>
	...

08002560 <test_007_002_setup.lto_priv.127>:
 8002560:	f7ff bd76 	b.w	8002050 <test_007_006_setup.lto_priv.135>
	...

08002570 <test_007_003_execute.lto_priv.130>:
static void test_007_003_execute(void) {
 8002570:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8002572:	4c35      	ldr	r4, [pc, #212]	; (8002648 <test_007_003_execute.lto_priv.130+0xd8>)
 8002574:	2301      	movs	r3, #1
    chEvtAddEvents(7);
 8002576:	2007      	movs	r0, #7
  test_set_step(1);
 8002578:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(7);
 800257a:	f7fe f929 	bl	80007d0 <chEvtAddEvents>
  test_set_step(2);
 800257e:	2302      	movs	r3, #2
 8002580:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8002582:	f003 fb3d 	bl	8005c00 <chEvtWaitOne.constprop.43>
    test_assert(m == 1, "single event error");
 8002586:	f1a0 0001 	sub.w	r0, r0, #1
 800258a:	fab0 f080 	clz	r0, r0
 800258e:	492f      	ldr	r1, [pc, #188]	; (800264c <test_007_003_execute.lto_priv.130+0xdc>)
 8002590:	0940      	lsrs	r0, r0, #5
 8002592:	f7fe f85d 	bl	8000650 <_test_assert>
 8002596:	b100      	cbz	r0, 800259a <test_007_003_execute.lto_priv.130+0x2a>
 8002598:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 800259a:	f003 fb31 	bl	8005c00 <chEvtWaitOne.constprop.43>
    test_assert(m == 2, "single event error");
 800259e:	f1a0 0002 	sub.w	r0, r0, #2
 80025a2:	fab0 f080 	clz	r0, r0
 80025a6:	4929      	ldr	r1, [pc, #164]	; (800264c <test_007_003_execute.lto_priv.130+0xdc>)
 80025a8:	0940      	lsrs	r0, r0, #5
 80025aa:	f7fe f851 	bl	8000650 <_test_assert>
 80025ae:	2800      	cmp	r0, #0
 80025b0:	d1f2      	bne.n	8002598 <test_007_003_execute.lto_priv.130+0x28>
    m = chEvtWaitOne(ALL_EVENTS);
 80025b2:	f003 fb25 	bl	8005c00 <chEvtWaitOne.constprop.43>
    test_assert(m == 4, "single event error");
 80025b6:	f1a0 0004 	sub.w	r0, r0, #4
 80025ba:	fab0 f080 	clz	r0, r0
 80025be:	4923      	ldr	r1, [pc, #140]	; (800264c <test_007_003_execute.lto_priv.130+0xdc>)
 80025c0:	0940      	lsrs	r0, r0, #5
 80025c2:	f7fe f845 	bl	8000650 <_test_assert>
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d1e6      	bne.n	8002598 <test_007_003_execute.lto_priv.130+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80025ca:	f003 fb09 	bl	8005be0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 80025ce:	fab0 f080 	clz	r0, r0
 80025d2:	0940      	lsrs	r0, r0, #5
 80025d4:	491e      	ldr	r1, [pc, #120]	; (8002650 <test_007_003_execute.lto_priv.130+0xe0>)
 80025d6:	f7fe f83b 	bl	8000650 <_test_assert>
 80025da:	2800      	cmp	r0, #0
 80025dc:	d1dc      	bne.n	8002598 <test_007_003_execute.lto_priv.130+0x28>
  test_set_step(3);
 80025de:	2303      	movs	r3, #3
 80025e0:	6023      	str	r3, [r4, #0]
    target_time = test_wait_tick() + MS2ST(50);
 80025e2:	f001 fbed 	bl	8003dc0 <test_wait_tick>
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <test_007_003_execute.lto_priv.130+0xe4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80025e8:	4a1b      	ldr	r2, [pc, #108]	; (8002658 <test_007_003_execute.lto_priv.130+0xe8>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	6899      	ldr	r1, [r3, #8]
    target_time = test_wait_tick() + MS2ST(50);
 80025ee:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80025f0:	3901      	subs	r1, #1
 80025f2:	481a      	ldr	r0, [pc, #104]	; (800265c <test_007_003_execute.lto_priv.130+0xec>)
 80025f4:	f003 f9f4 	bl	80059e0 <chThdCreateStatic.constprop.65>
 80025f8:	4a19      	ldr	r2, [pc, #100]	; (8002660 <test_007_003_execute.lto_priv.130+0xf0>)
  test_set_step(4);
 80025fa:	2304      	movs	r3, #4
 80025fc:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80025fe:	6010      	str	r0, [r2, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8002600:	f003 fafe 	bl	8005c00 <chEvtWaitOne.constprop.43>
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8002604:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitOne(ALL_EVENTS);
 8002608:	4604      	mov	r4, r0
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 800260a:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 800260e:	f003 fd3f 	bl	8006090 <_test_assert_time_window.constprop.2>
 8002612:	2800      	cmp	r0, #0
 8002614:	d1c0      	bne.n	8002598 <test_007_003_execute.lto_priv.130+0x28>
    test_assert(m == 1, "event flag error");
 8002616:	f1a4 0001 	sub.w	r0, r4, #1
 800261a:	fab0 f080 	clz	r0, r0
 800261e:	0940      	lsrs	r0, r0, #5
 8002620:	4910      	ldr	r1, [pc, #64]	; (8002664 <test_007_003_execute.lto_priv.130+0xf4>)
 8002622:	f7fe f815 	bl	8000650 <_test_assert>
 8002626:	2800      	cmp	r0, #0
 8002628:	d1b6      	bne.n	8002598 <test_007_003_execute.lto_priv.130+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800262a:	f003 fad9 	bl	8005be0 <chEvtGetAndClearEvents.constprop.47>
    test_assert(m == 0, "stuck event");
 800262e:	fab0 f080 	clz	r0, r0
 8002632:	0940      	lsrs	r0, r0, #5
 8002634:	4906      	ldr	r1, [pc, #24]	; (8002650 <test_007_003_execute.lto_priv.130+0xe0>)
 8002636:	f7fe f80b 	bl	8000650 <_test_assert>
 800263a:	2800      	cmp	r0, #0
 800263c:	d1ac      	bne.n	8002598 <test_007_003_execute.lto_priv.130+0x28>
}
 800263e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8002642:	f7fe bd8d 	b.w	8001160 <test_wait_threads>
 8002646:	bf00      	nop
 8002648:	2000106c 	.word	0x2000106c
 800264c:	0800635c 	.word	0x0800635c
 8002650:	0800619c 	.word	0x0800619c
 8002654:	20001238 	.word	0x20001238
 8002658:	08002831 	.word	0x08002831
 800265c:	20000a00 	.word	0x20000a00
 8002660:	20001084 	.word	0x20001084
 8002664:	08006148 	.word	0x08006148
	...

08002670 <test_004_006_teardown.lto_priv.110>:
 *   must not change from "not taken".
 * .
 */

static void test_004_006_teardown(void) {
  test_wait_threads();
 8002670:	f7fe bd76 	b.w	8001160 <test_wait_threads>
	...

08002680 <test_005_004_teardown.lto_priv.115>:
 8002680:	f7fe bd6e 	b.w	8001160 <test_wait_threads>
	...

08002690 <test_007_002_execute.lto_priv.128>:
static void test_007_002_execute(void) {
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <test_007_002_execute.lto_priv.128+0x44>)
 8002694:	4f10      	ldr	r7, [pc, #64]	; (80026d8 <test_007_002_execute.lto_priv.128+0x48>)
 8002696:	2601      	movs	r6, #1
 8002698:	601e      	str	r6, [r3, #0]
 800269a:	2507      	movs	r5, #7
  eid = (eventid_t)0;
 800269c:	2400      	movs	r4, #0
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800269e:	fa25 f304 	lsr.w	r3, r5, r4
 80026a2:	07db      	lsls	r3, r3, #31
 80026a4:	d404      	bmi.n	80026b0 <test_007_002_execute.lto_priv.128+0x20>
    eid++;
 80026a6:	3401      	adds	r4, #1
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 80026a8:	fa25 f304 	lsr.w	r3, r5, r4
 80026ac:	07db      	lsls	r3, r3, #31
 80026ae:	d5fa      	bpl.n	80026a6 <test_007_002_execute.lto_priv.128+0x16>
      events &= ~EVENT_MASK(eid);
 80026b0:	fa06 f304 	lsl.w	r3, r6, r4
      handlers[eid](eid);
 80026b4:	4620      	mov	r0, r4
      events &= ~EVENT_MASK(eid);
 80026b6:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 80026ba:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 80026be:	4798      	blx	r3
    eid++;
 80026c0:	3401      	adds	r4, #1
  while (events != (eventmask_t)0) {
 80026c2:	2d00      	cmp	r5, #0
 80026c4:	d1eb      	bne.n	800269e <test_007_002_execute.lto_priv.128+0xe>
    test_assert_sequence("ABC", "invalid sequence");
 80026c6:	4905      	ldr	r1, [pc, #20]	; (80026dc <test_007_002_execute.lto_priv.128+0x4c>)
 80026c8:	4805      	ldr	r0, [pc, #20]	; (80026e0 <test_007_002_execute.lto_priv.128+0x50>)
}
 80026ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 80026ce:	f7fd bf97 	b.w	8000600 <_test_assert_sequence>
 80026d2:	bf00      	nop
 80026d4:	2000106c 	.word	0x2000106c
 80026d8:	08006288 	.word	0x08006288
 80026dc:	08006344 	.word	0x08006344
 80026e0:	08006358 	.word	0x08006358
	...

080026f0 <test_007_001_execute.lto_priv.126>:
static void test_007_001_execute(void) {
 80026f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026f4:	4c36      	ldr	r4, [pc, #216]	; (80027d0 <test_007_001_execute.lto_priv.126+0xe0>)
  test_set_step(2);
 80026f6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80027e0 <test_007_001_execute.lto_priv.126+0xf0>
 80026fa:	6024      	str	r4, [r4, #0]
 80026fc:	2102      	movs	r1, #2
static void test_007_001_execute(void) {
 80026fe:	b08a      	sub	sp, #40	; 0x28
  test_set_step(2);
 8002700:	f8c9 1000 	str.w	r1, [r9]
 8002704:	2620      	movs	r6, #32
 8002706:	f386 8811 	msr	BASEPRI, r6
  elp->listener = currp;
 800270a:	4832      	ldr	r0, [pc, #200]	; (80027d4 <test_007_001_execute.lto_priv.126+0xe4>)
  elp->next     = esp->next;
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	af0a      	add	r7, sp, #40	; 0x28
  elp->events   = events;
 8002710:	2201      	movs	r2, #1
  elp->next     = esp->next;
 8002712:	f847 3d14 	str.w	r3, [r7, #-20]!
  elp->listener = currp;
 8002716:	6983      	ldr	r3, [r0, #24]
 8002718:	9306      	str	r3, [sp, #24]
  elp->flags    = (eventflags_t)0;
 800271a:	2500      	movs	r5, #0
  elp->wflags   = wflags;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  elp->events   = events;
 8002720:	9207      	str	r2, [sp, #28]
  esp->next     = elp;
 8002722:	6027      	str	r7, [r4, #0]
  elp->flags    = (eventflags_t)0;
 8002724:	9508      	str	r5, [sp, #32]
  elp->wflags   = wflags;
 8002726:	9309      	str	r3, [sp, #36]	; 0x24
 8002728:	f385 8811 	msr	BASEPRI, r5
 800272c:	f386 8811 	msr	BASEPRI, r6
  elp->next     = esp->next;
 8002730:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8002734:	6822      	ldr	r2, [r4, #0]
 8002736:	f848 2d28 	str.w	r2, [r8, #-40]!
  elp->listener = currp;
 800273a:	6982      	ldr	r2, [r0, #24]
 800273c:	9201      	str	r2, [sp, #4]
  elp->events   = events;
 800273e:	9102      	str	r1, [sp, #8]
  elp->flags    = (eventflags_t)0;
 8002740:	9503      	str	r5, [sp, #12]
  elp->wflags   = wflags;
 8002742:	9304      	str	r3, [sp, #16]
  esp->next     = elp;
 8002744:	f8c4 8000 	str.w	r8, [r4]
 8002748:	f385 8811 	msr	BASEPRI, r5
 800274c:	f386 8811 	msr	BASEPRI, r6
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)(esp != (event_source_t *)esp->next);
 8002750:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8002752:	4921      	ldr	r1, [pc, #132]	; (80027d8 <test_007_001_execute.lto_priv.126+0xe8>)
 8002754:	1b00      	subs	r0, r0, r4
 8002756:	bf18      	it	ne
 8002758:	2001      	movne	r0, #1
 800275a:	f7fd ff79 	bl	8000650 <_test_assert>
 800275e:	b120      	cbz	r0, 800276a <test_007_001_execute.lto_priv.126+0x7a>
 8002760:	f385 8811 	msr	BASEPRI, r5
}
 8002764:	b00a      	add	sp, #40	; 0x28
 8002766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800276a:	4682      	mov	sl, r0
 800276c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8002770:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
 8002772:	4639      	mov	r1, r7
 8002774:	4620      	mov	r0, r4
  test_set_step(3);
 8002776:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el1);
 800277a:	f7fe f839 	bl	80007f0 <chEvtUnregister>
 800277e:	f386 8811 	msr	BASEPRI, r6
 8002782:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8002784:	4914      	ldr	r1, [pc, #80]	; (80027d8 <test_007_001_execute.lto_priv.126+0xe8>)
 8002786:	1b00      	subs	r0, r0, r4
 8002788:	bf18      	it	ne
 800278a:	2001      	movne	r0, #1
 800278c:	f7fd ff60 	bl	8000650 <_test_assert>
 8002790:	4605      	mov	r5, r0
 8002792:	b120      	cbz	r0, 800279e <test_007_001_execute.lto_priv.126+0xae>
 8002794:	f38a 8811 	msr	BASEPRI, sl
}
 8002798:	b00a      	add	sp, #40	; 0x28
 800279a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800279e:	f380 8811 	msr	BASEPRI, r0
  test_set_step(4);
 80027a2:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
 80027a4:	4641      	mov	r1, r8
 80027a6:	4620      	mov	r0, r4
  test_set_step(4);
 80027a8:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el2);
 80027ac:	f7fe f820 	bl	80007f0 <chEvtUnregister>
 80027b0:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 80027b4:	6820      	ldr	r0, [r4, #0]
 80027b6:	4909      	ldr	r1, [pc, #36]	; (80027dc <test_007_001_execute.lto_priv.126+0xec>)
 80027b8:	1b00      	subs	r0, r0, r4
 80027ba:	fab0 f080 	clz	r0, r0
 80027be:	0940      	lsrs	r0, r0, #5
 80027c0:	f7fd ff46 	bl	8000650 <_test_assert>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d1cb      	bne.n	8002760 <test_007_001_execute.lto_priv.126+0x70>
 80027c8:	f380 8811 	msr	BASEPRI, r0
 80027cc:	e7ca      	b.n	8002764 <test_007_001_execute.lto_priv.126+0x74>
 80027ce:	bf00      	nop
 80027d0:	20000800 	.word	0x20000800
 80027d4:	20001238 	.word	0x20001238
 80027d8:	08006338 	.word	0x08006338
 80027dc:	080061a8 	.word	0x080061a8
 80027e0:	2000106c 	.word	0x2000106c
	...

080027f0 <evt_thread7.lto_priv.174>:
static THD_FUNCTION(evt_thread7, p) {
 80027f0:	b538      	push	{r3, r4, r5, lr}
 80027f2:	2520      	movs	r5, #32
 80027f4:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 80027f8:	2100      	movs	r1, #0
 80027fa:	480b      	ldr	r0, [pc, #44]	; (8002828 <evt_thread7.lto_priv.174+0x38>)
 80027fc:	f7fe f9f8 	bl	8000bf0 <chEvtBroadcastFlagsI>
 8002800:	2400      	movs	r4, #0
  chSchRescheduleS();
 8002802:	f7fe f8cd 	bl	80009a0 <chSchRescheduleS>
 8002806:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
 800280a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800280e:	f7fe ff3f 	bl	8001690 <chThdSleep>
 8002812:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8002816:	4805      	ldr	r0, [pc, #20]	; (800282c <evt_thread7.lto_priv.174+0x3c>)
 8002818:	4621      	mov	r1, r4
 800281a:	f7fe f9e9 	bl	8000bf0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800281e:	f7fe f8bf 	bl	80009a0 <chSchRescheduleS>
 8002822:	f384 8811 	msr	BASEPRI, r4
 8002826:	bd38      	pop	{r3, r4, r5, pc}
 8002828:	20000800 	.word	0x20000800
 800282c:	20000804 	.word	0x20000804

08002830 <evt_thread3.lto_priv.175>:
static THD_FUNCTION(evt_thread3, p) {
 8002830:	b510      	push	{r4, lr}
 8002832:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 8002834:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002838:	f7fe ff2a 	bl	8001690 <chThdSleep>
 800283c:	2320      	movs	r3, #32
 800283e:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 8002842:	2101      	movs	r1, #1
 8002844:	4620      	mov	r0, r4
 8002846:	f7fe f9bb 	bl	8000bc0 <chEvtSignalI>
  chSchRescheduleS();
 800284a:	f7fe f8a9 	bl	80009a0 <chSchRescheduleS>
 800284e:	2300      	movs	r3, #0
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	bd10      	pop	{r4, pc}
 8002856:	bf00      	nop
	...

08002860 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8002860:	2043      	movs	r0, #67	; 0x43
 8002862:	f7fd be4d 	b.w	8000500 <test_emit_token>
 8002866:	bf00      	nop
	...

08002870 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8002870:	2042      	movs	r0, #66	; 0x42
 8002872:	f7fd be45 	b.w	8000500 <test_emit_token>
 8002876:	bf00      	nop
	...

08002880 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8002880:	2041      	movs	r0, #65	; 0x41
 8002882:	f7fd be3d 	b.w	8000500 <test_emit_token>
 8002886:	bf00      	nop
	...

08002890 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8002890:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8002892:	2141      	movs	r1, #65	; 0x41
static THD_FUNCTION(msg_thread1, p) {
 8002894:	4604      	mov	r4, r0
  chMsgSend(p, 'A');
 8002896:	f7fe f973 	bl	8000b80 <chMsgSend>
  chMsgSend(p, 'B');
 800289a:	4620      	mov	r0, r4
 800289c:	2142      	movs	r1, #66	; 0x42
 800289e:	f7fe f96f 	bl	8000b80 <chMsgSend>
  chMsgSend(p, 'C');
 80028a2:	4620      	mov	r0, r4
 80028a4:	2143      	movs	r1, #67	; 0x43
 80028a6:	f7fe f96b 	bl	8000b80 <chMsgSend>
  chMsgSend(p, 'D');
 80028aa:	4620      	mov	r0, r4
 80028ac:	2144      	movs	r1, #68	; 0x44
}
 80028ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 80028b2:	f7fe b965 	b.w	8000b80 <chMsgSend>
 80028b6:	bf00      	nop
	...

080028c0 <test_006_001_execute.lto_priv.125>:
 * - [6.1.1] Starting the messenger thread.
 * - [6.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void test_006_001_execute(void) {
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <test_006_001_execute.lto_priv.125+0x54>)
  thread_t *tp;
  msg_t msg;

  /* [6.1.1] Starting the messenger thread.*/
  test_set_step(1);
 80028c4:	4c14      	ldr	r4, [pc, #80]	; (8002918 <test_006_001_execute.lto_priv.125+0x58>)
 80028c6:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80028c8:	4a14      	ldr	r2, [pc, #80]	; (800291c <test_006_001_execute.lto_priv.125+0x5c>)
 80028ca:	6899      	ldr	r1, [r3, #8]
 80028cc:	4814      	ldr	r0, [pc, #80]	; (8002920 <test_006_001_execute.lto_priv.125+0x60>)
 80028ce:	3101      	adds	r1, #1
  test_set_step(1);
 80028d0:	2501      	movs	r5, #1
 80028d2:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80028d4:	f003 f884 	bl	80059e0 <chThdCreateStatic.constprop.65>
 80028d8:	4a12      	ldr	r2, [pc, #72]	; (8002924 <test_006_001_execute.lto_priv.125+0x64>)
                                   msg_thread1, chThdGetSelfX());
  }

  /* [6.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 80028da:	2302      	movs	r3, #2
 80028dc:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80028de:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 80028e0:	2404      	movs	r4, #4
 80028e2:	2720      	movs	r7, #32
 80028e4:	2600      	movs	r6, #0
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
 80028e6:	f7fe f8eb 	bl	8000ac0 <chMsgWait>
 80028ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80028ec:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80028f0:	4629      	mov	r1, r5
 80028f2:	f7fe f87d 	bl	80009f0 <chSchWakeupS>
 80028f6:	f386 8811 	msr	BASEPRI, r6
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 80028fa:	b2e8      	uxtb	r0, r5
 80028fc:	f7fd fe00 	bl	8000500 <test_emit_token>
    for (i = 0; i < 4; i++) {
 8002900:	3c01      	subs	r4, #1
 8002902:	d1f0      	bne.n	80028e6 <test_006_001_execute.lto_priv.125+0x26>
    }
    test_wait_threads();
 8002904:	f7fe fc2c 	bl	8001160 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8002908:	4907      	ldr	r1, [pc, #28]	; (8002928 <test_006_001_execute.lto_priv.125+0x68>)
 800290a:	4808      	ldr	r0, [pc, #32]	; (800292c <test_006_001_execute.lto_priv.125+0x6c>)
  }
}
 800290c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 8002910:	f7fd be76 	b.w	8000600 <_test_assert_sequence>
 8002914:	20001238 	.word	0x20001238
 8002918:	2000106c 	.word	0x2000106c
 800291c:	08002891 	.word	0x08002891
 8002920:	20000a00 	.word	0x20000a00
 8002924:	20001084 	.word	0x20001084
 8002928:	08006344 	.word	0x08006344
 800292c:	08006268 	.word	0x08006268

08002930 <test_005_009_execute.lto_priv.124>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static void test_005_009_execute(void) {
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <test_005_009_execute.lto_priv.124+0x74>)

  /* [5.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8002934:	4e1c      	ldr	r6, [pc, #112]	; (80029a8 <test_005_009_execute.lto_priv.124+0x78>)
  return chThdGetSelfX()->prio;
 8002936:	699b      	ldr	r3, [r3, #24]
  test_set_step(2);
 8002938:	4c1c      	ldr	r4, [pc, #112]	; (80029ac <test_005_009_execute.lto_priv.124+0x7c>)
 800293a:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800293c:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <test_005_009_execute.lto_priv.124+0x80>)
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <test_005_009_execute.lto_priv.124+0x84>)
 8002940:	4d1d      	ldr	r5, [pc, #116]	; (80029b8 <test_005_009_execute.lto_priv.124+0x88>)
 8002942:	1c79      	adds	r1, r7, #1
  test_set_step(2);
 8002944:	f04f 0e02 	mov.w	lr, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8002948:	4630      	mov	r0, r6
  test_set_step(2);
 800294a:	f8c4 e000 	str.w	lr, [r4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800294e:	f003 f847 	bl	80059e0 <chThdCreateStatic.constprop.65>
  }

  /* [5.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8002952:	f04f 0e03 	mov.w	lr, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8002956:	6028      	str	r0, [r5, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8002958:	1cb9      	adds	r1, r7, #2
 800295a:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <test_005_009_execute.lto_priv.124+0x8c>)
 8002960:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <test_005_009_execute.lto_priv.124+0x90>)
  test_set_step(3);
 8002962:	f8c4 e000 	str.w	lr, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8002966:	f003 f83b 	bl	80059e0 <chThdCreateStatic.constprop.65>

  /* [5.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800296a:	1cf9      	adds	r1, r7, #3
 800296c:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <test_005_009_execute.lto_priv.124+0x94>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 800296e:	6068      	str	r0, [r5, #4]
  test_set_step(4);
 8002970:	2704      	movs	r7, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8002972:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <test_005_009_execute.lto_priv.124+0x98>)
  test_set_step(4);
 8002978:	6027      	str	r7, [r4, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800297a:	f003 f831 	bl	80059e0 <chThdCreateStatic.constprop.65>
  }

  /* [5.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 800297e:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8002980:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 8002982:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8002984:	f003 f8fc 	bl	8005b80 <chCondSignal.constprop.55>
  }

  /* [5.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8002988:	2306      	movs	r3, #6
 800298a:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 800298c:	f003 f8f8 	bl	8005b80 <chCondSignal.constprop.55>
  }

  /* [5.9.7] Checking the order of operations.*/
  test_set_step(7);
 8002990:	2307      	movs	r3, #7
 8002992:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 8002994:	f7fe fbe4 	bl	8001160 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
 8002998:	490c      	ldr	r1, [pc, #48]	; (80029cc <test_005_009_execute.lto_priv.124+0x9c>)
 800299a:	480d      	ldr	r0, [pc, #52]	; (80029d0 <test_005_009_execute.lto_priv.124+0xa0>)
  }
}
 800299c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 80029a0:	f7fd be2e 	b.w	8000600 <_test_assert_sequence>
 80029a4:	20001238 	.word	0x20001238
 80029a8:	20000a00 	.word	0x20000a00
 80029ac:	2000106c 	.word	0x2000106c
 80029b0:	08002fb1 	.word	0x08002fb1
 80029b4:	08006198 	.word	0x08006198
 80029b8:	20001084 	.word	0x20001084
 80029bc:	08006330 	.word	0x08006330
 80029c0:	08003041 	.word	0x08003041
 80029c4:	080029e1 	.word	0x080029e1
 80029c8:	08006334 	.word	0x08006334
 80029cc:	08006344 	.word	0x08006344
 80029d0:	08006358 	.word	0x08006358
	...

080029e0 <thread9>:
static THD_FUNCTION(thread9, p) {
 80029e0:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m2);
 80029e2:	4c06      	ldr	r4, [pc, #24]	; (80029fc <thread9+0x1c>)
static THD_FUNCTION(thread9, p) {
 80029e4:	4605      	mov	r5, r0
  chMtxLock(&m2);
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7fe faca 	bl	8000f80 <chMtxLock>
  test_emit_token(*(char *)p);
 80029ec:	7828      	ldrb	r0, [r5, #0]
 80029ee:	f7fd fd87 	bl	8000500 <test_emit_token>
  chMtxUnlock(&m2);
 80029f2:	4620      	mov	r0, r4
}
 80029f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 80029f8:	f7fe ba22 	b.w	8000e40 <chMtxUnlock>
 80029fc:	20000808 	.word	0x20000808

08002a00 <test_005_004_execute.lto_priv.116>:
static void test_005_004_execute(void) {
 8002a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8002a04:	4d40      	ldr	r5, [pc, #256]	; (8002b08 <test_005_004_execute.lto_priv.116+0x108>)
  test_set_step(2);
 8002a06:	4e41      	ldr	r6, [pc, #260]	; (8002b0c <test_005_004_execute.lto_priv.116+0x10c>)
  return chThdGetSelfX()->prio;
 8002a08:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8002a0a:	4b41      	ldr	r3, [pc, #260]	; (8002b10 <test_005_004_execute.lto_priv.116+0x110>)
 8002a0c:	6894      	ldr	r4, [r2, #8]
 8002a0e:	4841      	ldr	r0, [pc, #260]	; (8002b14 <test_005_004_execute.lto_priv.116+0x114>)
 8002a10:	4a41      	ldr	r2, [pc, #260]	; (8002b18 <test_005_004_execute.lto_priv.116+0x118>)
 8002a12:	4f42      	ldr	r7, [pc, #264]	; (8002b1c <test_005_004_execute.lto_priv.116+0x11c>)
    pa = p + 1;
 8002a14:	f104 0801 	add.w	r8, r4, #1
  test_set_step(2);
 8002a18:	f04f 0e02 	mov.w	lr, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8002a1c:	4641      	mov	r1, r8
  test_set_step(2);
 8002a1e:	f8c6 e000 	str.w	lr, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8002a22:	f002 ffdd 	bl	80059e0 <chThdCreateStatic.constprop.65>
    pb = p + 2;
 8002a26:	f104 0902 	add.w	r9, r4, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8002a2a:	4649      	mov	r1, r9
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8002a2c:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <test_005_004_execute.lto_priv.116+0x120>)
 8002a30:	4a3c      	ldr	r2, [pc, #240]	; (8002b24 <test_005_004_execute.lto_priv.116+0x124>)
 8002a32:	483d      	ldr	r0, [pc, #244]	; (8002b28 <test_005_004_execute.lto_priv.116+0x128>)
 8002a34:	f002 ffd4 	bl	80059e0 <chThdCreateStatic.constprop.65>
  test_set_step(3);
 8002a38:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8002a3a:	6078      	str	r0, [r7, #4]
    chMtxLock(&m1);
 8002a3c:	483b      	ldr	r0, [pc, #236]	; (8002b2c <test_005_004_execute.lto_priv.116+0x12c>)
  test_set_step(3);
 8002a3e:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8002a40:	f7fe fa9e 	bl	8000f80 <chMtxLock>
 8002a44:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8002a46:	493a      	ldr	r1, [pc, #232]	; (8002b30 <test_005_004_execute.lto_priv.116+0x130>)
 8002a48:	6898      	ldr	r0, [r3, #8]
 8002a4a:	1b00      	subs	r0, r0, r4
 8002a4c:	fab0 f080 	clz	r0, r0
 8002a50:	0940      	lsrs	r0, r0, #5
 8002a52:	f7fd fdfd 	bl	8000650 <_test_assert>
 8002a56:	b108      	cbz	r0, 8002a5c <test_005_004_execute.lto_priv.116+0x5c>
 8002a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
 8002a5c:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 8002a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(4);
 8002a62:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8002a64:	f7fe fe14 	bl	8001690 <chThdSleep>
 8002a68:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8002a6a:	4931      	ldr	r1, [pc, #196]	; (8002b30 <test_005_004_execute.lto_priv.116+0x130>)
 8002a6c:	6898      	ldr	r0, [r3, #8]
 8002a6e:	eba0 0008 	sub.w	r0, r0, r8
 8002a72:	fab0 f080 	clz	r0, r0
 8002a76:	0940      	lsrs	r0, r0, #5
 8002a78:	f7fd fdea 	bl	8000650 <_test_assert>
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d1eb      	bne.n	8002a58 <test_005_004_execute.lto_priv.116+0x58>
  test_set_step(5);
 8002a80:	2305      	movs	r3, #5
    chMtxLock(&m2);
 8002a82:	482c      	ldr	r0, [pc, #176]	; (8002b34 <test_005_004_execute.lto_priv.116+0x134>)
  test_set_step(5);
 8002a84:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
 8002a86:	f7fe fa7b 	bl	8000f80 <chMtxLock>
 8002a8a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8002a8c:	4928      	ldr	r1, [pc, #160]	; (8002b30 <test_005_004_execute.lto_priv.116+0x130>)
 8002a8e:	6898      	ldr	r0, [r3, #8]
 8002a90:	eba0 0008 	sub.w	r0, r0, r8
 8002a94:	fab0 f080 	clz	r0, r0
 8002a98:	0940      	lsrs	r0, r0, #5
 8002a9a:	f7fd fdd9 	bl	8000650 <_test_assert>
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	d1da      	bne.n	8002a58 <test_005_004_execute.lto_priv.116+0x58>
  test_set_step(6);
 8002aa2:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 8002aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(6);
 8002aa8:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8002aaa:	f7fe fdf1 	bl	8001690 <chThdSleep>
 8002aae:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 8002ab0:	491f      	ldr	r1, [pc, #124]	; (8002b30 <test_005_004_execute.lto_priv.116+0x130>)
 8002ab2:	6898      	ldr	r0, [r3, #8]
 8002ab4:	eba0 0009 	sub.w	r0, r0, r9
 8002ab8:	fab0 f080 	clz	r0, r0
 8002abc:	0940      	lsrs	r0, r0, #5
 8002abe:	f7fd fdc7 	bl	8000650 <_test_assert>
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	d1c8      	bne.n	8002a58 <test_005_004_execute.lto_priv.116+0x58>
  test_set_step(7);
 8002ac6:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 8002ac8:	481a      	ldr	r0, [pc, #104]	; (8002b34 <test_005_004_execute.lto_priv.116+0x134>)
  test_set_step(7);
 8002aca:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
 8002acc:	f7fe f9b8 	bl	8000e40 <chMtxUnlock>
 8002ad0:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8002ad2:	4917      	ldr	r1, [pc, #92]	; (8002b30 <test_005_004_execute.lto_priv.116+0x130>)
 8002ad4:	6898      	ldr	r0, [r3, #8]
 8002ad6:	eba0 0008 	sub.w	r0, r0, r8
 8002ada:	fab0 f080 	clz	r0, r0
 8002ade:	0940      	lsrs	r0, r0, #5
 8002ae0:	f7fd fdb6 	bl	8000650 <_test_assert>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d1b7      	bne.n	8002a58 <test_005_004_execute.lto_priv.116+0x58>
  test_set_step(8);
 8002ae8:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 8002aea:	4810      	ldr	r0, [pc, #64]	; (8002b2c <test_005_004_execute.lto_priv.116+0x12c>)
  test_set_step(8);
 8002aec:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 8002aee:	f7fe f9a7 	bl	8000e40 <chMtxUnlock>
 8002af2:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8002af4:	490e      	ldr	r1, [pc, #56]	; (8002b30 <test_005_004_execute.lto_priv.116+0x130>)
 8002af6:	6898      	ldr	r0, [r3, #8]
 8002af8:	1b00      	subs	r0, r0, r4
 8002afa:	fab0 f080 	clz	r0, r0
 8002afe:	0940      	lsrs	r0, r0, #5
}
 8002b00:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8002b04:	f7fd bda4 	b.w	8000650 <_test_assert>
 8002b08:	20001238 	.word	0x20001238
 8002b0c:	2000106c 	.word	0x2000106c
 8002b10:	08006198 	.word	0x08006198
 8002b14:	20000a00 	.word	0x20000a00
 8002b18:	08002b41 	.word	0x08002b41
 8002b1c:	20001084 	.word	0x20001084
 8002b20:	08006334 	.word	0x08006334
 8002b24:	08002f81 	.word	0x08002f81
 8002b28:	20000b48 	.word	0x20000b48
 8002b2c:	20000844 	.word	0x20000844
 8002b30:	080062e0 	.word	0x080062e0
 8002b34:	20000808 	.word	0x20000808
	...

08002b40 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8002b40:	b510      	push	{r4, lr}
  chMtxLock(&m1);
 8002b42:	4c06      	ldr	r4, [pc, #24]	; (8002b5c <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
 8002b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b48:	f7fe fda2 	bl	8001690 <chThdSleep>
  chMtxLock(&m1);
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f7fe fa17 	bl	8000f80 <chMtxLock>
  chMtxUnlock(&m1);
 8002b52:	4620      	mov	r0, r4
}
 8002b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8002b58:	f7fe b972 	b.w	8000e40 <chMtxUnlock>
 8002b5c:	20000844 	.word	0x20000844

08002b60 <test_005_001_execute.lto_priv.113>:
static void test_005_001_execute(void) {
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8002b62:	4f24      	ldr	r7, [pc, #144]	; (8002bf4 <test_005_001_execute.lto_priv.113+0x94>)
  test_set_step(2);
 8002b64:	4e24      	ldr	r6, [pc, #144]	; (8002bf8 <test_005_001_execute.lto_priv.113+0x98>)
  return chThdGetSelfX()->prio;
 8002b66:	69bb      	ldr	r3, [r7, #24]
    chMtxLock(&m1);
 8002b68:	4824      	ldr	r0, [pc, #144]	; (8002bfc <test_005_001_execute.lto_priv.113+0x9c>)
 8002b6a:	689c      	ldr	r4, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8002b6c:	4d24      	ldr	r5, [pc, #144]	; (8002c00 <test_005_001_execute.lto_priv.113+0xa0>)
  test_set_step(2);
 8002b6e:	2302      	movs	r3, #2
 8002b70:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8002b72:	f7fe fa05 	bl	8000f80 <chMtxLock>
  test_set_step(3);
 8002b76:	f04f 0e03 	mov.w	lr, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8002b7a:	1c61      	adds	r1, r4, #1
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <test_005_001_execute.lto_priv.113+0xa4>)
 8002b7e:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <test_005_001_execute.lto_priv.113+0xa8>)
 8002b80:	4822      	ldr	r0, [pc, #136]	; (8002c0c <test_005_001_execute.lto_priv.113+0xac>)
  test_set_step(3);
 8002b82:	f8c6 e000 	str.w	lr, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8002b86:	f002 ff2b 	bl	80059e0 <chThdCreateStatic.constprop.65>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8002b8a:	1ca1      	adds	r1, r4, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8002b8c:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <test_005_001_execute.lto_priv.113+0xb0>)
 8002b90:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <test_005_001_execute.lto_priv.113+0xa8>)
 8002b92:	4820      	ldr	r0, [pc, #128]	; (8002c14 <test_005_001_execute.lto_priv.113+0xb4>)
 8002b94:	f002 ff24 	bl	80059e0 <chThdCreateStatic.constprop.65>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8002b98:	1ce1      	adds	r1, r4, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8002b9a:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8002b9c:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <test_005_001_execute.lto_priv.113+0xb8>)
 8002b9e:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <test_005_001_execute.lto_priv.113+0xa8>)
 8002ba0:	481e      	ldr	r0, [pc, #120]	; (8002c1c <test_005_001_execute.lto_priv.113+0xbc>)
 8002ba2:	f002 ff1d 	bl	80059e0 <chThdCreateStatic.constprop.65>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8002ba6:	1d21      	adds	r1, r4, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8002ba8:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <test_005_001_execute.lto_priv.113+0xc0>)
 8002bac:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <test_005_001_execute.lto_priv.113+0xa8>)
 8002bae:	481d      	ldr	r0, [pc, #116]	; (8002c24 <test_005_001_execute.lto_priv.113+0xc4>)
 8002bb0:	f002 ff16 	bl	80059e0 <chThdCreateStatic.constprop.65>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8002bb4:	1d61      	adds	r1, r4, #5
 8002bb6:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <test_005_001_execute.lto_priv.113+0xa8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8002bb8:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <test_005_001_execute.lto_priv.113+0xc8>)
 8002bbc:	481b      	ldr	r0, [pc, #108]	; (8002c2c <test_005_001_execute.lto_priv.113+0xcc>)
 8002bbe:	f002 ff0f 	bl	80059e0 <chThdCreateStatic.constprop.65>
  test_set_step(4);
 8002bc2:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8002bc4:	6128      	str	r0, [r5, #16]
    chMtxUnlock(&m1);
 8002bc6:	480d      	ldr	r0, [pc, #52]	; (8002bfc <test_005_001_execute.lto_priv.113+0x9c>)
  test_set_step(4);
 8002bc8:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 8002bca:	f7fe f939 	bl	8000e40 <chMtxUnlock>
    test_wait_threads();
 8002bce:	f7fe fac7 	bl	8001160 <test_wait_threads>
 8002bd2:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 8002bd4:	4916      	ldr	r1, [pc, #88]	; (8002c30 <test_005_001_execute.lto_priv.113+0xd0>)
 8002bd6:	6898      	ldr	r0, [r3, #8]
 8002bd8:	1b00      	subs	r0, r0, r4
 8002bda:	fab0 f080 	clz	r0, r0
 8002bde:	0940      	lsrs	r0, r0, #5
 8002be0:	f7fd fd36 	bl	8000650 <_test_assert>
 8002be4:	b100      	cbz	r0, 8002be8 <test_005_001_execute.lto_priv.113+0x88>
 8002be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert_sequence("ABCDE", "invalid sequence");
 8002be8:	4912      	ldr	r1, [pc, #72]	; (8002c34 <test_005_001_execute.lto_priv.113+0xd4>)
 8002bea:	4813      	ldr	r0, [pc, #76]	; (8002c38 <test_005_001_execute.lto_priv.113+0xd8>)
}
 8002bec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8002bf0:	f7fd bd06 	b.w	8000600 <_test_assert_sequence>
 8002bf4:	20001238 	.word	0x20001238
 8002bf8:	2000106c 	.word	0x2000106c
 8002bfc:	20000844 	.word	0x20000844
 8002c00:	20001084 	.word	0x20001084
 8002c04:	080062dc 	.word	0x080062dc
 8002c08:	08002c41 	.word	0x08002c41
 8002c0c:	20000a00 	.word	0x20000a00
 8002c10:	080062d4 	.word	0x080062d4
 8002c14:	20000b48 	.word	0x20000b48
 8002c18:	08006330 	.word	0x08006330
 8002c1c:	20000c90 	.word	0x20000c90
 8002c20:	08006334 	.word	0x08006334
 8002c24:	20000dd8 	.word	0x20000dd8
 8002c28:	08006198 	.word	0x08006198
 8002c2c:	20000f20 	.word	0x20000f20
 8002c30:	080062e0 	.word	0x080062e0
 8002c34:	08006344 	.word	0x08006344
 8002c38:	080062d8 	.word	0x080062d8
 8002c3c:	00000000 	.word	0x00000000

08002c40 <thread1>:
static THD_FUNCTION(thread1, p) {
 8002c40:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m1);
 8002c42:	4c06      	ldr	r4, [pc, #24]	; (8002c5c <thread1+0x1c>)
static THD_FUNCTION(thread1, p) {
 8002c44:	4605      	mov	r5, r0
  chMtxLock(&m1);
 8002c46:	4620      	mov	r0, r4
 8002c48:	f7fe f99a 	bl	8000f80 <chMtxLock>
  test_emit_token(*(char *)p);
 8002c4c:	7828      	ldrb	r0, [r5, #0]
 8002c4e:	f7fd fc57 	bl	8000500 <test_emit_token>
  chMtxUnlock(&m1);
 8002c52:	4620      	mov	r0, r4
}
 8002c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 8002c58:	f7fe b8f2 	b.w	8000e40 <chMtxUnlock>
 8002c5c:	20000844 	.word	0x20000844

08002c60 <test_005_008_execute.lto_priv.122>:
static void test_005_008_execute(void) {
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8002c62:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <test_005_008_execute.lto_priv.122+0x9c>)
  test_set_step(1);
 8002c64:	4e26      	ldr	r6, [pc, #152]	; (8002d00 <test_005_008_execute.lto_priv.122+0xa0>)
  return chThdGetSelfX()->prio;
 8002c66:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002c68:	4826      	ldr	r0, [pc, #152]	; (8002d04 <test_005_008_execute.lto_priv.122+0xa4>)
 8002c6a:	6895      	ldr	r5, [r2, #8]
 8002c6c:	4b26      	ldr	r3, [pc, #152]	; (8002d08 <test_005_008_execute.lto_priv.122+0xa8>)
 8002c6e:	4a27      	ldr	r2, [pc, #156]	; (8002d0c <test_005_008_execute.lto_priv.122+0xac>)
 8002c70:	4c27      	ldr	r4, [pc, #156]	; (8002d10 <test_005_008_execute.lto_priv.122+0xb0>)
 8002c72:	1c69      	adds	r1, r5, #1
  test_set_step(1);
 8002c74:	2701      	movs	r7, #1
 8002c76:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002c78:	f002 feb2 	bl	80059e0 <chThdCreateStatic.constprop.65>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8002c7c:	1ca9      	adds	r1, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002c7e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8002c80:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <test_005_008_execute.lto_priv.122+0xb4>)
 8002c82:	4a22      	ldr	r2, [pc, #136]	; (8002d0c <test_005_008_execute.lto_priv.122+0xac>)
 8002c84:	4824      	ldr	r0, [pc, #144]	; (8002d18 <test_005_008_execute.lto_priv.122+0xb8>)
 8002c86:	f002 feab 	bl	80059e0 <chThdCreateStatic.constprop.65>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8002c8a:	1ce9      	adds	r1, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8002c8c:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8002c8e:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <test_005_008_execute.lto_priv.122+0xbc>)
 8002c90:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <test_005_008_execute.lto_priv.122+0xac>)
 8002c92:	4823      	ldr	r0, [pc, #140]	; (8002d20 <test_005_008_execute.lto_priv.122+0xc0>)
 8002c94:	f002 fea4 	bl	80059e0 <chThdCreateStatic.constprop.65>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8002c98:	1d29      	adds	r1, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8002c9a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8002c9c:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <test_005_008_execute.lto_priv.122+0xc4>)
 8002c9e:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <test_005_008_execute.lto_priv.122+0xac>)
 8002ca0:	4821      	ldr	r0, [pc, #132]	; (8002d28 <test_005_008_execute.lto_priv.122+0xc8>)
 8002ca2:	f002 fe9d 	bl	80059e0 <chThdCreateStatic.constprop.65>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8002ca6:	1d69      	adds	r1, r5, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8002ca8:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <test_005_008_execute.lto_priv.122+0xcc>)
 8002cac:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <test_005_008_execute.lto_priv.122+0xac>)
 8002cae:	4820      	ldr	r0, [pc, #128]	; (8002d30 <test_005_008_execute.lto_priv.122+0xd0>)
 8002cb0:	f002 fe96 	bl	80059e0 <chThdCreateStatic.constprop.65>
  test_set_step(2);
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8002cb8:	6120      	str	r0, [r4, #16]
 8002cba:	2320      	movs	r3, #32
 8002cbc:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002cc0:	4c1c      	ldr	r4, [pc, #112]	; (8002d34 <test_005_008_execute.lto_priv.122+0xd4>)
 8002cc2:	6823      	ldr	r3, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
 8002cc4:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8002cc6:	bf18      	it	ne
 8002cc8:	f06f 0501 	mvnne.w	r5, #1
  while (queue_notempty(&cp->queue)) {
 8002ccc:	d009      	beq.n	8002ce2 <test_005_008_execute.lto_priv.122+0x82>
  tqp->next             = tp->queue.next;
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	6022      	str	r2, [r4, #0]
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8002cd2:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8002cd4:	6054      	str	r4, [r2, #4]
 8002cd6:	f7fd ff3b 	bl	8000b50 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
 8002cde:	42a3      	cmp	r3, r4
 8002ce0:	d1f5      	bne.n	8002cce <test_005_008_execute.lto_priv.122+0x6e>
  chSchRescheduleS();
 8002ce2:	f7fd fe5d 	bl	80009a0 <chSchRescheduleS>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8002cec:	f7fe fa38 	bl	8001160 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8002cf0:	4911      	ldr	r1, [pc, #68]	; (8002d38 <test_005_008_execute.lto_priv.122+0xd8>)
 8002cf2:	4812      	ldr	r0, [pc, #72]	; (8002d3c <test_005_008_execute.lto_priv.122+0xdc>)
}
 8002cf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8002cf8:	f7fd bc82 	b.w	8000600 <_test_assert_sequence>
 8002cfc:	20001238 	.word	0x20001238
 8002d00:	2000106c 	.word	0x2000106c
 8002d04:	20000a00 	.word	0x20000a00
 8002d08:	080062dc 	.word	0x080062dc
 8002d0c:	08003041 	.word	0x08003041
 8002d10:	20001084 	.word	0x20001084
 8002d14:	080062d4 	.word	0x080062d4
 8002d18:	20000b48 	.word	0x20000b48
 8002d1c:	08006330 	.word	0x08006330
 8002d20:	20000c90 	.word	0x20000c90
 8002d24:	08006334 	.word	0x08006334
 8002d28:	20000dd8 	.word	0x20000dd8
 8002d2c:	08006198 	.word	0x08006198
 8002d30:	20000f20 	.word	0x20000f20
 8002d34:	20000824 	.word	0x20000824
 8002d38:	08006344 	.word	0x08006344
 8002d3c:	080062d8 	.word	0x080062d8

08002d40 <test_005_007_execute.lto_priv.120>:
  return ch.rlist.current;
 8002d40:	4b28      	ldr	r3, [pc, #160]	; (8002de4 <test_005_007_execute.lto_priv.120+0xa4>)
  return chThdGetSelfX()->prio;
 8002d42:	699b      	ldr	r3, [r3, #24]
static void test_005_007_execute(void) {
 8002d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d48:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002d4a:	4e27      	ldr	r6, [pc, #156]	; (8002de8 <test_005_007_execute.lto_priv.120+0xa8>)
 8002d4c:	4d27      	ldr	r5, [pc, #156]	; (8002dec <test_005_007_execute.lto_priv.120+0xac>)
  test_set_step(1);
 8002d4e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002e10 <test_005_007_execute.lto_priv.120+0xd0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002d52:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <test_005_007_execute.lto_priv.120+0xb0>)
 8002d54:	4c27      	ldr	r4, [pc, #156]	; (8002df4 <test_005_007_execute.lto_priv.120+0xb4>)
  test_set_step(1);
 8002d56:	f04f 0e01 	mov.w	lr, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002d5a:	1c79      	adds	r1, r7, #1
 8002d5c:	4632      	mov	r2, r6
 8002d5e:	4628      	mov	r0, r5
  test_set_step(1);
 8002d60:	f8c8 e000 	str.w	lr, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002d64:	f002 fe3c 	bl	80059e0 <chThdCreateStatic.constprop.65>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8002d68:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002d6a:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8002d6c:	4632      	mov	r2, r6
 8002d6e:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8002d72:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <test_005_007_execute.lto_priv.120+0xb8>)
 8002d74:	f002 fe34 	bl	80059e0 <chThdCreateStatic.constprop.65>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8002d78:	1cf9      	adds	r1, r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8002d7a:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8002d7c:	4632      	mov	r2, r6
 8002d7e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8002d82:	4b1e      	ldr	r3, [pc, #120]	; (8002dfc <test_005_007_execute.lto_priv.120+0xbc>)
 8002d84:	f002 fe2c 	bl	80059e0 <chThdCreateStatic.constprop.65>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8002d88:	1d39      	adds	r1, r7, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8002d8a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8002d8c:	4632      	mov	r2, r6
 8002d8e:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8002d92:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <test_005_007_execute.lto_priv.120+0xc0>)
 8002d94:	f002 fe24 	bl	80059e0 <chThdCreateStatic.constprop.65>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8002d98:	1d79      	adds	r1, r7, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8002d9a:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8002d9c:	4632      	mov	r2, r6
 8002d9e:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <test_005_007_execute.lto_priv.120+0xc4>)
 8002da4:	f002 fe1c 	bl	80059e0 <chThdCreateStatic.constprop.65>
  test_set_step(2);
 8002da8:	2302      	movs	r3, #2
 8002daa:	f8c8 3000 	str.w	r3, [r8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8002dae:	6120      	str	r0, [r4, #16]
 8002db0:	2320      	movs	r3, #32
 8002db2:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
 8002db6:	f002 fefb 	bl	8005bb0 <chCondSignalI.constprop.54>
    chCondSignalI(&c1);
 8002dba:	f002 fef9 	bl	8005bb0 <chCondSignalI.constprop.54>
    chCondSignalI(&c1);
 8002dbe:	f002 fef7 	bl	8005bb0 <chCondSignalI.constprop.54>
    chCondSignalI(&c1);
 8002dc2:	f002 fef5 	bl	8005bb0 <chCondSignalI.constprop.54>
    chCondSignalI(&c1);
 8002dc6:	f002 fef3 	bl	8005bb0 <chCondSignalI.constprop.54>
    chSchRescheduleS();
 8002dca:	f7fd fde9 	bl	80009a0 <chSchRescheduleS>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8002dd4:	f7fe f9c4 	bl	8001160 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8002dd8:	490b      	ldr	r1, [pc, #44]	; (8002e08 <test_005_007_execute.lto_priv.120+0xc8>)
 8002dda:	480c      	ldr	r0, [pc, #48]	; (8002e0c <test_005_007_execute.lto_priv.120+0xcc>)
}
 8002ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8002de0:	f7fd bc0e 	b.w	8000600 <_test_assert_sequence>
 8002de4:	20001238 	.word	0x20001238
 8002de8:	08003041 	.word	0x08003041
 8002dec:	20000a00 	.word	0x20000a00
 8002df0:	080062dc 	.word	0x080062dc
 8002df4:	20001084 	.word	0x20001084
 8002df8:	080062d4 	.word	0x080062d4
 8002dfc:	08006330 	.word	0x08006330
 8002e00:	08006334 	.word	0x08006334
 8002e04:	08006198 	.word	0x08006198
 8002e08:	08006344 	.word	0x08006344
 8002e0c:	080062d8 	.word	0x080062d8
 8002e10:	2000106c 	.word	0x2000106c
	...

08002e20 <test_005_005_execute.lto_priv.118>:
static void test_005_005_execute(void) {
 8002e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8002e24:	4d4e      	ldr	r5, [pc, #312]	; (8002f60 <test_005_005_execute.lto_priv.118+0x140>)
  test_set_step(2);
 8002e26:	4c4f      	ldr	r4, [pc, #316]	; (8002f64 <test_005_005_execute.lto_priv.118+0x144>)
  return chThdGetSelfX()->prio;
 8002e28:	69aa      	ldr	r2, [r5, #24]
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	6896      	ldr	r6, [r2, #8]
 8002e2e:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8002e30:	f002 fe86 	bl	8005b40 <chMtxTryLock.constprop.57>
    test_assert(b, "already locked");
 8002e34:	494c      	ldr	r1, [pc, #304]	; (8002f68 <test_005_005_execute.lto_priv.118+0x148>)
 8002e36:	f7fd fc0b 	bl	8000650 <_test_assert>
 8002e3a:	b108      	cbz	r0, 8002e40 <test_005_005_execute.lto_priv.118+0x20>
 8002e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(3);
 8002e40:	2303      	movs	r3, #3
 8002e42:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8002e44:	f002 fe7c 	bl	8005b40 <chMtxTryLock.constprop.57>
    test_assert(!b, "not locked");
 8002e48:	f080 0001 	eor.w	r0, r0, #1
 8002e4c:	b2c0      	uxtb	r0, r0
 8002e4e:	4947      	ldr	r1, [pc, #284]	; (8002f6c <test_005_005_execute.lto_priv.118+0x14c>)
 8002e50:	f7fd fbfe 	bl	8000650 <_test_assert>
 8002e54:	2800      	cmp	r0, #0
 8002e56:	d1f1      	bne.n	8002e3c <test_005_005_execute.lto_priv.118+0x1c>
    chMtxUnlock(&m1);
 8002e58:	4f45      	ldr	r7, [pc, #276]	; (8002f70 <test_005_005_execute.lto_priv.118+0x150>)
  test_set_step(4);
 8002e5a:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 8002e5c:	4638      	mov	r0, r7
  test_set_step(4);
 8002e5e:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 8002e60:	f7fd ffee 	bl	8000e40 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 8002e64:	68b8      	ldr	r0, [r7, #8]
 8002e66:	4943      	ldr	r1, [pc, #268]	; (8002f74 <test_005_005_execute.lto_priv.118+0x154>)
 8002e68:	fab0 f080 	clz	r0, r0
 8002e6c:	0940      	lsrs	r0, r0, #5
 8002e6e:	f7fd fbef 	bl	8000650 <_test_assert>
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d1e2      	bne.n	8002e3c <test_005_005_execute.lto_priv.118+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8002e76:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8002e78:	493f      	ldr	r1, [pc, #252]	; (8002f78 <test_005_005_execute.lto_priv.118+0x158>)
 8002e7a:	1bc0      	subs	r0, r0, r7
 8002e7c:	fab0 f080 	clz	r0, r0
 8002e80:	0940      	lsrs	r0, r0, #5
 8002e82:	f7fd fbe5 	bl	8000650 <_test_assert>
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d1d8      	bne.n	8002e3c <test_005_005_execute.lto_priv.118+0x1c>
 8002e8a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002e8c:	493b      	ldr	r1, [pc, #236]	; (8002f7c <test_005_005_execute.lto_priv.118+0x15c>)
 8002e8e:	6898      	ldr	r0, [r3, #8]
 8002e90:	1b80      	subs	r0, r0, r6
 8002e92:	fab0 f080 	clz	r0, r0
  test_set_step(5);
 8002e96:	2305      	movs	r3, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002e98:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 8002e9a:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002e9c:	f7fd fbd8 	bl	8000650 <_test_assert>
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d1cb      	bne.n	8002e3c <test_005_005_execute.lto_priv.118+0x1c>
  test_set_step(6);
 8002ea4:	2306      	movs	r3, #6
 8002ea6:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8002ea8:	f002 fe4a 	bl	8005b40 <chMtxTryLock.constprop.57>
    test_assert(b, "already locked");
 8002eac:	492e      	ldr	r1, [pc, #184]	; (8002f68 <test_005_005_execute.lto_priv.118+0x148>)
 8002eae:	f7fd fbcf 	bl	8000650 <_test_assert>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d1c2      	bne.n	8002e3c <test_005_005_execute.lto_priv.118+0x1c>
    b = chMtxTryLock(&m1);
 8002eb6:	f002 fe43 	bl	8005b40 <chMtxTryLock.constprop.57>
    test_assert(!b, "not locked");
 8002eba:	f080 0001 	eor.w	r0, r0, #1
 8002ebe:	b2c0      	uxtb	r0, r0
 8002ec0:	492a      	ldr	r1, [pc, #168]	; (8002f6c <test_005_005_execute.lto_priv.118+0x14c>)
 8002ec2:	f7fd fbc5 	bl	8000650 <_test_assert>
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	d1b8      	bne.n	8002e3c <test_005_005_execute.lto_priv.118+0x1c>
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8002eca:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8002ece:	2320      	movs	r3, #32
 8002ed0:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->mtxlist != NULL) {
 8002ed4:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8002ed8:	b1e3      	cbz	r3, 8002f14 <test_005_005_execute.lto_priv.118+0xf4>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 8002eda:	4680      	mov	r8, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002edc:	681a      	ldr	r2, [r3, #0]
      ctp->mtxlist = mp->next;
 8002ede:	68d9      	ldr	r1, [r3, #12]
 8002ee0:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8002ee4:	4293      	cmp	r3, r2
        (void) chSchReadyI(tp);
 8002ee6:	4610      	mov	r0, r2
      if (chMtxQueueNotEmptyS(mp)) {
 8002ee8:	d036      	beq.n	8002f58 <test_005_005_execute.lto_priv.118+0x138>
  tqp->next             = tp->queue.next;
 8002eea:	6811      	ldr	r1, [r2, #0]
        mp->next = tp->mtxlist;
 8002eec:	f8d2 e038 	ldr.w	lr, [r2, #56]	; 0x38
 8002ef0:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002ef2:	604b      	str	r3, [r1, #4]
        mp->owner = tp;
 8002ef4:	609a      	str	r2, [r3, #8]
        mp->next = tp->mtxlist;
 8002ef6:	f8c3 e00c 	str.w	lr, [r3, #12]
        tp->mtxlist = mp;
 8002efa:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8002efc:	f7fd fe28 	bl	8000b50 <chSchReadyI>
 8002f00:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
      }
    } while (ctp->mtxlist != NULL);
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e9      	bne.n	8002edc <test_005_005_execute.lto_priv.118+0xbc>
    ctp->prio = ctp->realprio;
 8002f08:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8002f0c:	f8c9 3008 	str.w	r3, [r9, #8]
    chSchRescheduleS();
 8002f10:	f7fd fd46 	bl	80009a0 <chSchRescheduleS>
 8002f14:	2300      	movs	r3, #0
 8002f16:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 8002f1a:	68b8      	ldr	r0, [r7, #8]
 8002f1c:	4915      	ldr	r1, [pc, #84]	; (8002f74 <test_005_005_execute.lto_priv.118+0x154>)
 8002f1e:	fab0 f080 	clz	r0, r0
 8002f22:	0940      	lsrs	r0, r0, #5
 8002f24:	f7fd fb94 	bl	8000650 <_test_assert>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d187      	bne.n	8002e3c <test_005_005_execute.lto_priv.118+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8002f2c:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8002f2e:	4912      	ldr	r1, [pc, #72]	; (8002f78 <test_005_005_execute.lto_priv.118+0x158>)
 8002f30:	1bc7      	subs	r7, r0, r7
 8002f32:	4278      	negs	r0, r7
 8002f34:	4178      	adcs	r0, r7
 8002f36:	f7fd fb8b 	bl	8000650 <_test_assert>
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	f47f af7e 	bne.w	8002e3c <test_005_005_execute.lto_priv.118+0x1c>
 8002f40:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002f42:	490e      	ldr	r1, [pc, #56]	; (8002f7c <test_005_005_execute.lto_priv.118+0x15c>)
 8002f44:	6898      	ldr	r0, [r3, #8]
 8002f46:	1b82      	subs	r2, r0, r6
  test_set_step(7);
 8002f48:	2307      	movs	r3, #7
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002f4a:	4250      	negs	r0, r2
  test_set_step(7);
 8002f4c:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002f4e:	4150      	adcs	r0, r2
}
 8002f50:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8002f54:	f7fd bb7c 	b.w	8000650 <_test_assert>
        mp->owner = NULL;
 8002f58:	f8c3 8008 	str.w	r8, [r3, #8]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	e7d1      	b.n	8002f04 <test_005_005_execute.lto_priv.118+0xe4>
 8002f60:	20001238 	.word	0x20001238
 8002f64:	2000106c 	.word	0x2000106c
 8002f68:	080062f8 	.word	0x080062f8
 8002f6c:	08006308 	.word	0x08006308
 8002f70:	20000844 	.word	0x20000844
 8002f74:	08006314 	.word	0x08006314
 8002f78:	08006320 	.word	0x08006320
 8002f7c:	080062e0 	.word	0x080062e0

08002f80 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 8002f80:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 8002f82:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002f86:	f7fe fb83 	bl	8001690 <chThdSleep>
 8002f8a:	2320      	movs	r3, #32
 8002f8c:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8002f90:	4c06      	ldr	r4, [pc, #24]	; (8002fac <thread4B+0x2c>)
 8002f92:	4620      	mov	r0, r4
 8002f94:	f7fd ff8c 	bl	8000eb0 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f7fd ff29 	bl	8000df0 <chMtxUnlockS>
  chSchRescheduleS();
 8002f9e:	f7fd fcff 	bl	80009a0 <chSchRescheduleS>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	bd10      	pop	{r4, pc}
 8002faa:	bf00      	nop
 8002fac:	20000808 	.word	0x20000808

08002fb0 <thread8>:
static THD_FUNCTION(thread8, p) {
 8002fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb2:	4607      	mov	r7, r0
  chMtxLock(&m2);
 8002fb4:	481b      	ldr	r0, [pc, #108]	; (8003024 <thread8+0x74>)
 8002fb6:	f7fd ffe3 	bl	8000f80 <chMtxLock>
  chMtxLock(&m1);
 8002fba:	481b      	ldr	r0, [pc, #108]	; (8003028 <thread8+0x78>)
 8002fbc:	f7fd ffe0 	bl	8000f80 <chMtxLock>
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8002fc6:	4d19      	ldr	r5, [pc, #100]	; (800302c <thread8+0x7c>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->mtxlist;
 8002fc8:	69ab      	ldr	r3, [r5, #24]
 8002fca:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8002fcc:	4630      	mov	r0, r6
 8002fce:	f7fd ff0f 	bl	8000df0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8002fd2:	4b17      	ldr	r3, [pc, #92]	; (8003030 <thread8+0x80>)
 8002fd4:	69ac      	ldr	r4, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	6263      	str	r3, [r4, #36]	; 0x24
 8002fda:	e003      	b.n	8002fe4 <thread8+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002fdc:	6899      	ldr	r1, [r3, #8]
 8002fde:	68a2      	ldr	r2, [r4, #8]
 8002fe0:	4291      	cmp	r1, r2
 8002fe2:	d302      	bcc.n	8002fea <thread8+0x3a>
    cp = cp->queue.next;
 8002fe4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002fe6:	4283      	cmp	r3, r0
 8002fe8:	d1f8      	bne.n	8002fdc <thread8+0x2c>
  tp->queue.prev             = cp->queue.prev;
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 8002fee:	6023      	str	r3, [r4, #0]
    chSchGoSleepS(newstate);
 8002ff0:	2007      	movs	r0, #7
  tp->queue.prev->queue.next = tp;
 8002ff2:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002ff4:	605c      	str	r4, [r3, #4]
 8002ff6:	f7fd fd4b 	bl	8000a90 <chSchGoSleepS>
  return currp->u.rdymsg;
 8002ffa:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT) {
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	3301      	adds	r3, #1
 8003000:	d002      	beq.n	8003008 <thread8+0x58>
    chMtxLockS(mp);
 8003002:	4630      	mov	r0, r6
 8003004:	f7fd ff54 	bl	8000eb0 <chMtxLockS>
 8003008:	2300      	movs	r3, #0
 800300a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800300e:	7838      	ldrb	r0, [r7, #0]
 8003010:	f7fd fa76 	bl	8000500 <test_emit_token>
  chMtxUnlock(&m1);
 8003014:	4804      	ldr	r0, [pc, #16]	; (8003028 <thread8+0x78>)
 8003016:	f7fd ff13 	bl	8000e40 <chMtxUnlock>
  chMtxUnlock(&m2);
 800301a:	4802      	ldr	r0, [pc, #8]	; (8003024 <thread8+0x74>)
}
 800301c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 8003020:	f7fd bf0e 	b.w	8000e40 <chMtxUnlock>
 8003024:	20000808 	.word	0x20000808
 8003028:	20000844 	.word	0x20000844
 800302c:	20001238 	.word	0x20001238
 8003030:	20000824 	.word	0x20000824
	...

08003040 <thread6>:
static THD_FUNCTION(thread6, p) {
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	4606      	mov	r6, r0
  chMtxLock(&m1);
 8003044:	4816      	ldr	r0, [pc, #88]	; (80030a0 <thread6+0x60>)
 8003046:	f7fd ff9b 	bl	8000f80 <chMtxLock>
 800304a:	2320      	movs	r3, #32
 800304c:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <thread6+0x64>)
 8003052:	699c      	ldr	r4, [r3, #24]
 8003054:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chMtxUnlockS(mp);
 8003056:	4628      	mov	r0, r5
 8003058:	f7fd feca 	bl	8000df0 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 800305c:	4812      	ldr	r0, [pc, #72]	; (80030a8 <thread6+0x68>)
 800305e:	6260      	str	r0, [r4, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8003060:	4603      	mov	r3, r0
 8003062:	e003      	b.n	800306c <thread6+0x2c>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003064:	6899      	ldr	r1, [r3, #8]
 8003066:	68a2      	ldr	r2, [r4, #8]
 8003068:	4291      	cmp	r1, r2
 800306a:	d302      	bcc.n	8003072 <thread6+0x32>
    cp = cp->queue.next;
 800306c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800306e:	4283      	cmp	r3, r0
 8003070:	d1f8      	bne.n	8003064 <thread6+0x24>
  tp->queue.prev             = cp->queue.prev;
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 8003076:	6023      	str	r3, [r4, #0]
  chSchGoSleepS(CH_STATE_WTCOND);
 8003078:	2007      	movs	r0, #7
  tp->queue.prev->queue.next = tp;
 800307a:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 800307c:	605c      	str	r4, [r3, #4]
 800307e:	f7fd fd07 	bl	8000a90 <chSchGoSleepS>
  chMtxLockS(mp);
 8003082:	4628      	mov	r0, r5
 8003084:	f7fd ff14 	bl	8000eb0 <chMtxLockS>
 8003088:	2300      	movs	r3, #0
 800308a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800308e:	7830      	ldrb	r0, [r6, #0]
 8003090:	f7fd fa36 	bl	8000500 <test_emit_token>
  chMtxUnlock(&m1);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <thread6+0x60>)
}
 8003096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chMtxUnlock(&m1);
 800309a:	f7fd bed1 	b.w	8000e40 <chMtxUnlock>
 800309e:	bf00      	nop
 80030a0:	20000844 	.word	0x20000844
 80030a4:	20001238 	.word	0x20001238
 80030a8:	20000824 	.word	0x20000824
 80030ac:	00000000 	.word	0x00000000

080030b0 <test_004_006_execute.lto_priv.111>:
}

static void test_004_006_execute(void) {
 80030b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [4.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 80030b4:	4f60      	ldr	r7, [pc, #384]	; (8003238 <test_004_006_execute.lto_priv.111+0x188>)
static void test_004_006_execute(void) {
 80030b6:	b084      	sub	sp, #16
  tqp->next = (thread_t *)tqp;
 80030b8:	ac01      	add	r4, sp, #4
  test_set_step(1);
 80030ba:	2301      	movs	r3, #1
 80030bc:	2600      	movs	r6, #0
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	9401      	str	r4, [sp, #4]
  tqp->prev = (thread_t *)tqp;
 80030c2:	9402      	str	r4, [sp, #8]
 80030c4:	9603      	str	r6, [sp, #12]
 80030c6:	f04f 0820 	mov.w	r8, #32
 80030ca:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 80030ce:	9803      	ldr	r0, [sp, #12]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80030d0:	495a      	ldr	r1, [pc, #360]	; (800323c <test_004_006_execute.lto_priv.111+0x18c>)
 80030d2:	42b0      	cmp	r0, r6
 80030d4:	bfcc      	ite	gt
 80030d6:	2000      	movgt	r0, #0
 80030d8:	2001      	movle	r0, #1
 80030da:	f7fd fab9 	bl	8000650 <_test_assert>
 80030de:	b120      	cbz	r0, 80030ea <test_004_006_execute.lto_priv.111+0x3a>
 80030e0:	f386 8811 	msr	BASEPRI, r6
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
}
 80030e4:	b004      	add	sp, #16
 80030e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030ea:	4605      	mov	r5, r0
 80030ec:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80030f0:	2302      	movs	r3, #2
  chSemReset(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
 80030f2:	4601      	mov	r1, r0
 80030f4:	4620      	mov	r0, r4
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	f7fe f86a 	bl	80011d0 <chSemReset>
 80030fc:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8003100:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8003102:	494e      	ldr	r1, [pc, #312]	; (800323c <test_004_006_execute.lto_priv.111+0x18c>)
 8003104:	2800      	cmp	r0, #0
 8003106:	bfcc      	ite	gt
 8003108:	2000      	movgt	r0, #0
 800310a:	2001      	movle	r0, #1
 800310c:	f7fd faa0 	bl	8000650 <_test_assert>
 8003110:	4606      	mov	r6, r0
 8003112:	b120      	cbz	r0, 800311e <test_004_006_execute.lto_priv.111+0x6e>
 8003114:	f385 8811 	msr	BASEPRI, r5
}
 8003118:	b004      	add	sp, #16
 800311a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800311e:	f380 8811 	msr	BASEPRI, r0
 8003122:	4b47      	ldr	r3, [pc, #284]	; (8003240 <test_004_006_execute.lto_priv.111+0x190>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8003124:	4a47      	ldr	r2, [pc, #284]	; (8003244 <test_004_006_execute.lto_priv.111+0x194>)
  return chThdGetSelfX()->prio;
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	4847      	ldr	r0, [pc, #284]	; (8003248 <test_004_006_execute.lto_priv.111+0x198>)
 800312a:	6899      	ldr	r1, [r3, #8]
  test_set_step(3);
 800312c:	2503      	movs	r5, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800312e:	3901      	subs	r1, #1
 8003130:	4623      	mov	r3, r4
  test_set_step(3);
 8003132:	603d      	str	r5, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8003134:	f002 fc54 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8003138:	4a44      	ldr	r2, [pc, #272]	; (800324c <test_004_006_execute.lto_priv.111+0x19c>)
  test_set_step(4);
 800313a:	2304      	movs	r3, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800313c:	6010      	str	r0, [r2, #0]
  return chSemWait(&bsp->sem);
 800313e:	4620      	mov	r0, r4
  test_set_step(4);
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	f7fd fcdd 	bl	8000b00 <chSemWait>
 8003146:	4605      	mov	r5, r0
 8003148:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 800314c:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 800314e:	493b      	ldr	r1, [pc, #236]	; (800323c <test_004_006_execute.lto_priv.111+0x18c>)
 8003150:	2800      	cmp	r0, #0
 8003152:	bfcc      	ite	gt
 8003154:	2000      	movgt	r0, #0
 8003156:	2001      	movle	r0, #1
 8003158:	f7fd fa7a 	bl	8000650 <_test_assert>
 800315c:	2800      	cmp	r0, #0
 800315e:	d1bf      	bne.n	80030e0 <test_004_006_execute.lto_priv.111+0x30>
 8003160:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
 8003164:	fab5 f085 	clz	r0, r5
 8003168:	0940      	lsrs	r0, r0, #5
 800316a:	4939      	ldr	r1, [pc, #228]	; (8003250 <test_004_006_execute.lto_priv.111+0x1a0>)
 800316c:	f7fd fa70 	bl	8000650 <_test_assert>
 8003170:	2800      	cmp	r0, #0
 8003172:	d1b7      	bne.n	80030e4 <test_004_006_execute.lto_priv.111+0x34>
  test_set_step(5);
 8003174:	2305      	movs	r3, #5
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	f388 8811 	msr	BASEPRI, r8
  if (bsp->sem.cnt < (cnt_t)1) {
 800317c:	9b03      	ldr	r3, [sp, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	dd23      	ble.n	80031ca <test_004_006_execute.lto_priv.111+0x11a>
  chSchRescheduleS();
 8003182:	f7fd fc0d 	bl	80009a0 <chSchRescheduleS>
 8003186:	2500      	movs	r5, #0
 8003188:	f385 8811 	msr	BASEPRI, r5
 800318c:	2620      	movs	r6, #32
 800318e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8003192:	9803      	ldr	r0, [sp, #12]
 8003194:	492f      	ldr	r1, [pc, #188]	; (8003254 <test_004_006_execute.lto_priv.111+0x1a4>)
 8003196:	42a8      	cmp	r0, r5
 8003198:	bfd4      	ite	le
 800319a:	2000      	movle	r0, #0
 800319c:	2001      	movgt	r0, #1
 800319e:	f7fd fa57 	bl	8000650 <_test_assert>
 80031a2:	4680      	mov	r8, r0
 80031a4:	2800      	cmp	r0, #0
 80031a6:	d1b5      	bne.n	8003114 <test_004_006_execute.lto_priv.111+0x64>
 80031a8:	f380 8811 	msr	BASEPRI, r0
 80031ac:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 80031b0:	9803      	ldr	r0, [sp, #12]
 80031b2:	4929      	ldr	r1, [pc, #164]	; (8003258 <test_004_006_execute.lto_priv.111+0x1a8>)
 80031b4:	f1a0 0001 	sub.w	r0, r0, #1
 80031b8:	fab0 f080 	clz	r0, r0
 80031bc:	0940      	lsrs	r0, r0, #5
 80031be:	f7fd fa47 	bl	8000650 <_test_assert>
 80031c2:	b130      	cbz	r0, 80031d2 <test_004_006_execute.lto_priv.111+0x122>
 80031c4:	f388 8811 	msr	BASEPRI, r8
 80031c8:	e78c      	b.n	80030e4 <test_004_006_execute.lto_priv.111+0x34>
    chSemSignalI(&bsp->sem);
 80031ca:	4620      	mov	r0, r4
 80031cc:	f7fd ffd8 	bl	8001180 <chSemSignalI>
 80031d0:	e7d7      	b.n	8003182 <test_004_006_execute.lto_priv.111+0xd2>
 80031d2:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 80031d6:	2306      	movs	r3, #6
 80031d8:	603b      	str	r3, [r7, #0]
 80031da:	f386 8811 	msr	BASEPRI, r6
  if (bsp->sem.cnt < (cnt_t)1) {
 80031de:	9b03      	ldr	r3, [sp, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	dd22      	ble.n	800322a <test_004_006_execute.lto_priv.111+0x17a>
  chSchRescheduleS();
 80031e4:	f7fd fbdc 	bl	80009a0 <chSchRescheduleS>
 80031e8:	2600      	movs	r6, #0
 80031ea:	f386 8811 	msr	BASEPRI, r6
 80031ee:	2520      	movs	r5, #32
 80031f0:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 80031f4:	9803      	ldr	r0, [sp, #12]
 80031f6:	4919      	ldr	r1, [pc, #100]	; (800325c <test_004_006_execute.lto_priv.111+0x1ac>)
 80031f8:	42b0      	cmp	r0, r6
 80031fa:	bfd4      	ite	le
 80031fc:	2000      	movle	r0, #0
 80031fe:	2001      	movgt	r0, #1
 8003200:	f7fd fa26 	bl	8000650 <_test_assert>
 8003204:	4604      	mov	r4, r0
 8003206:	2800      	cmp	r0, #0
 8003208:	f47f af6a 	bne.w	80030e0 <test_004_006_execute.lto_priv.111+0x30>
 800320c:	f380 8811 	msr	BASEPRI, r0
 8003210:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8003214:	9803      	ldr	r0, [sp, #12]
 8003216:	4910      	ldr	r1, [pc, #64]	; (8003258 <test_004_006_execute.lto_priv.111+0x1a8>)
 8003218:	1e43      	subs	r3, r0, #1
 800321a:	4258      	negs	r0, r3
 800321c:	4158      	adcs	r0, r3
 800321e:	f7fd fa17 	bl	8000650 <_test_assert>
 8003222:	b130      	cbz	r0, 8003232 <test_004_006_execute.lto_priv.111+0x182>
 8003224:	f384 8811 	msr	BASEPRI, r4
 8003228:	e75c      	b.n	80030e4 <test_004_006_execute.lto_priv.111+0x34>
    chSemSignalI(&bsp->sem);
 800322a:	4620      	mov	r0, r4
 800322c:	f7fd ffa8 	bl	8001180 <chSemSignalI>
 8003230:	e7d8      	b.n	80031e4 <test_004_006_execute.lto_priv.111+0x134>
 8003232:	f380 8811 	msr	BASEPRI, r0
 8003236:	e755      	b.n	80030e4 <test_004_006_execute.lto_priv.111+0x34>
 8003238:	2000106c 	.word	0x2000106c
 800323c:	08006294 	.word	0x08006294
 8003240:	20001238 	.word	0x20001238
 8003244:	080037a1 	.word	0x080037a1
 8003248:	20000a00 	.word	0x20000a00
 800324c:	20001084 	.word	0x20001084
 8003250:	080062a0 	.word	0x080062a0
 8003254:	080062b4 	.word	0x080062b4
 8003258:	080062c0 	.word	0x080062c0
 800325c:	08006298 	.word	0x08006298

08003260 <test_004_005_setup.lto_priv.107>:
  tqp->next = (thread_t *)tqp;
 8003260:	4b02      	ldr	r3, [pc, #8]	; (800326c <test_004_005_setup.lto_priv.107+0xc>)
 8003262:	2200      	movs	r2, #0
 8003264:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003266:	605b      	str	r3, [r3, #4]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	4770      	bx	lr
 800326c:	2000130c 	.word	0x2000130c

08003270 <test_004_004_setup.lto_priv.105>:
 8003270:	f7ff bff6 	b.w	8003260 <test_004_005_setup.lto_priv.107>
	...

08003280 <test_004_003_setup.lto_priv.103>:
 8003280:	f7ff bfee 	b.w	8003260 <test_004_005_setup.lto_priv.107>
	...

08003290 <test_004_002_setup.lto_priv.101>:
 8003290:	f7ff bfe6 	b.w	8003260 <test_004_005_setup.lto_priv.107>
	...

080032a0 <test_004_001_setup.lto_priv.98>:
  tqp->next = (thread_t *)tqp;
 80032a0:	4b02      	ldr	r3, [pc, #8]	; (80032ac <test_004_001_setup.lto_priv.98+0xc>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80032a6:	605b      	str	r3, [r3, #4]
 80032a8:	609a      	str	r2, [r3, #8]
 80032aa:	4770      	bx	lr
 80032ac:	2000130c 	.word	0x2000130c

080032b0 <test_003_001_setup.lto_priv.96>:
 *   the state of the reference are tested.
 * .
 */

static void test_003_001_setup(void) {
  tr1 = NULL;
 80032b0:	4b01      	ldr	r3, [pc, #4]	; (80032b8 <test_003_001_setup.lto_priv.96+0x8>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	4770      	bx	lr
 80032b8:	20000880 	.word	0x20000880
 80032bc:	00000000 	.word	0x00000000

080032c0 <test_001_004_execute.lto_priv.91>:

static void test_001_004_execute(void) {

  /* [1.4.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <test_001_004_execute.lto_priv.91+0x14>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032c8:	6019      	str	r1, [r3, #0]
 80032ca:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80032cc:	6a53      	ldr	r3, [r2, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 80032ce:	4299      	cmp	r1, r3
 80032d0:	d0fc      	beq.n	80032cc <test_001_004_execute.lto_priv.91+0xc>
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    }
  }
}
 80032d2:	4770      	bx	lr
 80032d4:	2000106c 	.word	0x2000106c
	...

080032e0 <test_001_003_execute.lto_priv.90>:
  test_set_step(1);
 80032e0:	4b07      	ldr	r3, [pc, #28]	; (8003300 <test_001_003_execute.lto_priv.90+0x20>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	2320      	movs	r3, #32
 80032e8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80032ec:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 80032ee:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80032f0:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80032f4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80032f6:	2300      	movs	r3, #0
 80032f8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80032fc:	b662      	cpsie	i
 80032fe:	4770      	bx	lr
 8003300:	2000106c 	.word	0x2000106c
	...

08003310 <test_004_005_execute.lto_priv.109>:
  return ch.rlist.current;
 8003310:	4b1e      	ldr	r3, [pc, #120]	; (800338c <test_004_005_execute.lto_priv.109+0x7c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003312:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <test_004_005_execute.lto_priv.109+0x80>)
  return chThdGetSelfX()->prio;
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	481f      	ldr	r0, [pc, #124]	; (8003394 <test_004_005_execute.lto_priv.109+0x84>)
 8003318:	6899      	ldr	r1, [r3, #8]
static void test_004_005_execute(void) {
 800331a:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 800331c:	4d1e      	ldr	r5, [pc, #120]	; (8003398 <test_004_005_execute.lto_priv.109+0x88>)
  return (bool)(tqp->next == (const thread_t *)tqp);
 800331e:	4c1f      	ldr	r4, [pc, #124]	; (800339c <test_004_005_execute.lto_priv.109+0x8c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003320:	3101      	adds	r1, #1
 8003322:	2300      	movs	r3, #0
  test_set_step(1);
 8003324:	2601      	movs	r6, #1
 8003326:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003328:	f002 fb5a 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800332c:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <test_004_005_execute.lto_priv.109+0x90>)
  test_set_step(2);
 800332e:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003330:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8003332:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 8003334:	f002 fbcc 	bl	8005ad0 <chSemSignalWait.constprop.59>
 8003338:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800333a:	491a      	ldr	r1, [pc, #104]	; (80033a4 <test_004_005_execute.lto_priv.109+0x94>)
 800333c:	1b00      	subs	r0, r0, r4
 800333e:	fab0 f080 	clz	r0, r0
 8003342:	0940      	lsrs	r0, r0, #5
 8003344:	f7fd f984 	bl	8000650 <_test_assert>
 8003348:	b100      	cbz	r0, 800334c <test_004_005_execute.lto_priv.109+0x3c>
 800334a:	bd70      	pop	{r4, r5, r6, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 800334c:	68a0      	ldr	r0, [r4, #8]
 800334e:	4916      	ldr	r1, [pc, #88]	; (80033a8 <test_004_005_execute.lto_priv.109+0x98>)
 8003350:	fab0 f080 	clz	r0, r0
 8003354:	0940      	lsrs	r0, r0, #5
 8003356:	f7fd f97b 	bl	8000650 <_test_assert>
 800335a:	2800      	cmp	r0, #0
 800335c:	d1f5      	bne.n	800334a <test_004_005_execute.lto_priv.109+0x3a>
  test_set_step(3);
 800335e:	2303      	movs	r3, #3
 8003360:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 8003362:	f002 fbb5 	bl	8005ad0 <chSemSignalWait.constprop.59>
 8003366:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003368:	490e      	ldr	r1, [pc, #56]	; (80033a4 <test_004_005_execute.lto_priv.109+0x94>)
 800336a:	1b00      	subs	r0, r0, r4
 800336c:	fab0 f080 	clz	r0, r0
 8003370:	0940      	lsrs	r0, r0, #5
 8003372:	f7fd f96d 	bl	8000650 <_test_assert>
 8003376:	2800      	cmp	r0, #0
 8003378:	d1e7      	bne.n	800334a <test_004_005_execute.lto_priv.109+0x3a>
    test_assert(sem1.cnt == 0, "counter not zero");
 800337a:	68a0      	ldr	r0, [r4, #8]
 800337c:	490a      	ldr	r1, [pc, #40]	; (80033a8 <test_004_005_execute.lto_priv.109+0x98>)
 800337e:	fab0 f080 	clz	r0, r0
 8003382:	0940      	lsrs	r0, r0, #5
}
 8003384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 8003388:	f7fd b962 	b.w	8000650 <_test_assert>
 800338c:	20001238 	.word	0x20001238
 8003390:	080033b1 	.word	0x080033b1
 8003394:	20000a00 	.word	0x20000a00
 8003398:	2000106c 	.word	0x2000106c
 800339c:	2000130c 	.word	0x2000130c
 80033a0:	20001084 	.word	0x20001084
 80033a4:	08006320 	.word	0x08006320
 80033a8:	080064c4 	.word	0x080064c4
 80033ac:	00000000 	.word	0x00000000

080033b0 <thread3>:
static THD_FUNCTION(thread3, p) {
 80033b0:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 80033b2:	4c04      	ldr	r4, [pc, #16]	; (80033c4 <thread3+0x14>)
 80033b4:	4620      	mov	r0, r4
 80033b6:	f7fd fba3 	bl	8000b00 <chSemWait>
  chSemSignal(&sem1);
 80033ba:	4620      	mov	r0, r4
}
 80033bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 80033c0:	f7fd bb46 	b.w	8000a50 <chSemSignal>
 80033c4:	2000130c 	.word	0x2000130c
	...

080033d0 <test_004_005_teardown.lto_priv.108>:
 80033d0:	f7fd bec6 	b.w	8001160 <test_wait_threads>
	...

080033e0 <thread1.lto_priv.184>:
static THD_FUNCTION(thread1, p) {
 80033e0:	b510      	push	{r4, lr}
 80033e2:	4604      	mov	r4, r0
  chSemWait(&sem1);
 80033e4:	4803      	ldr	r0, [pc, #12]	; (80033f4 <thread1.lto_priv.184+0x14>)
 80033e6:	f7fd fb8b 	bl	8000b00 <chSemWait>
  test_emit_token(*(char *)p);
 80033ea:	7820      	ldrb	r0, [r4, #0]
}
 80033ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 80033f0:	f7fd b886 	b.w	8000500 <test_emit_token>
 80033f4:	2000130c 	.word	0x2000130c
	...

08003400 <thread.lto_priv.171>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8003400:	7800      	ldrb	r0, [r0, #0]
 8003402:	f7fd b87d 	b.w	8000500 <test_emit_token>
 8003406:	bf00      	nop
	...

08003410 <test_004_002_execute.lto_priv.102>:
static void test_004_002_execute(void) {
 8003410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8003414:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80034f8 <test_004_002_execute.lto_priv.102+0xe8>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003418:	4f2c      	ldr	r7, [pc, #176]	; (80034cc <test_004_002_execute.lto_priv.102+0xbc>)
  return chThdGetSelfX()->prio;
 800341a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800341e:	4e2c      	ldr	r6, [pc, #176]	; (80034d0 <test_004_002_execute.lto_priv.102+0xc0>)
 8003420:	6899      	ldr	r1, [r3, #8]
  test_set_step(1);
 8003422:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80034fc <test_004_002_execute.lto_priv.102+0xec>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003426:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <test_004_002_execute.lto_priv.102+0xc4>)
 8003428:	4d2b      	ldr	r5, [pc, #172]	; (80034d8 <test_004_002_execute.lto_priv.102+0xc8>)
 800342a:	463a      	mov	r2, r7
 800342c:	3105      	adds	r1, #5
 800342e:	4630      	mov	r0, r6
  test_set_step(1);
 8003430:	2401      	movs	r4, #1
 8003432:	f8c9 4000 	str.w	r4, [r9]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003436:	f002 fad3 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800343a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800343e:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8003440:	6899      	ldr	r1, [r3, #8]
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <test_004_002_execute.lto_priv.102+0xcc>)
    chSemSignal(&sem1);
 8003444:	4c26      	ldr	r4, [pc, #152]	; (80034e0 <test_004_002_execute.lto_priv.102+0xd0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8003446:	463a      	mov	r2, r7
 8003448:	3101      	adds	r1, #1
 800344a:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 800344e:	f002 fac7 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8003452:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003456:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8003458:	6899      	ldr	r1, [r3, #8]
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <test_004_002_execute.lto_priv.102+0xd4>)
 800345c:	463a      	mov	r2, r7
 800345e:	3103      	adds	r1, #3
 8003460:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8003464:	f002 fabc 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8003468:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800346c:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800346e:	6899      	ldr	r1, [r3, #8]
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <test_004_002_execute.lto_priv.102+0xd8>)
 8003472:	463a      	mov	r2, r7
 8003474:	3104      	adds	r1, #4
 8003476:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 800347a:	f002 fab1 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800347e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003482:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8003484:	6899      	ldr	r1, [r3, #8]
 8003486:	4b19      	ldr	r3, [pc, #100]	; (80034ec <test_004_002_execute.lto_priv.102+0xdc>)
 8003488:	3102      	adds	r1, #2
 800348a:	463a      	mov	r2, r7
 800348c:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8003490:	f002 faa6 	bl	80059e0 <chThdCreateStatic.constprop.65>
  test_set_step(2);
 8003494:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8003496:	6128      	str	r0, [r5, #16]
    chSemSignal(&sem1);
 8003498:	4620      	mov	r0, r4
  test_set_step(2);
 800349a:	f8c9 3000 	str.w	r3, [r9]
    chSemSignal(&sem1);
 800349e:	f7fd fad7 	bl	8000a50 <chSemSignal>
    chSemSignal(&sem1);
 80034a2:	4620      	mov	r0, r4
 80034a4:	f7fd fad4 	bl	8000a50 <chSemSignal>
    chSemSignal(&sem1);
 80034a8:	4620      	mov	r0, r4
 80034aa:	f7fd fad1 	bl	8000a50 <chSemSignal>
    chSemSignal(&sem1);
 80034ae:	4620      	mov	r0, r4
 80034b0:	f7fd face 	bl	8000a50 <chSemSignal>
    chSemSignal(&sem1);
 80034b4:	4620      	mov	r0, r4
 80034b6:	f7fd facb 	bl	8000a50 <chSemSignal>
    test_wait_threads();
 80034ba:	f7fd fe51 	bl	8001160 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80034be:	490c      	ldr	r1, [pc, #48]	; (80034f0 <test_004_002_execute.lto_priv.102+0xe0>)
 80034c0:	480c      	ldr	r0, [pc, #48]	; (80034f4 <test_004_002_execute.lto_priv.102+0xe4>)
}
 80034c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80034c6:	f7fd b89b 	b.w	8000600 <_test_assert_sequence>
 80034ca:	bf00      	nop
 80034cc:	080033e1 	.word	0x080033e1
 80034d0:	20000a00 	.word	0x20000a00
 80034d4:	08006198 	.word	0x08006198
 80034d8:	20001084 	.word	0x20001084
 80034dc:	08006334 	.word	0x08006334
 80034e0:	2000130c 	.word	0x2000130c
 80034e4:	08006330 	.word	0x08006330
 80034e8:	080062d4 	.word	0x080062d4
 80034ec:	080062dc 	.word	0x080062dc
 80034f0:	08006344 	.word	0x08006344
 80034f4:	080062d8 	.word	0x080062d8
 80034f8:	20001238 	.word	0x20001238
 80034fc:	2000106c 	.word	0x2000106c

08003500 <test_002_002_execute.lto_priv.93>:
 * - [2.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void test_002_002_execute(void) {
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8003502:	4d54      	ldr	r5, [pc, #336]	; (8003654 <test_002_002_execute.lto_priv.93+0x154>)

  /* [2.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 8003504:	4e54      	ldr	r6, [pc, #336]	; (8003658 <test_002_002_execute.lto_priv.93+0x158>)
  return chThdGetSelfX()->prio;
 8003506:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8003508:	4b54      	ldr	r3, [pc, #336]	; (800365c <test_002_002_execute.lto_priv.93+0x15c>)
 800350a:	6891      	ldr	r1, [r2, #8]
 800350c:	4854      	ldr	r0, [pc, #336]	; (8003660 <test_002_002_execute.lto_priv.93+0x160>)
 800350e:	4a55      	ldr	r2, [pc, #340]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 8003510:	4c55      	ldr	r4, [pc, #340]	; (8003668 <test_002_002_execute.lto_priv.93+0x168>)
 8003512:	3905      	subs	r1, #5
  test_set_step(1);
 8003514:	2701      	movs	r7, #1
 8003516:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8003518:	f002 fa62 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800351c:	69ab      	ldr	r3, [r5, #24]
 800351e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8003520:	6899      	ldr	r1, [r3, #8]
 8003522:	4a50      	ldr	r2, [pc, #320]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 8003524:	4b51      	ldr	r3, [pc, #324]	; (800366c <test_002_002_execute.lto_priv.93+0x16c>)
 8003526:	4852      	ldr	r0, [pc, #328]	; (8003670 <test_002_002_execute.lto_priv.93+0x170>)
 8003528:	3904      	subs	r1, #4
 800352a:	f002 fa59 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800352e:	69ab      	ldr	r3, [r5, #24]
 8003530:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8003532:	6899      	ldr	r1, [r3, #8]
 8003534:	4a4b      	ldr	r2, [pc, #300]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 8003536:	4b4f      	ldr	r3, [pc, #316]	; (8003674 <test_002_002_execute.lto_priv.93+0x174>)
 8003538:	484f      	ldr	r0, [pc, #316]	; (8003678 <test_002_002_execute.lto_priv.93+0x178>)
 800353a:	3903      	subs	r1, #3
 800353c:	f002 fa50 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8003540:	69ab      	ldr	r3, [r5, #24]
 8003542:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8003544:	6899      	ldr	r1, [r3, #8]
 8003546:	4a47      	ldr	r2, [pc, #284]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 8003548:	4b4c      	ldr	r3, [pc, #304]	; (800367c <test_002_002_execute.lto_priv.93+0x17c>)
 800354a:	484d      	ldr	r0, [pc, #308]	; (8003680 <test_002_002_execute.lto_priv.93+0x180>)
 800354c:	3902      	subs	r1, #2
 800354e:	f002 fa47 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8003552:	69ab      	ldr	r3, [r5, #24]
 8003554:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8003556:	6899      	ldr	r1, [r3, #8]
 8003558:	4a42      	ldr	r2, [pc, #264]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 800355a:	4b4a      	ldr	r3, [pc, #296]	; (8003684 <test_002_002_execute.lto_priv.93+0x184>)
 800355c:	484a      	ldr	r0, [pc, #296]	; (8003688 <test_002_002_execute.lto_priv.93+0x188>)
 800355e:	3901      	subs	r1, #1
 8003560:	f002 fa3e 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8003564:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 8003566:	f7fd fdfb 	bl	8001160 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800356a:	4948      	ldr	r1, [pc, #288]	; (800368c <test_002_002_execute.lto_priv.93+0x18c>)
 800356c:	4848      	ldr	r0, [pc, #288]	; (8003690 <test_002_002_execute.lto_priv.93+0x190>)
 800356e:	f7fd f847 	bl	8000600 <_test_assert_sequence>
 8003572:	b100      	cbz	r0, 8003576 <test_002_002_execute.lto_priv.93+0x76>
 8003574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003576:	69aa      	ldr	r2, [r5, #24]

  /* [2.2.2] Creating 5 threads with decreasing priority, execution
     sequence is tested.*/
  test_set_step(2);
  {
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8003578:	4b42      	ldr	r3, [pc, #264]	; (8003684 <test_002_002_execute.lto_priv.93+0x184>)
 800357a:	6891      	ldr	r1, [r2, #8]
 800357c:	4842      	ldr	r0, [pc, #264]	; (8003688 <test_002_002_execute.lto_priv.93+0x188>)
 800357e:	4a39      	ldr	r2, [pc, #228]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 8003580:	3901      	subs	r1, #1
  test_set_step(2);
 8003582:	2702      	movs	r7, #2
 8003584:	6037      	str	r7, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8003586:	f002 fa2b 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800358a:	69ab      	ldr	r3, [r5, #24]
 800358c:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800358e:	6899      	ldr	r1, [r3, #8]
 8003590:	4a34      	ldr	r2, [pc, #208]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 8003592:	4b3a      	ldr	r3, [pc, #232]	; (800367c <test_002_002_execute.lto_priv.93+0x17c>)
 8003594:	483a      	ldr	r0, [pc, #232]	; (8003680 <test_002_002_execute.lto_priv.93+0x180>)
 8003596:	3902      	subs	r1, #2
 8003598:	f002 fa22 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800359c:	69ab      	ldr	r3, [r5, #24]
 800359e:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80035a0:	6899      	ldr	r1, [r3, #8]
 80035a2:	4a30      	ldr	r2, [pc, #192]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 80035a4:	4b33      	ldr	r3, [pc, #204]	; (8003674 <test_002_002_execute.lto_priv.93+0x174>)
 80035a6:	4834      	ldr	r0, [pc, #208]	; (8003678 <test_002_002_execute.lto_priv.93+0x178>)
 80035a8:	3903      	subs	r1, #3
 80035aa:	f002 fa19 	bl	80059e0 <chThdCreateStatic.constprop.65>
 80035ae:	69ab      	ldr	r3, [r5, #24]
 80035b0:	60a0      	str	r0, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80035b2:	6899      	ldr	r1, [r3, #8]
 80035b4:	4a2b      	ldr	r2, [pc, #172]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 80035b6:	4b2d      	ldr	r3, [pc, #180]	; (800366c <test_002_002_execute.lto_priv.93+0x16c>)
 80035b8:	482d      	ldr	r0, [pc, #180]	; (8003670 <test_002_002_execute.lto_priv.93+0x170>)
 80035ba:	3904      	subs	r1, #4
 80035bc:	f002 fa10 	bl	80059e0 <chThdCreateStatic.constprop.65>
 80035c0:	69ab      	ldr	r3, [r5, #24]
 80035c2:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80035c4:	6899      	ldr	r1, [r3, #8]
 80035c6:	4a27      	ldr	r2, [pc, #156]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 80035c8:	4b24      	ldr	r3, [pc, #144]	; (800365c <test_002_002_execute.lto_priv.93+0x15c>)
 80035ca:	4825      	ldr	r0, [pc, #148]	; (8003660 <test_002_002_execute.lto_priv.93+0x160>)
 80035cc:	3905      	subs	r1, #5
 80035ce:	f002 fa07 	bl	80059e0 <chThdCreateStatic.constprop.65>
 80035d2:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 80035d4:	f7fd fdc4 	bl	8001160 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80035d8:	492c      	ldr	r1, [pc, #176]	; (800368c <test_002_002_execute.lto_priv.93+0x18c>)
 80035da:	482d      	ldr	r0, [pc, #180]	; (8003690 <test_002_002_execute.lto_priv.93+0x190>)
 80035dc:	f7fd f810 	bl	8000600 <_test_assert_sequence>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d1c7      	bne.n	8003574 <test_002_002_execute.lto_priv.93+0x74>
 80035e4:	69aa      	ldr	r2, [r5, #24]

  /* [2.2.3] Creating 5 threads with pseudo-random priority, execution
     sequence is tested.*/
  test_set_step(3);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <test_002_002_execute.lto_priv.93+0x16c>)
 80035e8:	6891      	ldr	r1, [r2, #8]
 80035ea:	4821      	ldr	r0, [pc, #132]	; (8003670 <test_002_002_execute.lto_priv.93+0x170>)
 80035ec:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 80035ee:	3904      	subs	r1, #4
  test_set_step(3);
 80035f0:	2703      	movs	r7, #3
 80035f2:	6037      	str	r7, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80035f4:	f002 f9f4 	bl	80059e0 <chThdCreateStatic.constprop.65>
 80035f8:	69ab      	ldr	r3, [r5, #24]
 80035fa:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	4a19      	ldr	r2, [pc, #100]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 8003600:	4b16      	ldr	r3, [pc, #88]	; (800365c <test_002_002_execute.lto_priv.93+0x15c>)
 8003602:	4817      	ldr	r0, [pc, #92]	; (8003660 <test_002_002_execute.lto_priv.93+0x160>)
 8003604:	3905      	subs	r1, #5
 8003606:	f002 f9eb 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800360a:	69ab      	ldr	r3, [r5, #24]
 800360c:	6020      	str	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800360e:	6899      	ldr	r1, [r3, #8]
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 8003612:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <test_002_002_execute.lto_priv.93+0x184>)
 8003614:	481c      	ldr	r0, [pc, #112]	; (8003688 <test_002_002_execute.lto_priv.93+0x188>)
 8003616:	3901      	subs	r1, #1
 8003618:	f002 f9e2 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800361c:	69ab      	ldr	r3, [r5, #24]
 800361e:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8003620:	6899      	ldr	r1, [r3, #8]
 8003622:	4a10      	ldr	r2, [pc, #64]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 8003624:	4b15      	ldr	r3, [pc, #84]	; (800367c <test_002_002_execute.lto_priv.93+0x17c>)
 8003626:	4816      	ldr	r0, [pc, #88]	; (8003680 <test_002_002_execute.lto_priv.93+0x180>)
 8003628:	3902      	subs	r1, #2
 800362a:	f002 f9d9 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800362e:	69ab      	ldr	r3, [r5, #24]
 8003630:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8003632:	6899      	ldr	r1, [r3, #8]
 8003634:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <test_002_002_execute.lto_priv.93+0x164>)
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <test_002_002_execute.lto_priv.93+0x174>)
 8003638:	480f      	ldr	r0, [pc, #60]	; (8003678 <test_002_002_execute.lto_priv.93+0x178>)
 800363a:	3903      	subs	r1, #3
 800363c:	f002 f9d0 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8003640:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 8003642:	f7fd fd8d 	bl	8001160 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8003646:	4911      	ldr	r1, [pc, #68]	; (800368c <test_002_002_execute.lto_priv.93+0x18c>)
 8003648:	4811      	ldr	r0, [pc, #68]	; (8003690 <test_002_002_execute.lto_priv.93+0x190>)
  }
}
 800364a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800364e:	f7fc bfd7 	b.w	8000600 <_test_assert_sequence>
 8003652:	bf00      	nop
 8003654:	20001238 	.word	0x20001238
 8003658:	2000106c 	.word	0x2000106c
 800365c:	080062dc 	.word	0x080062dc
 8003660:	20000a00 	.word	0x20000a00
 8003664:	08003401 	.word	0x08003401
 8003668:	20001084 	.word	0x20001084
 800366c:	080062d4 	.word	0x080062d4
 8003670:	20000b48 	.word	0x20000b48
 8003674:	08006330 	.word	0x08006330
 8003678:	20000c90 	.word	0x20000c90
 800367c:	08006334 	.word	0x08006334
 8003680:	20000dd8 	.word	0x20000dd8
 8003684:	08006198 	.word	0x08006198
 8003688:	20000f20 	.word	0x20000f20
 800368c:	08006344 	.word	0x08006344
 8003690:	080062d8 	.word	0x080062d8
	...

080036a0 <test_004_004_execute.lto_priv.106>:
  return ch.rlist.current;
 80036a0:	4b23      	ldr	r3, [pc, #140]	; (8003730 <test_004_004_execute.lto_priv.106+0x90>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80036a2:	4824      	ldr	r0, [pc, #144]	; (8003734 <test_004_004_execute.lto_priv.106+0x94>)
  return chThdGetSelfX()->prio;
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <test_004_004_execute.lto_priv.106+0x98>)
 80036a8:	6891      	ldr	r1, [r2, #8]
 80036aa:	4a24      	ldr	r2, [pc, #144]	; (800373c <test_004_004_execute.lto_priv.106+0x9c>)
static void test_004_004_execute(void) {
 80036ac:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80036ae:	4c24      	ldr	r4, [pc, #144]	; (8003740 <test_004_004_execute.lto_priv.106+0xa0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80036b0:	3101      	adds	r1, #1
  test_set_step(1);
 80036b2:	2501      	movs	r5, #1
 80036b4:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80036b6:	f002 f993 	bl	80059e0 <chThdCreateStatic.constprop.65>
 80036ba:	4b22      	ldr	r3, [pc, #136]	; (8003744 <test_004_004_execute.lto_priv.106+0xa4>)
  test_set_step(2);
 80036bc:	2502      	movs	r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80036be:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 80036c0:	6025      	str	r5, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80036c2:	2320      	movs	r3, #32
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	4c1f      	ldr	r4, [pc, #124]	; (8003748 <test_004_004_execute.lto_priv.106+0xa8>)
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 80036ca:	2600      	movs	r6, #0
 80036cc:	e002      	b.n	80036d4 <test_004_004_execute.lto_priv.106+0x34>
  while (n > (cnt_t)0) {
 80036ce:	2d01      	cmp	r5, #1
 80036d0:	d00e      	beq.n	80036f0 <test_004_004_execute.lto_priv.106+0x50>
    }
    n--;
 80036d2:	2501      	movs	r5, #1
    if (++sp->cnt <= (cnt_t)0) {
 80036d4:	68a3      	ldr	r3, [r4, #8]
 80036d6:	3301      	adds	r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	60a3      	str	r3, [r4, #8]
 80036dc:	dcf7      	bgt.n	80036ce <test_004_004_execute.lto_priv.106+0x2e>
  thread_t *tp = tqp->next;
 80036de:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 80036e0:	6803      	ldr	r3, [r0, #0]
 80036e2:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80036e4:	605c      	str	r4, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 80036e6:	f7fd fa33 	bl	8000b50 <chSchReadyI>
  while (n > (cnt_t)0) {
 80036ea:	2d01      	cmp	r5, #1
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 80036ec:	6246      	str	r6, [r0, #36]	; 0x24
  while (n > (cnt_t)0) {
 80036ee:	d1f0      	bne.n	80036d2 <test_004_004_execute.lto_priv.106+0x32>
    chSchRescheduleS();
 80036f0:	f7fd f956 	bl	80009a0 <chSchRescheduleS>
 80036f4:	2500      	movs	r5, #0
 80036f6:	f385 8811 	msr	BASEPRI, r5
    test_wait_threads();
 80036fa:	f7fd fd31 	bl	8001160 <test_wait_threads>
 80036fe:	2320      	movs	r3, #32
 8003700:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 8003704:	68a0      	ldr	r0, [r4, #8]
 8003706:	4911      	ldr	r1, [pc, #68]	; (800374c <test_004_004_execute.lto_priv.106+0xac>)
 8003708:	f1a0 0001 	sub.w	r0, r0, #1
 800370c:	fab0 f080 	clz	r0, r0
 8003710:	0940      	lsrs	r0, r0, #5
 8003712:	f7fc ff9d 	bl	8000650 <_test_assert>
 8003716:	b110      	cbz	r0, 800371e <test_004_004_execute.lto_priv.106+0x7e>
 8003718:	f385 8811 	msr	BASEPRI, r5
 800371c:	bd70      	pop	{r4, r5, r6, pc}
 800371e:	f380 8811 	msr	BASEPRI, r0
    test_assert_sequence("A", "invalid sequence");
 8003722:	490b      	ldr	r1, [pc, #44]	; (8003750 <test_004_004_execute.lto_priv.106+0xb0>)
 8003724:	4804      	ldr	r0, [pc, #16]	; (8003738 <test_004_004_execute.lto_priv.106+0x98>)
}
 8003726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
 800372a:	f7fc bf69 	b.w	8000600 <_test_assert_sequence>
 800372e:	bf00      	nop
 8003730:	20001238 	.word	0x20001238
 8003734:	20000a00 	.word	0x20000a00
 8003738:	08006198 	.word	0x08006198
 800373c:	080033e1 	.word	0x080033e1
 8003740:	2000106c 	.word	0x2000106c
 8003744:	20001084 	.word	0x20001084
 8003748:	2000130c 	.word	0x2000130c
 800374c:	080064b4 	.word	0x080064b4
 8003750:	08006344 	.word	0x08006344
	...

08003760 <thread1.lto_priv.183>:
static THD_FUNCTION(thread1, p) {
 8003760:	b510      	push	{r4, lr}
 8003762:	2320      	movs	r3, #32
 8003764:	4604      	mov	r4, r0
 8003766:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <thread1.lto_priv.183+0x30>)
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	b120      	cbz	r0, 800377a <thread1.lto_priv.183+0x1a>
    *trp = NULL;
 8003770:	2200      	movs	r2, #0
    tp->u.rdymsg = msg;
 8003772:	6242      	str	r2, [r0, #36]	; 0x24
    *trp = NULL;
 8003774:	601a      	str	r2, [r3, #0]
    (void) chSchReadyI(tp);
 8003776:	f7fd f9eb 	bl	8000b50 <chSchReadyI>
  chSchRescheduleS();
 800377a:	f7fd f911 	bl	80009a0 <chSchRescheduleS>
 800377e:	2300      	movs	r3, #0
 8003780:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8003784:	7820      	ldrb	r0, [r4, #0]
}
 8003786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 800378a:	f7fc beb9 	b.w	8000500 <test_emit_token>
 800378e:	bf00      	nop
 8003790:	20000880 	.word	0x20000880
	...

080037a0 <thread4.lto_priv.181>:
static THD_FUNCTION(thread4, p) {
 80037a0:	b508      	push	{r3, lr}
 80037a2:	2220      	movs	r2, #32
 80037a4:	f382 8811 	msr	BASEPRI, r2
  if (bsp->sem.cnt < (cnt_t)1) {
 80037a8:	6883      	ldr	r3, [r0, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	dd05      	ble.n	80037ba <thread4.lto_priv.181+0x1a>
  chSchRescheduleS();
 80037ae:	f7fd f8f7 	bl	80009a0 <chSchRescheduleS>
 80037b2:	2300      	movs	r3, #0
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 80037ba:	f7fd fce1 	bl	8001180 <chSemSignalI>
  chSchRescheduleS();
 80037be:	f7fd f8ef 	bl	80009a0 <chSchRescheduleS>
 80037c2:	2300      	movs	r3, #0
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	bd08      	pop	{r3, pc}
 80037ca:	bf00      	nop
 80037cc:	0000      	movs	r0, r0
	...

080037d0 <thread2>:
static THD_FUNCTION(thread2, p) {
 80037d0:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 80037d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037d6:	f7fd ff5b 	bl	8001690 <chThdSleep>
 80037da:	2320      	movs	r3, #32
 80037dc:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
 80037e0:	4804      	ldr	r0, [pc, #16]	; (80037f4 <thread2+0x24>)
 80037e2:	f7fd fccd 	bl	8001180 <chSemSignalI>
  chSchRescheduleS();
 80037e6:	f7fd f8db 	bl	80009a0 <chSchRescheduleS>
 80037ea:	2300      	movs	r3, #0
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	bd08      	pop	{r3, pc}
 80037f2:	bf00      	nop
 80037f4:	2000130c 	.word	0x2000130c
	...

08003800 <test_002_001_execute.lto_priv.92>:
static void test_002_001_execute(void) {
 8003800:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8003802:	4e2b      	ldr	r6, [pc, #172]	; (80038b0 <test_002_001_execute.lto_priv.92+0xb0>)
 8003804:	2301      	movs	r3, #1
 8003806:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 800380a:	6033      	str	r3, [r6, #0]
 800380c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleep(100);
 800380e:	2064      	movs	r0, #100	; 0x64
 8003810:	f7fd ff3e 	bl	8001690 <chThdSleep>
    test_assert_time_window(time + 100,
 8003814:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8003818:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800381c:	f002 fc38 	bl	8006090 <_test_assert_time_window.constprop.2>
 8003820:	b100      	cbz	r0, 8003824 <test_002_001_execute.lto_priv.92+0x24>
 8003822:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 8003824:	2302      	movs	r3, #2
 8003826:	6033      	str	r3, [r6, #0]
 8003828:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 800382a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800382e:	f7fd ff2f 	bl	8001690 <chThdSleep>
    test_assert_time_window(time + US2ST(100000),
 8003832:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8003836:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 800383a:	f002 fc29 	bl	8006090 <_test_assert_time_window.constprop.2>
 800383e:	2800      	cmp	r0, #0
 8003840:	d1ef      	bne.n	8003822 <test_002_001_execute.lto_priv.92+0x22>
  test_set_step(3);
 8003842:	2303      	movs	r3, #3
 8003844:	6033      	str	r3, [r6, #0]
 8003846:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
 8003848:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800384c:	f7fd ff20 	bl	8001690 <chThdSleep>
    test_assert_time_window(time + MS2ST(100),
 8003850:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8003854:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8003858:	f002 fc1a 	bl	8006090 <_test_assert_time_window.constprop.2>
 800385c:	2800      	cmp	r0, #0
 800385e:	d1e0      	bne.n	8003822 <test_002_001_execute.lto_priv.92+0x22>
  test_set_step(4);
 8003860:	2304      	movs	r3, #4
 8003862:	6033      	str	r3, [r6, #0]
 8003864:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
 8003866:	f242 7010 	movw	r0, #10000	; 0x2710
 800386a:	f7fd ff11 	bl	8001690 <chThdSleep>
    test_assert_time_window(time + S2ST(1),
 800386e:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 8003872:	4608      	mov	r0, r1
 8003874:	3010      	adds	r0, #16
 8003876:	3113      	adds	r1, #19
 8003878:	f002 fc0a 	bl	8006090 <_test_assert_time_window.constprop.2>
 800387c:	2800      	cmp	r0, #0
 800387e:	d1d0      	bne.n	8003822 <test_002_001_execute.lto_priv.92+0x22>
  test_set_step(5);
 8003880:	2305      	movs	r3, #5
 8003882:	6033      	str	r3, [r6, #0]
 8003884:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8003886:	2320      	movs	r3, #32
    chThdSleepUntil(time + 100);
 8003888:	f106 0464 	add.w	r4, r6, #100	; 0x64
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	6a69      	ldr	r1, [r5, #36]	; 0x24
  if (time > (systime_t)0) {
 8003892:	1a61      	subs	r1, r4, r1
 8003894:	d002      	beq.n	800389c <test_002_001_execute.lto_priv.92+0x9c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8003896:	2008      	movs	r0, #8
 8003898:	f7fd fd4a 	bl	8001330 <chSchGoSleepTimeoutS>
 800389c:	2300      	movs	r3, #0
 800389e:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(time + 100,
 80038a2:	f106 0167 	add.w	r1, r6, #103	; 0x67
 80038a6:	4620      	mov	r0, r4
}
 80038a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(time + 100,
 80038ac:	f002 bbf0 	b.w	8006090 <_test_assert_time_window.constprop.2>
 80038b0:	2000106c 	.word	0x2000106c
	...

080038c0 <test_004_001_execute.lto_priv.100>:
static void test_004_001_execute(void) {
 80038c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    msg = chSemWait(&sem1);
 80038c4:	4c2b      	ldr	r4, [pc, #172]	; (8003974 <test_004_001_execute.lto_priv.100+0xb4>)
  test_set_step(1);
 80038c6:	4e2c      	ldr	r6, [pc, #176]	; (8003978 <test_004_001_execute.lto_priv.100+0xb8>)
 80038c8:	2301      	movs	r3, #1
    msg = chSemWait(&sem1);
 80038ca:	4620      	mov	r0, r4
  test_set_step(1);
 80038cc:	6033      	str	r3, [r6, #0]
    msg = chSemWait(&sem1);
 80038ce:	f7fd f917 	bl	8000b00 <chSemWait>
 80038d2:	2520      	movs	r5, #32
 80038d4:	4607      	mov	r7, r0
 80038d6:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 80038da:	68a0      	ldr	r0, [r4, #8]
 80038dc:	4927      	ldr	r1, [pc, #156]	; (800397c <test_004_001_execute.lto_priv.100+0xbc>)
 80038de:	fab0 f080 	clz	r0, r0
 80038e2:	0940      	lsrs	r0, r0, #5
 80038e4:	f7fc feb4 	bl	8000650 <_test_assert>
 80038e8:	b120      	cbz	r0, 80038f4 <test_004_001_execute.lto_priv.100+0x34>
 80038ea:	2300      	movs	r3, #0
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038f4:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
 80038f8:	fab7 f087 	clz	r0, r7
 80038fc:	0940      	lsrs	r0, r0, #5
 80038fe:	4920      	ldr	r1, [pc, #128]	; (8003980 <test_004_001_execute.lto_priv.100+0xc0>)
 8003900:	f7fc fea6 	bl	8000650 <_test_assert>
 8003904:	4607      	mov	r7, r0
 8003906:	b108      	cbz	r0, 800390c <test_004_001_execute.lto_priv.100+0x4c>
 8003908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(2);
 800390c:	f04f 0902 	mov.w	r9, #2
    chSemSignal(&sem1);
 8003910:	4620      	mov	r0, r4
  test_set_step(2);
 8003912:	f8c6 9000 	str.w	r9, [r6]
    chSemSignal(&sem1);
 8003916:	f7fd f89b 	bl	8000a50 <chSemSignal>
 800391a:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 800391e:	68a0      	ldr	r0, [r4, #8]
 8003920:	4916      	ldr	r1, [pc, #88]	; (800397c <test_004_001_execute.lto_priv.100+0xbc>)
 8003922:	f1a0 0001 	sub.w	r0, r0, #1
 8003926:	fab0 f080 	clz	r0, r0
 800392a:	0940      	lsrs	r0, r0, #5
 800392c:	f7fc fe90 	bl	8000650 <_test_assert>
 8003930:	4680      	mov	r8, r0
 8003932:	b118      	cbz	r0, 800393c <test_004_001_execute.lto_priv.100+0x7c>
 8003934:	f387 8811 	msr	BASEPRI, r7
 8003938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800393c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8003940:	2303      	movs	r3, #3
    chSemReset(&sem1, 2);
 8003942:	4649      	mov	r1, r9
 8003944:	4620      	mov	r0, r4
  test_set_step(3);
 8003946:	6033      	str	r3, [r6, #0]
    chSemReset(&sem1, 2);
 8003948:	f7fd fc42 	bl	80011d0 <chSemReset>
 800394c:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8003950:	68a0      	ldr	r0, [r4, #8]
 8003952:	490a      	ldr	r1, [pc, #40]	; (800397c <test_004_001_execute.lto_priv.100+0xbc>)
 8003954:	f1a0 0002 	sub.w	r0, r0, #2
 8003958:	fab0 f080 	clz	r0, r0
 800395c:	0940      	lsrs	r0, r0, #5
 800395e:	f7fc fe77 	bl	8000650 <_test_assert>
 8003962:	b910      	cbnz	r0, 800396a <test_004_001_execute.lto_priv.100+0xaa>
 8003964:	f380 8811 	msr	BASEPRI, r0
 8003968:	e7ce      	b.n	8003908 <test_004_001_execute.lto_priv.100+0x48>
 800396a:	f388 8811 	msr	BASEPRI, r8
 800396e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003972:	bf00      	nop
 8003974:	2000130c 	.word	0x2000130c
 8003978:	2000106c 	.word	0x2000106c
 800397c:	08006488 	.word	0x08006488
 8003980:	0800649c 	.word	0x0800649c
	...

08003990 <test_004_001_teardown.lto_priv.99>:
  chSemReset(&sem1, 0);
 8003990:	2100      	movs	r1, #0
 8003992:	4801      	ldr	r0, [pc, #4]	; (8003998 <test_004_001_teardown.lto_priv.99+0x8>)
 8003994:	f7fd bc1c 	b.w	80011d0 <chSemReset>
 8003998:	2000130c 	.word	0x2000130c
 800399c:	00000000 	.word	0x00000000

080039a0 <test_003_001_execute.lto_priv.97>:
}

static void test_003_001_execute(void) {
 80039a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80039a4:	4d30      	ldr	r5, [pc, #192]	; (8003a68 <test_003_001_execute.lto_priv.97+0xc8>)
  msg_t msg;

  /* [3.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 80039a6:	4f31      	ldr	r7, [pc, #196]	; (8003a6c <test_003_001_execute.lto_priv.97+0xcc>)
  return chThdGetSelfX()->prio;
 80039a8:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 80039aa:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <test_003_001_execute.lto_priv.97+0xd0>)
 80039ac:	6891      	ldr	r1, [r2, #8]
 80039ae:	4831      	ldr	r0, [pc, #196]	; (8003a74 <test_003_001_execute.lto_priv.97+0xd4>)
 80039b0:	4a31      	ldr	r2, [pc, #196]	; (8003a78 <test_003_001_execute.lto_priv.97+0xd8>)
 80039b2:	3901      	subs	r1, #1
  test_set_step(1);
 80039b4:	2401      	movs	r4, #1
 80039b6:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 80039b8:	f002 f812 	bl	80059e0 <chThdCreateStatic.constprop.65>
 80039bc:	4b2f      	ldr	r3, [pc, #188]	; (8003a7c <test_003_001_execute.lto_priv.97+0xdc>)
 80039be:	2620      	movs	r6, #32
 80039c0:	6018      	str	r0, [r3, #0]
 80039c2:	f386 8811 	msr	BASEPRI, r6
  return ch.rlist.current;
 80039c6:	69ab      	ldr	r3, [r5, #24]
  *trp = tp;
 80039c8:	4c2d      	ldr	r4, [pc, #180]	; (8003a80 <test_003_001_execute.lto_priv.97+0xe0>)
  tp->u.wttrp = trp;
 80039ca:	625c      	str	r4, [r3, #36]	; 0x24
    chSchGoSleepS(newstate);
 80039cc:	2003      	movs	r0, #3
  *trp = tp;
 80039ce:	6023      	str	r3, [r4, #0]
 80039d0:	f7fd f85e 	bl	8000a90 <chSchGoSleepS>
  return currp->u.rdymsg;
 80039d4:	69aa      	ldr	r2, [r5, #24]
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 80039dc:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 80039e0:	6820      	ldr	r0, [r4, #0]
 80039e2:	4928      	ldr	r1, [pc, #160]	; (8003a84 <test_003_001_execute.lto_priv.97+0xe4>)
 80039e4:	fab0 f080 	clz	r0, r0
 80039e8:	0940      	lsrs	r0, r0, #5
 80039ea:	f7fc fe31 	bl	8000650 <_test_assert>
 80039ee:	b108      	cbz	r0, 80039f4 <test_003_001_execute.lto_priv.97+0x54>
 80039f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 80039f4:	fab8 f088 	clz	r0, r8
 80039f8:	0940      	lsrs	r0, r0, #5
 80039fa:	4923      	ldr	r1, [pc, #140]	; (8003a88 <test_003_001_execute.lto_priv.97+0xe8>)
 80039fc:	f7fc fe28 	bl	8000650 <_test_assert>
 8003a00:	4680      	mov	r8, r0
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d1f4      	bne.n	80039f0 <test_003_001_execute.lto_priv.97+0x50>
    test_wait_threads();
 8003a06:	f7fd fbab 	bl	8001160 <test_wait_threads>
  }

  /* [3.1.2] The function chThdSuspendTimeoutS() is invoked, the thread
     is not resumed so a timeout must occur. On return the message and
     the state of the reference are tested.*/
  test_set_step(2);
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	f386 8811 	msr	BASEPRI, r6
 8003a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a16:	69ab      	ldr	r3, [r5, #24]
 8003a18:	6a55      	ldr	r5, [r2, #36]	; 0x24
  tp->u.wttrp = trp;
 8003a1a:	625c      	str	r4, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8003a1c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003a20:	2003      	movs	r0, #3
  *trp = tp;
 8003a22:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8003a24:	f7fd fc84 	bl	8001330 <chSchGoSleepTimeoutS>
 8003a28:	4606      	mov	r6, r0
 8003a2a:	f388 8811 	msr	BASEPRI, r8
  {
    chSysLock();
    time = chVTGetSystemTimeX();
    msg = chThdSuspendTimeoutS(&tr1, MS2ST(1000));
    chSysUnlock();
    test_assert_time_window(time + MS2ST(1000),
 8003a2e:	f505 511c 	add.w	r1, r5, #9984	; 0x2700
 8003a32:	4608      	mov	r0, r1
 8003a34:	3010      	adds	r0, #16
 8003a36:	3113      	adds	r1, #19
 8003a38:	f002 fb2a 	bl	8006090 <_test_assert_time_window.constprop.2>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d1d7      	bne.n	80039f0 <test_003_001_execute.lto_priv.97+0x50>
                            time + MS2ST(1000) + CH_CFG_ST_TIMEDELTA + 1,
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
 8003a40:	6820      	ldr	r0, [r4, #0]
 8003a42:	4910      	ldr	r1, [pc, #64]	; (8003a84 <test_003_001_execute.lto_priv.97+0xe4>)
 8003a44:	fab0 f080 	clz	r0, r0
 8003a48:	0940      	lsrs	r0, r0, #5
 8003a4a:	f7fc fe01 	bl	8000650 <_test_assert>
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d1ce      	bne.n	80039f0 <test_003_001_execute.lto_priv.97+0x50>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8003a52:	f1a6 30ff 	sub.w	r0, r6, #4294967295	; 0xffffffff
 8003a56:	fab0 f080 	clz	r0, r0
 8003a5a:	0940      	lsrs	r0, r0, #5
 8003a5c:	490a      	ldr	r1, [pc, #40]	; (8003a88 <test_003_001_execute.lto_priv.97+0xe8>)
  }
}
 8003a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8003a62:	f7fc bdf5 	b.w	8000650 <_test_assert>
 8003a66:	bf00      	nop
 8003a68:	20001238 	.word	0x20001238
 8003a6c:	2000106c 	.word	0x2000106c
 8003a70:	08006198 	.word	0x08006198
 8003a74:	20000a00 	.word	0x20000a00
 8003a78:	08003761 	.word	0x08003761
 8003a7c:	20001084 	.word	0x20001084
 8003a80:	20000880 	.word	0x20000880
 8003a84:	0800647c 	.word	0x0800647c
 8003a88:	0800649c 	.word	0x0800649c
 8003a8c:	00000000 	.word	0x00000000

08003a90 <test_002_004_execute.lto_priv.95>:
 * - [2.4.3] Raising thread priority above the boosted level.
 * - [2.4.4] Restoring original conditions.
 * .
 */

static void test_002_004_execute(void) {
 8003a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a94:	4d2f      	ldr	r5, [pc, #188]	; (8003b54 <test_002_004_execute.lto_priv.95+0xc4>)
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
  }

  /* [2.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8003a96:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b68 <test_002_004_execute.lto_priv.95+0xd8>
 8003a9a:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8003a9c:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
 8003a9e:	1ca6      	adds	r6, r4, #2
  {
    p1 = chThdSetPriority(prio + 1);
 8003aa0:	1c67      	adds	r7, r4, #1
    chThdGetSelfX()->prio += 2;
 8003aa2:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8003aa4:	4638      	mov	r0, r7
  test_set_step(2);
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 8003aac:	f7fc ff88 	bl	80009c0 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8003ab0:	1b00      	subs	r0, r0, r4
 8003ab2:	fab0 f080 	clz	r0, r0
 8003ab6:	4928      	ldr	r1, [pc, #160]	; (8003b58 <test_002_004_execute.lto_priv.95+0xc8>)
 8003ab8:	0940      	lsrs	r0, r0, #5
 8003aba:	f7fc fdc9 	bl	8000650 <_test_assert>
 8003abe:	b108      	cbz	r0, 8003ac4 <test_002_004_execute.lto_priv.95+0x34>
 8003ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8003ac4:	69ab      	ldr	r3, [r5, #24]
 8003ac6:	4925      	ldr	r1, [pc, #148]	; (8003b5c <test_002_004_execute.lto_priv.95+0xcc>)
 8003ac8:	6898      	ldr	r0, [r3, #8]
 8003aca:	1b80      	subs	r0, r0, r6
 8003acc:	fab0 f080 	clz	r0, r0
 8003ad0:	0940      	lsrs	r0, r0, #5
 8003ad2:	f7fc fdbd 	bl	8000650 <_test_assert>
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d1f2      	bne.n	8003ac0 <test_002_004_execute.lto_priv.95+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 8003ada:	69ab      	ldr	r3, [r5, #24]
 8003adc:	4920      	ldr	r1, [pc, #128]	; (8003b60 <test_002_004_execute.lto_priv.95+0xd0>)
 8003ade:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003ae0:	1bc0      	subs	r0, r0, r7
 8003ae2:	fab0 f080 	clz	r0, r0
 8003ae6:	0940      	lsrs	r0, r0, #5
 8003ae8:	f7fc fdb2 	bl	8000650 <_test_assert>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d1e7      	bne.n	8003ac0 <test_002_004_execute.lto_priv.95+0x30>
  }

  /* [2.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
  {
    p1 = chThdSetPriority(prio + 3);
 8003af0:	1ce6      	adds	r6, r4, #3
  test_set_step(3);
 8003af2:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
 8003af4:	4630      	mov	r0, r6
  test_set_step(3);
 8003af6:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
 8003afa:	f7fc ff61 	bl	80009c0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8003afe:	1a38      	subs	r0, r7, r0
 8003b00:	fab0 f080 	clz	r0, r0
 8003b04:	4914      	ldr	r1, [pc, #80]	; (8003b58 <test_002_004_execute.lto_priv.95+0xc8>)
 8003b06:	0940      	lsrs	r0, r0, #5
 8003b08:	f7fc fda2 	bl	8000650 <_test_assert>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d1d7      	bne.n	8003ac0 <test_002_004_execute.lto_priv.95+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 8003b10:	69ab      	ldr	r3, [r5, #24]
 8003b12:	4912      	ldr	r1, [pc, #72]	; (8003b5c <test_002_004_execute.lto_priv.95+0xcc>)
 8003b14:	6898      	ldr	r0, [r3, #8]
 8003b16:	1b80      	subs	r0, r0, r6
 8003b18:	fab0 f080 	clz	r0, r0
 8003b1c:	0940      	lsrs	r0, r0, #5
 8003b1e:	f7fc fd97 	bl	8000650 <_test_assert>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d1cc      	bne.n	8003ac0 <test_002_004_execute.lto_priv.95+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8003b26:	69ab      	ldr	r3, [r5, #24]
 8003b28:	490e      	ldr	r1, [pc, #56]	; (8003b64 <test_002_004_execute.lto_priv.95+0xd4>)
 8003b2a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b2c:	1b80      	subs	r0, r0, r6
 8003b2e:	fab0 f080 	clz	r0, r0
 8003b32:	0940      	lsrs	r0, r0, #5
 8003b34:	f7fc fd8c 	bl	8000650 <_test_assert>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d1c1      	bne.n	8003ac0 <test_002_004_execute.lto_priv.95+0x30>
  }

  /* [2.4.4] Restoring original conditions.*/
  test_set_step(4);
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	f8c8 3000 	str.w	r3, [r8]
 8003b42:	2320      	movs	r3, #32
 8003b44:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8003b48:	69ab      	ldr	r3, [r5, #24]
  {
    chSysLock();
    chThdGetSelfX()->prio = prio;
 8003b4a:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 8003b4c:	63dc      	str	r4, [r3, #60]	; 0x3c
 8003b4e:	f380 8811 	msr	BASEPRI, r0
 8003b52:	e7b5      	b.n	8003ac0 <test_002_004_execute.lto_priv.95+0x30>
 8003b54:	20001238 	.word	0x20001238
 8003b58:	080063f4 	.word	0x080063f4
 8003b5c:	08006418 	.word	0x08006418
 8003b60:	08006434 	.word	0x08006434
 8003b64:	0800645c 	.word	0x0800645c
 8003b68:	2000106c 	.word	0x2000106c
 8003b6c:	00000000 	.word	0x00000000

08003b70 <test_002_003_execute.lto_priv.94>:
static void test_002_003_execute(void) {
 8003b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b74:	4e1c      	ldr	r6, [pc, #112]	; (8003be8 <test_002_003_execute.lto_priv.94+0x78>)
  test_set_step(1);
 8003b76:	4f1d      	ldr	r7, [pc, #116]	; (8003bec <test_002_003_execute.lto_priv.94+0x7c>)
  return chThdGetSelfX()->prio;
 8003b78:	69b3      	ldr	r3, [r6, #24]
 8003b7a:	689c      	ldr	r4, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8003b7c:	1c65      	adds	r5, r4, #1
  test_set_step(1);
 8003b7e:	2301      	movs	r3, #1
    p1 = chThdSetPriority(prio + 1);
 8003b80:	4628      	mov	r0, r5
  test_set_step(1);
 8003b82:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(prio + 1);
 8003b84:	f7fc ff1c 	bl	80009c0 <chThdSetPriority>
 8003b88:	4680      	mov	r8, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 8003b8a:	1b00      	subs	r0, r0, r4
 8003b8c:	fab0 f080 	clz	r0, r0
 8003b90:	0940      	lsrs	r0, r0, #5
 8003b92:	4917      	ldr	r1, [pc, #92]	; (8003bf0 <test_002_003_execute.lto_priv.94+0x80>)
 8003b94:	f7fc fd5c 	bl	8000650 <_test_assert>
 8003b98:	b108      	cbz	r0, 8003b9e <test_002_003_execute.lto_priv.94+0x2e>
 8003b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b9e:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8003ba0:	4914      	ldr	r1, [pc, #80]	; (8003bf4 <test_002_003_execute.lto_priv.94+0x84>)
 8003ba2:	6898      	ldr	r0, [r3, #8]
 8003ba4:	1b40      	subs	r0, r0, r5
 8003ba6:	fab0 f080 	clz	r0, r0
 8003baa:	0940      	lsrs	r0, r0, #5
 8003bac:	f7fc fd50 	bl	8000650 <_test_assert>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d1f2      	bne.n	8003b9a <test_002_003_execute.lto_priv.94+0x2a>
  test_set_step(2);
 8003bb4:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
 8003bb6:	4640      	mov	r0, r8
  test_set_step(2);
 8003bb8:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(p1);
 8003bba:	f7fc ff01 	bl	80009c0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8003bbe:	1a28      	subs	r0, r5, r0
 8003bc0:	fab0 f080 	clz	r0, r0
 8003bc4:	490a      	ldr	r1, [pc, #40]	; (8003bf0 <test_002_003_execute.lto_priv.94+0x80>)
 8003bc6:	0940      	lsrs	r0, r0, #5
 8003bc8:	f7fc fd42 	bl	8000650 <_test_assert>
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	d1e4      	bne.n	8003b9a <test_002_003_execute.lto_priv.94+0x2a>
 8003bd0:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8003bd2:	4908      	ldr	r1, [pc, #32]	; (8003bf4 <test_002_003_execute.lto_priv.94+0x84>)
 8003bd4:	6898      	ldr	r0, [r3, #8]
 8003bd6:	1b00      	subs	r0, r0, r4
 8003bd8:	fab0 f080 	clz	r0, r0
 8003bdc:	0940      	lsrs	r0, r0, #5
}
 8003bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8003be2:	f7fc bd35 	b.w	8000650 <_test_assert>
 8003be6:	bf00      	nop
 8003be8:	20001238 	.word	0x20001238
 8003bec:	2000106c 	.word	0x2000106c
 8003bf0:	080063f4 	.word	0x080063f4
 8003bf4:	08006418 	.word	0x08006418
	...

08003c00 <test_001_002_execute.lto_priv.89>:
static void test_001_002_execute(void) {
 8003c00:	b510      	push	{r4, lr}
  test_set_step(1);
 8003c02:	4c31      	ldr	r4, [pc, #196]	; (8003cc8 <test_001_002_execute.lto_priv.89+0xc8>)
 8003c04:	2301      	movs	r3, #1
static void test_001_002_execute(void) {
 8003c06:	b086      	sub	sp, #24
  test_set_step(1);
 8003c08:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c0a:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 8003c0e:	b91b      	cbnz	r3, 8003c18 <test_001_002_execute.lto_priv.89+0x18>
 8003c10:	f7fd fd5e 	bl	80016d0 <chSysGetStatusAndLockX.part.1>
 8003c14:	f7fd fd4c 	bl	80016b0 <chSysRestoreStatusX.part.2>
  test_set_step(2);
 8003c18:	2302      	movs	r3, #2
 8003c1a:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003c1c:	2320      	movs	r3, #32
 8003c1e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c22:	f3ef 8311 	mrs	r3, BASEPRI
 8003c26:	b91b      	cbnz	r3, 8003c30 <test_001_002_execute.lto_priv.89+0x30>
 8003c28:	f7fd fd52 	bl	80016d0 <chSysGetStatusAndLockX.part.1>
 8003c2c:	f7fd fd40 	bl	80016b0 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003c30:	2300      	movs	r3, #0
 8003c32:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8003c36:	2303      	movs	r3, #3
 8003c38:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c3a:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8003c3e:	b913      	cbnz	r3, 8003c46 <test_001_002_execute.lto_priv.89+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003c40:	2320      	movs	r3, #32
 8003c42:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c46:	f3ef 8311 	mrs	r3, BASEPRI
 8003c4a:	b913      	cbnz	r3, 8003c52 <test_001_002_execute.lto_priv.89+0x52>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	2300      	movs	r3, #0
 8003c54:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8003c58:	2204      	movs	r2, #4
 8003c5a:	6022      	str	r2, [r4, #0]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c62:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8003c66:	b10a      	cbz	r2, 8003c6c <test_001_002_execute.lto_priv.89+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003c68:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8003c70:	b113      	cbz	r3, 8003c78 <test_001_002_execute.lto_priv.89+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003c72:	2300      	movs	r3, #0
 8003c74:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 8003c78:	2205      	movs	r2, #5
  vtp->func = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	9304      	str	r3, [sp, #16]
 8003c7e:	6022      	str	r2, [r4, #0]
 8003c80:	2320      	movs	r3, #32
 8003c82:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8003c86:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8003c88:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
 8003c8a:	b113      	cbz	r3, 8003c92 <test_001_002_execute.lto_priv.89+0x92>
    chVTDoResetI(vtp);
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f7fd fad7 	bl	8001240 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8003c92:	4620      	mov	r0, r4
 8003c94:	2300      	movs	r3, #0
 8003c96:	4a0d      	ldr	r2, [pc, #52]	; (8003ccc <test_001_002_execute.lto_priv.89+0xcc>)
 8003c98:	2101      	movs	r1, #1
 8003c9a:	f7fd fb09 	bl	80012b0 <chVTDoSetI>
 8003c9e:	2400      	movs	r4, #0
 8003ca0:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
 8003ca4:	200a      	movs	r0, #10
 8003ca6:	f7fd fcf3 	bl	8001690 <chThdSleep>
 8003caa:	2320      	movs	r3, #32
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	9804      	ldr	r0, [sp, #16]
 8003cb2:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8003cb6:	fab0 f080 	clz	r0, r0
 8003cba:	4905      	ldr	r1, [pc, #20]	; (8003cd0 <test_001_002_execute.lto_priv.89+0xd0>)
 8003cbc:	0940      	lsrs	r0, r0, #5
 8003cbe:	f7fc fcc7 	bl	8000650 <_test_assert>
}
 8003cc2:	b006      	add	sp, #24
 8003cc4:	bd10      	pop	{r4, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2000106c 	.word	0x2000106c
 8003ccc:	08003ce1 	.word	0x08003ce1
 8003cd0:	080063e0 	.word	0x080063e0
	...

08003ce0 <vtcb>:
static void vtcb(void *p) {
 8003ce0:	b508      	push	{r3, lr}
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f382 8811 	msr	BASEPRI, r2
 8003cee:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8003cf6:	b91b      	cbnz	r3, 8003d00 <vtcb+0x20>
 8003cf8:	f7fd fcea 	bl	80016d0 <chSysGetStatusAndLockX.part.1>
 8003cfc:	f7fd fcd8 	bl	80016b0 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003d00:	2300      	movs	r3, #0
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	bd08      	pop	{r3, pc}
	...

08003d10 <test_001_001_execute.lto_priv.88>:
static void test_001_001_execute(void) {
 8003d10:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8003d12:	4d24      	ldr	r5, [pc, #144]	; (8003da4 <test_001_001_execute.lto_priv.88+0x94>)
 8003d14:	2001      	movs	r0, #1
 8003d16:	6028      	str	r0, [r5, #0]
 8003d18:	2420      	movs	r4, #32
 8003d1a:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 8003d1e:	f7fd fcdf 	bl	80016e0 <chSysIntegrityCheckI>
 8003d22:	2300      	movs	r3, #0
 8003d24:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 8003d28:	f080 0001 	eor.w	r0, r0, #1
 8003d2c:	b2c0      	uxtb	r0, r0
 8003d2e:	491e      	ldr	r1, [pc, #120]	; (8003da8 <test_001_001_execute.lto_priv.88+0x98>)
 8003d30:	f7fc fc8e 	bl	8000650 <_test_assert>
 8003d34:	b100      	cbz	r0, 8003d38 <test_001_001_execute.lto_priv.88+0x28>
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	4606      	mov	r6, r0
  test_set_step(2);
 8003d3a:	2002      	movs	r0, #2
 8003d3c:	6028      	str	r0, [r5, #0]
 8003d3e:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8003d42:	f7fd fccd 	bl	80016e0 <chSysIntegrityCheckI>
 8003d46:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "virtual timers list check failed");
 8003d4a:	f080 0001 	eor.w	r0, r0, #1
 8003d4e:	b2c0      	uxtb	r0, r0
 8003d50:	4916      	ldr	r1, [pc, #88]	; (8003dac <test_001_001_execute.lto_priv.88+0x9c>)
 8003d52:	f7fc fc7d 	bl	8000650 <_test_assert>
 8003d56:	4606      	mov	r6, r0
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d1ec      	bne.n	8003d36 <test_001_001_execute.lto_priv.88+0x26>
  test_set_step(3);
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8003d64:	2004      	movs	r0, #4
 8003d66:	f7fd fcbb 	bl	80016e0 <chSysIntegrityCheckI>
 8003d6a:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "registry list check failed");
 8003d6e:	f080 0001 	eor.w	r0, r0, #1
 8003d72:	b2c0      	uxtb	r0, r0
 8003d74:	490e      	ldr	r1, [pc, #56]	; (8003db0 <test_001_001_execute.lto_priv.88+0xa0>)
 8003d76:	f7fc fc6b 	bl	8000650 <_test_assert>
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d1da      	bne.n	8003d36 <test_001_001_execute.lto_priv.88+0x26>
  test_set_step(4);
 8003d80:	2304      	movs	r3, #4
 8003d82:	602b      	str	r3, [r5, #0]
 8003d84:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 8003d88:	2008      	movs	r0, #8
 8003d8a:	f7fd fca9 	bl	80016e0 <chSysIntegrityCheckI>
 8003d8e:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "port layer check failed");
 8003d92:	f080 0001 	eor.w	r0, r0, #1
 8003d96:	b2c0      	uxtb	r0, r0
 8003d98:	4906      	ldr	r1, [pc, #24]	; (8003db4 <test_001_001_execute.lto_priv.88+0xa4>)
}
 8003d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 8003d9e:	f7fc bc57 	b.w	8000650 <_test_assert>
 8003da2:	bf00      	nop
 8003da4:	2000106c 	.word	0x2000106c
 8003da8:	08006370 	.word	0x08006370
 8003dac:	08006388 	.word	0x08006388
 8003db0:	080063ac 	.word	0x080063ac
 8003db4:	080063c8 	.word	0x080063c8
	...

08003dc0 <test_wait_tick>:

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8003dc0:	b508      	push	{r3, lr}

  chThdSleep(1);
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	f7fd fc64 	bl	8001690 <chThdSleep>
 8003dc8:	2320      	movs	r3, #32
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8003dd6:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 8003dda:	bd08      	pop	{r3, pc}
 8003ddc:	0000      	movs	r0, r0
	...

08003de0 <test_004_003_execute.lto_priv.104>:
static void test_004_003_execute(void) {
 8003de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8003de4:	4d4b      	ldr	r5, [pc, #300]	; (8003f14 <test_004_003_execute.lto_priv.104+0x134>)
 8003de6:	2001      	movs	r0, #1
 8003de8:	6028      	str	r0, [r5, #0]
 8003dea:	2320      	movs	r3, #32
 8003dec:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8003df0:	4c49      	ldr	r4, [pc, #292]	; (8003f18 <test_004_003_execute.lto_priv.104+0x138>)
 8003df2:	68a3      	ldr	r3, [r4, #8]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	bf5c      	itt	pl
 8003df8:	60a3      	strpl	r3, [r4, #8]
 8003dfa:	2000      	movpl	r0, #0
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8003e02:	4946      	ldr	r1, [pc, #280]	; (8003f1c <test_004_003_execute.lto_priv.104+0x13c>)
 8003e04:	f7fc fc24 	bl	8000650 <_test_assert>
 8003e08:	b108      	cbz	r0, 8003e0e <test_004_003_execute.lto_priv.104+0x2e>
 8003e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return (bool)(tqp->next == (const thread_t *)tqp);
 8003e0e:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003e10:	4943      	ldr	r1, [pc, #268]	; (8003f20 <test_004_003_execute.lto_priv.104+0x140>)
 8003e12:	1b00      	subs	r0, r0, r4
 8003e14:	fab0 f080 	clz	r0, r0
 8003e18:	0940      	lsrs	r0, r0, #5
 8003e1a:	f7fc fc19 	bl	8000650 <_test_assert>
 8003e1e:	2800      	cmp	r0, #0
 8003e20:	d1f3      	bne.n	8003e0a <test_004_003_execute.lto_priv.104+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8003e22:	68a0      	ldr	r0, [r4, #8]
 8003e24:	493f      	ldr	r1, [pc, #252]	; (8003f24 <test_004_003_execute.lto_priv.104+0x144>)
 8003e26:	fab0 f080 	clz	r0, r0
 8003e2a:	0940      	lsrs	r0, r0, #5
 8003e2c:	f7fc fc10 	bl	8000650 <_test_assert>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d1e9      	bne.n	8003e0a <test_004_003_execute.lto_priv.104+0x2a>
  return ch.rlist.current;
 8003e36:	493c      	ldr	r1, [pc, #240]	; (8003f28 <test_004_003_execute.lto_priv.104+0x148>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003e38:	4a3c      	ldr	r2, [pc, #240]	; (8003f2c <test_004_003_execute.lto_priv.104+0x14c>)
  return chThdGetSelfX()->prio;
 8003e3a:	6989      	ldr	r1, [r1, #24]
 8003e3c:	483c      	ldr	r0, [pc, #240]	; (8003f30 <test_004_003_execute.lto_priv.104+0x150>)
 8003e3e:	6889      	ldr	r1, [r1, #8]
  test_set_step(2);
 8003e40:	2602      	movs	r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003e42:	3901      	subs	r1, #1
  test_set_step(2);
 8003e44:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003e46:	f001 fdcb 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8003e4a:	4b3a      	ldr	r3, [pc, #232]	; (8003f34 <test_004_003_execute.lto_priv.104+0x154>)
 8003e4c:	6018      	str	r0, [r3, #0]
    msg = chSemWaitTimeout(&sem1, MS2ST(500));
 8003e4e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003e52:	f001 fe15 	bl	8005a80 <chSemWaitTimeout.constprop.61>
 8003e56:	4606      	mov	r6, r0
    test_wait_threads();
 8003e58:	f7fd f982 	bl	8001160 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 8003e5c:	fab6 f086 	clz	r0, r6
 8003e60:	0940      	lsrs	r0, r0, #5
 8003e62:	492e      	ldr	r1, [pc, #184]	; (8003f1c <test_004_003_execute.lto_priv.104+0x13c>)
 8003e64:	f7fc fbf4 	bl	8000650 <_test_assert>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d1ce      	bne.n	8003e0a <test_004_003_execute.lto_priv.104+0x2a>
 8003e6c:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003e6e:	492c      	ldr	r1, [pc, #176]	; (8003f20 <test_004_003_execute.lto_priv.104+0x140>)
 8003e70:	1b00      	subs	r0, r0, r4
 8003e72:	fab0 f080 	clz	r0, r0
 8003e76:	0940      	lsrs	r0, r0, #5
 8003e78:	f7fc fbea 	bl	8000650 <_test_assert>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d1c4      	bne.n	8003e0a <test_004_003_execute.lto_priv.104+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8003e80:	68a0      	ldr	r0, [r4, #8]
 8003e82:	4928      	ldr	r1, [pc, #160]	; (8003f24 <test_004_003_execute.lto_priv.104+0x144>)
 8003e84:	fab0 f080 	clz	r0, r0
 8003e88:	0940      	lsrs	r0, r0, #5
 8003e8a:	f7fc fbe1 	bl	8000650 <_test_assert>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d1bb      	bne.n	8003e0a <test_004_003_execute.lto_priv.104+0x2a>
  test_set_step(3);
 8003e92:	2303      	movs	r3, #3
 8003e94:	602b      	str	r3, [r5, #0]
    target_time = test_wait_tick() + MS2ST(5 * 50);
 8003e96:	f7ff ff93 	bl	8003dc0 <test_wait_tick>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8003e9a:	4f20      	ldr	r7, [pc, #128]	; (8003f1c <test_004_003_execute.lto_priv.104+0x13c>)
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003e9c:	4e20      	ldr	r6, [pc, #128]	; (8003f20 <test_004_003_execute.lto_priv.104+0x140>)
      test_assert(sem1.cnt == 0, "counter not zero");
 8003e9e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8003f24 <test_004_003_execute.lto_priv.104+0x144>
    target_time = test_wait_tick() + MS2ST(5 * 50);
 8003ea2:	2541      	movs	r5, #65	; 0x41
 8003ea4:	4681      	mov	r9, r0
      test_emit_token('A' + i);
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f7fc fb2a 	bl	8000500 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, MS2ST(50));
 8003eac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003eb0:	f001 fde6 	bl	8005a80 <chSemWaitTimeout.constprop.61>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8003eb4:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8003eb8:	fab0 f080 	clz	r0, r0
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	0940      	lsrs	r0, r0, #5
 8003ec0:	f7fc fbc6 	bl	8000650 <_test_assert>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003ec4:	4631      	mov	r1, r6
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d19f      	bne.n	8003e0a <test_004_003_execute.lto_priv.104+0x2a>
 8003eca:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003ecc:	1b00      	subs	r0, r0, r4
 8003ece:	fab0 f080 	clz	r0, r0
 8003ed2:	0940      	lsrs	r0, r0, #5
 8003ed4:	f7fc fbbc 	bl	8000650 <_test_assert>
      test_assert(sem1.cnt == 0, "counter not zero");
 8003ed8:	4641      	mov	r1, r8
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8003eda:	2800      	cmp	r0, #0
 8003edc:	d195      	bne.n	8003e0a <test_004_003_execute.lto_priv.104+0x2a>
      test_assert(sem1.cnt == 0, "counter not zero");
 8003ede:	68a0      	ldr	r0, [r4, #8]
 8003ee0:	fab0 f080 	clz	r0, r0
 8003ee4:	0940      	lsrs	r0, r0, #5
 8003ee6:	f7fc fbb3 	bl	8000650 <_test_assert>
 8003eea:	3501      	adds	r5, #1
 8003eec:	b2ed      	uxtb	r5, r5
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d18b      	bne.n	8003e0a <test_004_003_execute.lto_priv.104+0x2a>
    for (i = 0; i < 5; i++) {
 8003ef2:	2d46      	cmp	r5, #70	; 0x46
 8003ef4:	d1d7      	bne.n	8003ea6 <test_004_003_execute.lto_priv.104+0xc6>
    test_assert_sequence("ABCDE", "invalid sequence");
 8003ef6:	4910      	ldr	r1, [pc, #64]	; (8003f38 <test_004_003_execute.lto_priv.104+0x158>)
 8003ef8:	4810      	ldr	r0, [pc, #64]	; (8003f3c <test_004_003_execute.lto_priv.104+0x15c>)
 8003efa:	f7fc fb81 	bl	8000600 <_test_assert_sequence>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d183      	bne.n	8003e0a <test_004_003_execute.lto_priv.104+0x2a>
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8003f02:	f609 11d8 	addw	r1, r9, #2520	; 0x9d8
 8003f06:	f609 10c4 	addw	r0, r9, #2500	; 0x9c4
}
 8003f0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_time_window(target_time, target_time + ALLOWED_DELAY,
 8003f0e:	f002 b8bf 	b.w	8006090 <_test_assert_time_window.constprop.2>
 8003f12:	bf00      	nop
 8003f14:	2000106c 	.word	0x2000106c
 8003f18:	2000130c 	.word	0x2000130c
 8003f1c:	08006270 	.word	0x08006270
 8003f20:	08006320 	.word	0x08006320
 8003f24:	080064c4 	.word	0x080064c4
 8003f28:	20001238 	.word	0x20001238
 8003f2c:	080037d1 	.word	0x080037d1
 8003f30:	20000a00 	.word	0x20000a00
 8003f34:	20001084 	.word	0x20001084
 8003f38:	08006344 	.word	0x08006344
 8003f3c:	080062d8 	.word	0x080062d8

08003f40 <test_012_011_setup>:
  tqp->next = (thread_t *)tqp;
 8003f40:	4b02      	ldr	r3, [pc, #8]	; (8003f4c <test_012_011_setup+0xc>)
  mp->owner = NULL;
 8003f42:	2200      	movs	r2, #0
 8003f44:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003f46:	605b      	str	r3, [r3, #4]
 8003f48:	609a      	str	r2, [r3, #8]
 8003f4a:	4770      	bx	lr
 8003f4c:	200009dc 	.word	0x200009dc

08003f50 <test_012_010_setup>:
  tqp->next = (thread_t *)tqp;
 8003f50:	4b02      	ldr	r3, [pc, #8]	; (8003f5c <test_012_010_setup+0xc>)
  sp->cnt = n;
 8003f52:	2201      	movs	r2, #1
 8003f54:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003f56:	605b      	str	r3, [r3, #4]
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	4770      	bx	lr
 8003f5c:	200009f0 	.word	0x200009f0

08003f60 <test_012_007_setup>:
  tqp->next = (thread_t *)tqp;
 8003f60:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <test_012_007_setup+0xc>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003f66:	605b      	str	r3, [r3, #4]
 8003f68:	609a      	str	r2, [r3, #8]
 8003f6a:	4770      	bx	lr
 8003f6c:	200009f0 	.word	0x200009f0

08003f70 <Thread1>:
/*
 * This is a periodic thread that does absolutely nothing except flashing
 * a LED.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8003f70:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8003f72:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <Thread1+0x28>)
 8003f74:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <Thread1+0x2c>)
 8003f76:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOD, GPIOD_LED3);       /* Orange.  */
 8003f78:	4c09      	ldr	r4, [pc, #36]	; (8003fa0 <Thread1+0x30>)
 8003f7a:	619a      	str	r2, [r3, #24]
 8003f7c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8003f80:	462e      	mov	r6, r5
 8003f82:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(250);
 8003f84:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003f88:	f7fd fb82 	bl	8001690 <chThdSleep>
    palClearPad(GPIOD, GPIOD_LED3);     /* Orange.  */
 8003f8c:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(500);
 8003f8e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003f92:	f7fd fb7d 	bl	8001690 <chThdSleep>
 8003f96:	e7f4      	b.n	8003f82 <Thread1+0x12>
 8003f98:	20001238 	.word	0x20001238
 8003f9c:	080064d8 	.word	0x080064d8
 8003fa0:	40020c00 	.word	0x40020c00
	...

08003fb0 <test_012_012_execute>:
 * - [12.12.8] The size of an event listener is printed.
 * - [12.12.9] The size of a mailbox is printed.
 * .
 */

static void test_012_012_execute(void) {
 8003fb0:	b570      	push	{r4, r5, r6, lr}

  /* [12.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8003fb2:	4d33      	ldr	r5, [pc, #204]	; (8004080 <test_012_012_execute+0xd0>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 8003fb4:	4c33      	ldr	r4, [pc, #204]	; (8004084 <test_012_012_execute+0xd4>)
    test_print("--- System: ");
 8003fb6:	4834      	ldr	r0, [pc, #208]	; (8004088 <test_012_012_execute+0xd8>)
  test_set_step(1);
 8003fb8:	2301      	movs	r3, #1
 8003fba:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 8003fbc:	f7fc fad8 	bl	8000570 <test_print>
    test_printn(sizeof(ch_system_t));
 8003fc0:	2078      	movs	r0, #120	; 0x78
 8003fc2:	f7fc faed 	bl	80005a0 <test_printn>
    test_println(" bytes");
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f7fc fab2 	bl	8000530 <test_println>
  }

  /* [12.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 8003fcc:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 8003fce:	482f      	ldr	r0, [pc, #188]	; (800408c <test_012_012_execute+0xdc>)
  test_set_step(2);
 8003fd0:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 8003fd2:	f7fc facd 	bl	8000570 <test_print>
    test_printn(sizeof(thread_t));
 8003fd6:	2044      	movs	r0, #68	; 0x44
 8003fd8:	f7fc fae2 	bl	80005a0 <test_printn>
    test_println(" bytes");
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f7fc faa7 	bl	8000530 <test_println>
  }

  /* [12.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8003fe2:	2303      	movs	r3, #3
  {
    test_print("--- Timer : ");
 8003fe4:	482a      	ldr	r0, [pc, #168]	; (8004090 <test_012_012_execute+0xe0>)
  test_set_step(3);
 8003fe6:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 8003fe8:	f7fc fac2 	bl	8000570 <test_print>
    test_printn(sizeof(virtual_timer_t));
 8003fec:	2014      	movs	r0, #20
 8003fee:	f7fc fad7 	bl	80005a0 <test_printn>
    test_println(" bytes");
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f7fc fa9c 	bl	8000530 <test_println>
  }

  /* [12.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 8003ff8:	2604      	movs	r6, #4
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 8003ffa:	4826      	ldr	r0, [pc, #152]	; (8004094 <test_012_012_execute+0xe4>)
  test_set_step(4);
 8003ffc:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 8003ffe:	f7fc fab7 	bl	8000570 <test_print>
    test_printn(sizeof(semaphore_t));
 8004002:	200c      	movs	r0, #12
 8004004:	f7fc facc 	bl	80005a0 <test_printn>
    test_println(" bytes");
 8004008:	4620      	mov	r0, r4
 800400a:	f7fc fa91 	bl	8000530 <test_println>
#endif
  }

  /* [12.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 800400e:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8004010:	4821      	ldr	r0, [pc, #132]	; (8004098 <test_012_012_execute+0xe8>)
  test_set_step(5);
 8004012:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 8004014:	f7fc faac 	bl	8000570 <test_print>
    test_printn(sizeof(mutex_t));
 8004018:	2010      	movs	r0, #16
 800401a:	f7fc fac1 	bl	80005a0 <test_printn>
    test_println(" bytes");
 800401e:	4620      	mov	r0, r4
 8004020:	f7fc fa86 	bl	8000530 <test_println>
#endif
  }

  /* [12.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8004024:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8004026:	481d      	ldr	r0, [pc, #116]	; (800409c <test_012_012_execute+0xec>)
  test_set_step(6);
 8004028:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 800402a:	f7fc faa1 	bl	8000570 <test_print>
    test_printn(sizeof(condition_variable_t));
 800402e:	2008      	movs	r0, #8
 8004030:	f7fc fab6 	bl	80005a0 <test_printn>
    test_println(" bytes");
 8004034:	4620      	mov	r0, r4
 8004036:	f7fc fa7b 	bl	8000530 <test_println>
#endif
  }

  /* [12.12.7] The size of an event source is printed.*/
  test_set_step(7);
 800403a:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 800403c:	4818      	ldr	r0, [pc, #96]	; (80040a0 <test_012_012_execute+0xf0>)
  test_set_step(7);
 800403e:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 8004040:	f7fc fa96 	bl	8000570 <test_print>
    test_printn(sizeof(event_source_t));
 8004044:	4630      	mov	r0, r6
 8004046:	f7fc faab 	bl	80005a0 <test_printn>
    test_println(" bytes");
 800404a:	4620      	mov	r0, r4
 800404c:	f7fc fa70 	bl	8000530 <test_println>
#endif
  }

  /* [12.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8004050:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8004052:	4814      	ldr	r0, [pc, #80]	; (80040a4 <test_012_012_execute+0xf4>)
  test_set_step(8);
 8004054:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 8004056:	f7fc fa8b 	bl	8000570 <test_print>
    test_printn(sizeof(event_listener_t));
 800405a:	2014      	movs	r0, #20
 800405c:	f7fc faa0 	bl	80005a0 <test_printn>
    test_println(" bytes");
 8004060:	4620      	mov	r0, r4
 8004062:	f7fc fa65 	bl	8000530 <test_println>
#endif
  }

  /* [12.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8004066:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 8004068:	480f      	ldr	r0, [pc, #60]	; (80040a8 <test_012_012_execute+0xf8>)
  test_set_step(9);
 800406a:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 800406c:	f7fc fa80 	bl	8000570 <test_print>
    test_printn(sizeof(mailbox_t));
 8004070:	2028      	movs	r0, #40	; 0x28
 8004072:	f7fc fa95 	bl	80005a0 <test_printn>
    test_println(" bytes");
 8004076:	4620      	mov	r0, r4
#endif
  }
}
 8004078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 800407c:	f7fc ba58 	b.w	8000530 <test_println>
 8004080:	2000106c 	.word	0x2000106c
 8004084:	08007098 	.word	0x08007098
 8004088:	08007088 	.word	0x08007088
 800408c:	080070a0 	.word	0x080070a0
 8004090:	080070b0 	.word	0x080070b0
 8004094:	080070c0 	.word	0x080070c0
 8004098:	080070d0 	.word	0x080070d0
 800409c:	080070e0 	.word	0x080070e0
 80040a0:	080070f0 	.word	0x080070f0
 80040a4:	08007100 	.word	0x08007100
 80040a8:	08007110 	.word	0x08007110
 80040ac:	00000000 	.word	0x00000000

080040b0 <test_012_011_execute>:
static void test_012_011_execute(void) {
 80040b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80040b4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8004138 <test_012_011_execute+0x88>
      chMtxLock(&mtx1);
 80040b8:	4c1c      	ldr	r4, [pc, #112]	; (800412c <test_012_011_execute+0x7c>)
  test_set_step(1);
 80040ba:	2301      	movs	r3, #1
 80040bc:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 80040c0:	f7ff fe7e 	bl	8003dc0 <test_wait_tick>
    n = 0;
 80040c4:	2500      	movs	r5, #0
    start = test_wait_tick();
 80040c6:	4680      	mov	r8, r0
 80040c8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80040cc:	f242 760f 	movw	r6, #9999	; 0x270f
      chMtxLock(&mtx1);
 80040d0:	4620      	mov	r0, r4
 80040d2:	f7fc ff55 	bl	8000f80 <chMtxLock>
      chMtxUnlock(&mtx1);
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7fc feb2 	bl	8000e40 <chMtxUnlock>
      chMtxLock(&mtx1);
 80040dc:	4620      	mov	r0, r4
 80040de:	f7fc ff4f 	bl	8000f80 <chMtxLock>
      chMtxUnlock(&mtx1);
 80040e2:	4620      	mov	r0, r4
 80040e4:	f7fc feac 	bl	8000e40 <chMtxUnlock>
      chMtxLock(&mtx1);
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7fc ff49 	bl	8000f80 <chMtxLock>
      chMtxUnlock(&mtx1);
 80040ee:	4620      	mov	r0, r4
 80040f0:	f7fc fea6 	bl	8000e40 <chMtxUnlock>
      chMtxLock(&mtx1);
 80040f4:	4620      	mov	r0, r4
 80040f6:	f7fc ff43 	bl	8000f80 <chMtxLock>
      chMtxUnlock(&mtx1);
 80040fa:	4620      	mov	r0, r4
 80040fc:	f7fc fea0 	bl	8000e40 <chMtxUnlock>
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 8004102:	eba3 0308 	sub.w	r3, r3, r8
    } while (chVTIsSystemTimeWithinX(start, end));
 8004106:	42b3      	cmp	r3, r6
      n++;
 8004108:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800410c:	d9e0      	bls.n	80040d0 <test_012_011_execute+0x20>
  test_set_step(2);
 800410e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8004110:	4807      	ldr	r0, [pc, #28]	; (8004130 <test_012_011_execute+0x80>)
  test_set_step(2);
 8004112:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8004116:	f7fc fa2b 	bl	8000570 <test_print>
    test_printn(n * 4);
 800411a:	00a8      	lsls	r0, r5, #2
 800411c:	f7fc fa40 	bl	80005a0 <test_printn>
    test_println(" lock+unlock/S");
 8004120:	4804      	ldr	r0, [pc, #16]	; (8004134 <test_012_011_execute+0x84>)
}
 8004122:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 8004126:	f7fc ba03 	b.w	8000530 <test_println>
 800412a:	bf00      	nop
 800412c:	200009dc 	.word	0x200009dc
 8004130:	08007058 	.word	0x08007058
 8004134:	08007068 	.word	0x08007068
 8004138:	2000106c 	.word	0x2000106c
 800413c:	00000000 	.word	0x00000000

08004140 <test_012_010_execute>:
static void test_012_010_execute(void) {
 8004140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8004144:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80041c8 <test_012_010_execute+0x88>
      chSemWait(&sem1);
 8004148:	4c1c      	ldr	r4, [pc, #112]	; (80041bc <test_012_010_execute+0x7c>)
  test_set_step(1);
 800414a:	2301      	movs	r3, #1
 800414c:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 8004150:	f7ff fe36 	bl	8003dc0 <test_wait_tick>
    n = 0;
 8004154:	2500      	movs	r5, #0
    start = test_wait_tick();
 8004156:	4680      	mov	r8, r0
 8004158:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800415c:	f242 760f 	movw	r6, #9999	; 0x270f
      chSemWait(&sem1);
 8004160:	4620      	mov	r0, r4
 8004162:	f7fc fccd 	bl	8000b00 <chSemWait>
      chSemSignal(&sem1);
 8004166:	4620      	mov	r0, r4
 8004168:	f7fc fc72 	bl	8000a50 <chSemSignal>
      chSemWait(&sem1);
 800416c:	4620      	mov	r0, r4
 800416e:	f7fc fcc7 	bl	8000b00 <chSemWait>
      chSemSignal(&sem1);
 8004172:	4620      	mov	r0, r4
 8004174:	f7fc fc6c 	bl	8000a50 <chSemSignal>
      chSemWait(&sem1);
 8004178:	4620      	mov	r0, r4
 800417a:	f7fc fcc1 	bl	8000b00 <chSemWait>
      chSemSignal(&sem1);
 800417e:	4620      	mov	r0, r4
 8004180:	f7fc fc66 	bl	8000a50 <chSemSignal>
      chSemWait(&sem1);
 8004184:	4620      	mov	r0, r4
 8004186:	f7fc fcbb 	bl	8000b00 <chSemWait>
      chSemSignal(&sem1);
 800418a:	4620      	mov	r0, r4
 800418c:	f7fc fc60 	bl	8000a50 <chSemSignal>
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	eba3 0308 	sub.w	r3, r3, r8
    } while (chVTIsSystemTimeWithinX(start, end));
 8004196:	42b3      	cmp	r3, r6
      n++;
 8004198:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800419c:	d9e0      	bls.n	8004160 <test_012_010_execute+0x20>
  test_set_step(2);
 800419e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 80041a0:	4807      	ldr	r0, [pc, #28]	; (80041c0 <test_012_010_execute+0x80>)
  test_set_step(2);
 80041a2:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 80041a6:	f7fc f9e3 	bl	8000570 <test_print>
    test_printn(n * 4);
 80041aa:	00a8      	lsls	r0, r5, #2
 80041ac:	f7fc f9f8 	bl	80005a0 <test_printn>
    test_println(" wait+signal/S");
 80041b0:	4804      	ldr	r0, [pc, #16]	; (80041c4 <test_012_010_execute+0x84>)
}
 80041b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" wait+signal/S");
 80041b6:	f7fc b9bb 	b.w	8000530 <test_println>
 80041ba:	bf00      	nop
 80041bc:	200009f0 	.word	0x200009f0
 80041c0:	08007058 	.word	0x08007058
 80041c4:	08007038 	.word	0x08007038
 80041c8:	2000106c 	.word	0x2000106c
 80041cc:	00000000 	.word	0x00000000

080041d0 <test_012_009_execute>:
static void test_012_009_execute(void) {
 80041d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 80041d4:	f8df b090 	ldr.w	fp, [pc, #144]	; 8004268 <test_012_009_execute+0x98>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 80041d8:	4f1e      	ldr	r7, [pc, #120]	; (8004254 <test_012_009_execute+0x84>)
 80041da:	4e1f      	ldr	r6, [pc, #124]	; (8004258 <test_012_009_execute+0x88>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 80041dc:	4d1f      	ldr	r5, [pc, #124]	; (800425c <test_012_009_execute+0x8c>)
  test_set_step(1);
 80041de:	2301      	movs	r3, #1
 80041e0:	f8cb 3000 	str.w	r3, [fp]
    start = test_wait_tick();
 80041e4:	f7ff fdec 	bl	8003dc0 <test_wait_tick>
    n = 0;
 80041e8:	2400      	movs	r4, #0
      chVTDoSetI(&vt1, 1, tmo, NULL);
 80041ea:	46a2      	mov	sl, r4
    start = test_wait_tick();
 80041ec:	4681      	mov	r9, r0
 80041ee:	f04f 0820 	mov.w	r8, #32
 80041f2:	f388 8811 	msr	BASEPRI, r8
      chVTDoSetI(&vt1, 1, tmo, NULL);
 80041f6:	2300      	movs	r3, #0
 80041f8:	463a      	mov	r2, r7
 80041fa:	4630      	mov	r0, r6
 80041fc:	2101      	movs	r1, #1
 80041fe:	f7fd f857 	bl	80012b0 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8004202:	463a      	mov	r2, r7
 8004204:	2300      	movs	r3, #0
 8004206:	f242 7110 	movw	r1, #10000	; 0x2710
 800420a:	4628      	mov	r0, r5
 800420c:	f7fd f850 	bl	80012b0 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8004210:	4630      	mov	r0, r6
 8004212:	f7fd f815 	bl	8001240 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8004216:	4628      	mov	r0, r5
 8004218:	f7fd f812 	bl	8001240 <chVTDoResetI>
 800421c:	f38a 8811 	msr	BASEPRI, sl
 8004220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8004224:	f242 720f 	movw	r2, #9999	; 0x270f
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	eba3 0309 	sub.w	r3, r3, r9
 800422e:	4293      	cmp	r3, r2
      n++;
 8004230:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8004234:	d9dd      	bls.n	80041f2 <test_012_009_execute+0x22>
  test_set_step(2);
 8004236:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8004238:	4809      	ldr	r0, [pc, #36]	; (8004260 <test_012_009_execute+0x90>)
  test_set_step(2);
 800423a:	f8cb 3000 	str.w	r3, [fp]
    test_print("--- Score : ");
 800423e:	f7fc f997 	bl	8000570 <test_print>
    test_printn(n * 2);
 8004242:	0060      	lsls	r0, r4, #1
 8004244:	f7fc f9ac 	bl	80005a0 <test_printn>
    test_println(" timers/S");
 8004248:	4806      	ldr	r0, [pc, #24]	; (8004264 <test_012_009_execute+0x94>)
}
 800424a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 800424e:	f7fc b96f 	b.w	8000530 <test_println>
 8004252:	bf00      	nop
 8004254:	08004d91 	.word	0x08004d91
 8004258:	20001098 	.word	0x20001098
 800425c:	200010ac 	.word	0x200010ac
 8004260:	08007058 	.word	0x08007058
 8004264:	0800701c 	.word	0x0800701c
 8004268:	2000106c 	.word	0x2000106c
 800426c:	00000000 	.word	0x00000000

08004270 <test_012_004_execute>:
  return ch.rlist.current;
 8004270:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <test_012_004_execute+0xb0>)
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8004272:	4a2c      	ldr	r2, [pc, #176]	; (8004324 <test_012_004_execute+0xb4>)
  return chThdGetSelfX()->prio;
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	482c      	ldr	r0, [pc, #176]	; (8004328 <test_012_004_execute+0xb8>)
 8004278:	6899      	ldr	r1, [r3, #8]
static void test_012_004_execute(void) {
 800427a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 800427e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004338 <test_012_004_execute+0xc8>
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8004282:	3101      	adds	r1, #1
  test_set_step(1);
 8004284:	2401      	movs	r4, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8004286:	2300      	movs	r3, #0
  test_set_step(1);
 8004288:	f8ca 4000 	str.w	r4, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800428c:	f001 fba8 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8004290:	4a26      	ldr	r2, [pc, #152]	; (800432c <test_012_004_execute+0xbc>)
  test_set_step(2);
 8004292:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8004294:	4604      	mov	r4, r0
 8004296:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8004298:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 800429c:	f7ff fd90 	bl	8003dc0 <test_wait_tick>
    n = 0;
 80042a0:	2500      	movs	r5, #0
      chSchWakeupS(tp, MSG_OK);
 80042a2:	462e      	mov	r6, r5
    start = test_wait_tick();
 80042a4:	4681      	mov	r9, r0
 80042a6:	2720      	movs	r7, #32
 80042a8:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80042ac:	f387 8811 	msr	BASEPRI, r7
      chSchWakeupS(tp, MSG_OK);
 80042b0:	2100      	movs	r1, #0
 80042b2:	4620      	mov	r0, r4
 80042b4:	f7fc fb9c 	bl	80009f0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80042b8:	4620      	mov	r0, r4
 80042ba:	2100      	movs	r1, #0
 80042bc:	f7fc fb98 	bl	80009f0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80042c0:	4620      	mov	r0, r4
 80042c2:	2100      	movs	r1, #0
 80042c4:	f7fc fb94 	bl	80009f0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80042c8:	4620      	mov	r0, r4
 80042ca:	2100      	movs	r1, #0
 80042cc:	f7fc fb90 	bl	80009f0 <chSchWakeupS>
 80042d0:	f386 8811 	msr	BASEPRI, r6
 80042d4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 80042d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80042dc:	eba3 0309 	sub.w	r3, r3, r9
 80042e0:	4293      	cmp	r3, r2
      n += 4;
 80042e2:	f105 0504 	add.w	r5, r5, #4
    } while (chVTIsSystemTimeWithinX(start, end));
 80042e6:	d9e1      	bls.n	80042ac <test_012_004_execute+0x3c>
  test_set_step(3);
 80042e8:	2303      	movs	r3, #3
 80042ea:	f8ca 3000 	str.w	r3, [sl]
 80042ee:	f387 8811 	msr	BASEPRI, r7
    chSchWakeupS(tp, MSG_TIMEOUT);
 80042f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042f6:	4620      	mov	r0, r4
 80042f8:	f7fc fb7a 	bl	80009f0 <chSchWakeupS>
 80042fc:	f386 8811 	msr	BASEPRI, r6
    test_wait_threads();
 8004300:	f7fc ff2e 	bl	8001160 <test_wait_threads>
  test_set_step(4);
 8004304:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8004306:	480a      	ldr	r0, [pc, #40]	; (8004330 <test_012_004_execute+0xc0>)
  test_set_step(4);
 8004308:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 800430c:	f7fc f930 	bl	8000570 <test_print>
    test_printn(n * 2);
 8004310:	0068      	lsls	r0, r5, #1
 8004312:	f7fc f945 	bl	80005a0 <test_printn>
    test_println(" ctxswc/S");
 8004316:	4807      	ldr	r0, [pc, #28]	; (8004334 <test_012_004_execute+0xc4>)
}
 8004318:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" ctxswc/S");
 800431c:	f7fc b908 	b.w	8000530 <test_println>
 8004320:	20001238 	.word	0x20001238
 8004324:	08004eb1 	.word	0x08004eb1
 8004328:	20000a00 	.word	0x20000a00
 800432c:	20001084 	.word	0x20001084
 8004330:	08007058 	.word	0x08007058
 8004334:	08006fa0 	.word	0x08006fa0
 8004338:	2000106c 	.word	0x2000106c
 800433c:	00000000 	.word	0x00000000

08004340 <test_012_008_execute>:
static void test_012_008_execute(void) {
 8004340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004344:	b083      	sub	sp, #12
    n = 0;
 8004346:	ac02      	add	r4, sp, #8
  return ch.rlist.current;
 8004348:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800441c <test_012_008_execute+0xdc>
  test_set_step(1);
 800434c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004420 <test_012_008_execute+0xe0>
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8004350:	4f2d      	ldr	r7, [pc, #180]	; (8004408 <test_012_008_execute+0xc8>)
 8004352:	4e2e      	ldr	r6, [pc, #184]	; (800440c <test_012_008_execute+0xcc>)
 8004354:	4d2e      	ldr	r5, [pc, #184]	; (8004410 <test_012_008_execute+0xd0>)
  test_set_step(1);
 8004356:	2201      	movs	r2, #1
    n = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_set_step(1);
 800435e:	f8c9 2000 	str.w	r2, [r9]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8004362:	f7ff fd2d 	bl	8003dc0 <test_wait_tick>
  return chThdGetSelfX()->prio;
 8004366:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800436a:	6899      	ldr	r1, [r3, #8]
 800436c:	463a      	mov	r2, r7
 800436e:	4623      	mov	r3, r4
 8004370:	3901      	subs	r1, #1
 8004372:	4630      	mov	r0, r6
 8004374:	f001 fb34 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8004378:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800437c:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800437e:	6899      	ldr	r1, [r3, #8]
 8004380:	463a      	mov	r2, r7
 8004382:	4623      	mov	r3, r4
 8004384:	3901      	subs	r1, #1
 8004386:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 800438a:	f001 fb29 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800438e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8004392:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8004394:	6899      	ldr	r1, [r3, #8]
 8004396:	463a      	mov	r2, r7
 8004398:	4623      	mov	r3, r4
 800439a:	3901      	subs	r1, #1
 800439c:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80043a0:	f001 fb1e 	bl	80059e0 <chThdCreateStatic.constprop.65>
 80043a4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80043a8:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80043aa:	6899      	ldr	r1, [r3, #8]
 80043ac:	463a      	mov	r2, r7
 80043ae:	4623      	mov	r3, r4
 80043b0:	3901      	subs	r1, #1
 80043b2:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80043b6:	f001 fb13 	bl	80059e0 <chThdCreateStatic.constprop.65>
 80043ba:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80043be:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80043c0:	6899      	ldr	r1, [r3, #8]
 80043c2:	463a      	mov	r2, r7
 80043c4:	3901      	subs	r1, #1
 80043c6:	4623      	mov	r3, r4
 80043c8:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 80043cc:	f001 fb08 	bl	80059e0 <chThdCreateStatic.constprop.65>
  test_set_step(2);
 80043d0:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80043d2:	6128      	str	r0, [r5, #16]
    chThdSleepSeconds(1);
 80043d4:	f242 7010 	movw	r0, #10000	; 0x2710
  test_set_step(2);
 80043d8:	f8c9 3000 	str.w	r3, [r9]
    chThdSleepSeconds(1);
 80043dc:	f7fd f958 	bl	8001690 <chThdSleep>
    test_terminate_threads();
 80043e0:	f7fc f86e 	bl	80004c0 <test_terminate_threads>
    test_wait_threads();
 80043e4:	f7fc febc 	bl	8001160 <test_wait_threads>
  test_set_step(3);
 80043e8:	2303      	movs	r3, #3
    test_print("--- Score : ");
 80043ea:	480a      	ldr	r0, [pc, #40]	; (8004414 <test_012_008_execute+0xd4>)
  test_set_step(3);
 80043ec:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 80043f0:	f7fc f8be 	bl	8000570 <test_print>
    test_printn(n);
 80043f4:	9801      	ldr	r0, [sp, #4]
 80043f6:	f7fc f8d3 	bl	80005a0 <test_printn>
    test_println(" ctxswc/S");
 80043fa:	4807      	ldr	r0, [pc, #28]	; (8004418 <test_012_008_execute+0xd8>)
 80043fc:	f7fc f898 	bl	8000530 <test_println>
}
 8004400:	b003      	add	sp, #12
 8004402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004406:	bf00      	nop
 8004408:	08004e51 	.word	0x08004e51
 800440c:	20000a00 	.word	0x20000a00
 8004410:	20001084 	.word	0x20001084
 8004414:	08007058 	.word	0x08007058
 8004418:	08006fa0 	.word	0x08006fa0
 800441c:	20001238 	.word	0x20001238
 8004420:	2000106c 	.word	0x2000106c
	...

08004430 <test_012_007_execute>:
static void test_012_007_execute(void) {
 8004430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8004434:	4d35      	ldr	r5, [pc, #212]	; (800450c <test_012_007_execute+0xdc>)
  test_set_step(1);
 8004436:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800453c <test_012_007_execute+0x10c>
  return chThdGetSelfX()->prio;
 800443a:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800443c:	4a34      	ldr	r2, [pc, #208]	; (8004510 <test_012_007_execute+0xe0>)
 800443e:	6899      	ldr	r1, [r3, #8]
 8004440:	4834      	ldr	r0, [pc, #208]	; (8004514 <test_012_007_execute+0xe4>)
 8004442:	4c35      	ldr	r4, [pc, #212]	; (8004518 <test_012_007_execute+0xe8>)
      chSemReset(&sem1, 0);
 8004444:	4f35      	ldr	r7, [pc, #212]	; (800451c <test_012_007_execute+0xec>)
  test_set_step(1);
 8004446:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8004448:	3105      	adds	r1, #5
  test_set_step(1);
 800444a:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800444e:	2300      	movs	r3, #0
 8004450:	f001 fac6 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8004454:	69ab      	ldr	r3, [r5, #24]
 8004456:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8004458:	6899      	ldr	r1, [r3, #8]
 800445a:	4a2d      	ldr	r2, [pc, #180]	; (8004510 <test_012_007_execute+0xe0>)
 800445c:	4830      	ldr	r0, [pc, #192]	; (8004520 <test_012_007_execute+0xf0>)
 800445e:	3104      	adds	r1, #4
 8004460:	2300      	movs	r3, #0
 8004462:	f001 fabd 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8004466:	69ab      	ldr	r3, [r5, #24]
 8004468:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 800446a:	6899      	ldr	r1, [r3, #8]
 800446c:	4a28      	ldr	r2, [pc, #160]	; (8004510 <test_012_007_execute+0xe0>)
 800446e:	482d      	ldr	r0, [pc, #180]	; (8004524 <test_012_007_execute+0xf4>)
 8004470:	3103      	adds	r1, #3
 8004472:	2300      	movs	r3, #0
 8004474:	f001 fab4 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8004478:	69ab      	ldr	r3, [r5, #24]
 800447a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800447c:	6899      	ldr	r1, [r3, #8]
 800447e:	4a24      	ldr	r2, [pc, #144]	; (8004510 <test_012_007_execute+0xe0>)
 8004480:	4829      	ldr	r0, [pc, #164]	; (8004528 <test_012_007_execute+0xf8>)
 8004482:	3102      	adds	r1, #2
 8004484:	2300      	movs	r3, #0
 8004486:	f001 faab 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800448a:	69ab      	ldr	r3, [r5, #24]
 800448c:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800448e:	6899      	ldr	r1, [r3, #8]
 8004490:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <test_012_007_execute+0xe0>)
 8004492:	4826      	ldr	r0, [pc, #152]	; (800452c <test_012_007_execute+0xfc>)
 8004494:	3101      	adds	r1, #1
 8004496:	2300      	movs	r3, #0
 8004498:	f001 faa2 	bl	80059e0 <chThdCreateStatic.constprop.65>
  test_set_step(2);
 800449c:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800449e:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 80044a0:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 80044a4:	f7ff fc8c 	bl	8003dc0 <test_wait_tick>
    n = 0;
 80044a8:	2400      	movs	r4, #0
    start = test_wait_tick();
 80044aa:	4606      	mov	r6, r0
 80044ac:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
      chSemReset(&sem1, 0);
 80044b0:	2100      	movs	r1, #0
 80044b2:	4638      	mov	r0, r7
 80044b4:	f7fc fe8c 	bl	80011d0 <chSemReset>
 80044b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 80044ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80044be:	1b9b      	subs	r3, r3, r6
 80044c0:	4293      	cmp	r3, r2
      n++;
 80044c2:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80044c6:	d9f3      	bls.n	80044b0 <test_012_007_execute+0x80>
  test_set_step(3);
 80044c8:	2303      	movs	r3, #3
 80044ca:	f8c8 3000 	str.w	r3, [r8]
    test_terminate_threads();
 80044ce:	f7fb fff7 	bl	80004c0 <test_terminate_threads>
    chSemReset(&sem1, 0);
 80044d2:	2100      	movs	r1, #0
 80044d4:	4811      	ldr	r0, [pc, #68]	; (800451c <test_012_007_execute+0xec>)
 80044d6:	f7fc fe7b 	bl	80011d0 <chSemReset>
    test_wait_threads();
 80044da:	f7fc fe41 	bl	8001160 <test_wait_threads>
  test_set_step(4);
 80044de:	2304      	movs	r3, #4
    test_print("--- Score : ");
 80044e0:	4813      	ldr	r0, [pc, #76]	; (8004530 <test_012_007_execute+0x100>)
  test_set_step(4);
 80044e2:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 80044e6:	f7fc f843 	bl	8000570 <test_print>
    test_printn(n);
 80044ea:	4620      	mov	r0, r4
 80044ec:	f7fc f858 	bl	80005a0 <test_printn>
    test_printn(n * 6);
 80044f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    test_print(" reschedules/S, ");
 80044f4:	480f      	ldr	r0, [pc, #60]	; (8004534 <test_012_007_execute+0x104>)
 80044f6:	f7fc f83b 	bl	8000570 <test_print>
    test_printn(n * 6);
 80044fa:	0060      	lsls	r0, r4, #1
 80044fc:	f7fc f850 	bl	80005a0 <test_printn>
    test_println(" ctxswc/S");
 8004500:	480d      	ldr	r0, [pc, #52]	; (8004538 <test_012_007_execute+0x108>)
}
 8004502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8004506:	f7fc b813 	b.w	8000530 <test_println>
 800450a:	bf00      	nop
 800450c:	20001238 	.word	0x20001238
 8004510:	08004e81 	.word	0x08004e81
 8004514:	20000a00 	.word	0x20000a00
 8004518:	20001084 	.word	0x20001084
 800451c:	200009f0 	.word	0x200009f0
 8004520:	20000b48 	.word	0x20000b48
 8004524:	20000c90 	.word	0x20000c90
 8004528:	20000dd8 	.word	0x20000dd8
 800452c:	20000f20 	.word	0x20000f20
 8004530:	08007058 	.word	0x08007058
 8004534:	08006fe8 	.word	0x08006fe8
 8004538:	08006fa0 	.word	0x08006fa0
 800453c:	2000106c 	.word	0x2000106c

08004540 <test_012_006_execute>:
static void test_012_006_execute(void) {
 8004540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8004544:	4b17      	ldr	r3, [pc, #92]	; (80045a4 <test_012_006_execute+0x64>)
  test_set_step(1);
 8004546:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80045b4 <test_012_006_execute+0x74>
  return chThdGetSelfX()->prio;
 800454a:	699b      	ldr	r3, [r3, #24]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800454c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80045b8 <test_012_006_execute+0x78>
  tprio_t prio = chThdGetPriorityX() + 1;
 8004550:	689d      	ldr	r5, [r3, #8]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8004552:	4f15      	ldr	r7, [pc, #84]	; (80045a8 <test_012_006_execute+0x68>)
  test_set_step(1);
 8004554:	2301      	movs	r3, #1
  tprio_t prio = chThdGetPriorityX() + 1;
 8004556:	441d      	add	r5, r3
  test_set_step(1);
 8004558:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 800455c:	f7ff fc30 	bl	8003dc0 <test_wait_tick>
    n = 0;
 8004560:	2400      	movs	r4, #0
    start = test_wait_tick();
 8004562:	4606      	mov	r6, r0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8004564:	2300      	movs	r3, #0
 8004566:	4642      	mov	r2, r8
 8004568:	4629      	mov	r1, r5
 800456a:	4638      	mov	r0, r7
 800456c:	f001 fa38 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8004570:	f7fc fd9e 	bl	80010b0 <chThdRelease>
 8004574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8004578:	f242 720f 	movw	r2, #9999	; 0x270f
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	1b9b      	subs	r3, r3, r6
 8004580:	4293      	cmp	r3, r2
      n++;
 8004582:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8004586:	d9ed      	bls.n	8004564 <test_012_006_execute+0x24>
  test_set_step(2);
 8004588:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800458a:	4808      	ldr	r0, [pc, #32]	; (80045ac <test_012_006_execute+0x6c>)
  test_set_step(2);
 800458c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8004590:	f7fb ffee 	bl	8000570 <test_print>
    test_printn(n);
 8004594:	4620      	mov	r0, r4
 8004596:	f7fc f803 	bl	80005a0 <test_printn>
    test_println(" threads/S");
 800459a:	4805      	ldr	r0, [pc, #20]	; (80045b0 <test_012_006_execute+0x70>)
}
 800459c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 80045a0:	f7fb bfc6 	b.w	8000530 <test_println>
 80045a4:	20001238 	.word	0x20001238
 80045a8:	20000a00 	.word	0x20000a00
 80045ac:	08007058 	.word	0x08007058
 80045b0:	08006fcc 	.word	0x08006fcc
 80045b4:	2000106c 	.word	0x2000106c
 80045b8:	080059c1 	.word	0x080059c1
 80045bc:	00000000 	.word	0x00000000

080045c0 <test_012_005_execute>:
static void test_012_005_execute(void) {
 80045c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 80045c4:	4b17      	ldr	r3, [pc, #92]	; (8004624 <test_012_005_execute+0x64>)
  test_set_step(1);
 80045c6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8004634 <test_012_005_execute+0x74>
  return chThdGetSelfX()->prio;
 80045ca:	699b      	ldr	r3, [r3, #24]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80045cc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8004638 <test_012_005_execute+0x78>
  tprio_t prio = chThdGetPriorityX() - 1;
 80045d0:	689d      	ldr	r5, [r3, #8]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80045d2:	4f15      	ldr	r7, [pc, #84]	; (8004628 <test_012_005_execute+0x68>)
  test_set_step(1);
 80045d4:	2301      	movs	r3, #1
 80045d6:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 80045da:	f7ff fbf1 	bl	8003dc0 <test_wait_tick>
  tprio_t prio = chThdGetPriorityX() - 1;
 80045de:	3d01      	subs	r5, #1
    n = 0;
 80045e0:	2400      	movs	r4, #0
    start = test_wait_tick();
 80045e2:	4606      	mov	r6, r0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80045e4:	2300      	movs	r3, #0
 80045e6:	4642      	mov	r2, r8
 80045e8:	4629      	mov	r1, r5
 80045ea:	4638      	mov	r0, r7
 80045ec:	f001 f9f8 	bl	80059e0 <chThdCreateStatic.constprop.65>
 80045f0:	f7fc fd96 	bl	8001120 <chThdWait>
 80045f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80045f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	1b9b      	subs	r3, r3, r6
 8004600:	4293      	cmp	r3, r2
      n++;
 8004602:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8004606:	d9ed      	bls.n	80045e4 <test_012_005_execute+0x24>
  test_set_step(2);
 8004608:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800460a:	4808      	ldr	r0, [pc, #32]	; (800462c <test_012_005_execute+0x6c>)
  test_set_step(2);
 800460c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8004610:	f7fb ffae 	bl	8000570 <test_print>
    test_printn(n);
 8004614:	4620      	mov	r0, r4
 8004616:	f7fb ffc3 	bl	80005a0 <test_printn>
    test_println(" threads/S");
 800461a:	4805      	ldr	r0, [pc, #20]	; (8004630 <test_012_005_execute+0x70>)
}
 800461c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 8004620:	f7fb bf86 	b.w	8000530 <test_println>
 8004624:	20001238 	.word	0x20001238
 8004628:	20000a00 	.word	0x20000a00
 800462c:	08007058 	.word	0x08007058
 8004630:	08006fcc 	.word	0x08006fcc
 8004634:	2000106c 	.word	0x2000106c
 8004638:	080059c1 	.word	0x080059c1
 800463c:	00000000 	.word	0x00000000

08004640 <main>:
  rccResetAHB1(~0);
 8004640:	4bbd      	ldr	r3, [pc, #756]	; (8004938 <main+0x2f8>)
  PWR->CR |= PWR_CR_DBP;
 8004642:	4cbe      	ldr	r4, [pc, #760]	; (800493c <main+0x2fc>)
  rccResetAHB1(~0);
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800464a:	2200      	movs	r2, #0
}

/*
 * Application entry point.
 */
int main(void) {
 800464c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004650:	6119      	str	r1, [r3, #16]
 8004652:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8004654:	6958      	ldr	r0, [r3, #20]
 8004656:	6159      	str	r1, [r3, #20]
 8004658:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800465a:	6a18      	ldr	r0, [r3, #32]
 800465c:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8004660:	6218      	str	r0, [r3, #32]
 8004662:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8004664:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004666:	6259      	str	r1, [r3, #36]	; 0x24
 8004668:	625a      	str	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(FALSE);
 800466a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800466c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004670:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 8004672:	6821      	ldr	r1, [r4, #0]
 8004674:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004678:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800467a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800467c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8004680:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004684:	b08b      	sub	sp, #44	; 0x2c
 8004686:	d003      	beq.n	8004690 <main+0x50>
    RCC->BDCR = RCC_BDCR_BDRST;
 8004688:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800468c:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800468e:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8004690:	4caa      	ldr	r4, [pc, #680]	; (800493c <main+0x2fc>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8004692:	4ea9      	ldr	r6, [pc, #676]	; (8004938 <main+0x2f8>)
 8004694:	6862      	ldr	r2, [r4, #4]
  gpiop->OTYPER  = config->otyper;
 8004696:	4baa      	ldr	r3, [pc, #680]	; (8004940 <main+0x300>)
  gpiop->PUPDR   = config->pupdr;
 8004698:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8004984 <main+0x344>
  gpiop->OTYPER  = config->otyper;
 800469c:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 8004988 <main+0x348>
  gpiop->AFRL    = config->afrl;
 80046a0:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 800498c <main+0x34c>
  gpiop->OTYPER  = config->otyper;
 80046a4:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 8004990 <main+0x350>
 80046a8:	f8df c2e8 	ldr.w	ip, [pc, #744]	; 8004994 <main+0x354>
 80046ac:	f8df e2e8 	ldr.w	lr, [pc, #744]	; 8004998 <main+0x358>
 80046b0:	4fa4      	ldr	r7, [pc, #656]	; (8004944 <main+0x304>)
 80046b2:	4da5      	ldr	r5, [pc, #660]	; (8004948 <main+0x308>)
 80046b4:	48a5      	ldr	r0, [pc, #660]	; (800494c <main+0x30c>)
 80046b6:	49a6      	ldr	r1, [pc, #664]	; (8004950 <main+0x310>)
 80046b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046bc:	6062      	str	r2, [r4, #4]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80046be:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80046c0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80046c4:	4322      	orrs	r2, r4
 80046c6:	6332      	str	r2, [r6, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80046c8:	6d32      	ldr	r2, [r6, #80]	; 0x50
 80046ca:	4322      	orrs	r2, r4
 80046cc:	6532      	str	r2, [r6, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 80046ce:	2400      	movs	r4, #0
  gpiop->OSPEEDR = config->ospeedr;
 80046d0:	f46f 42a8 	mvn.w	r2, #21504	; 0x5400
  gpiop->OTYPER  = config->otyper;
 80046d4:	605c      	str	r4, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80046d6:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80046d8:	f8c3 b00c 	str.w	fp, [r3, #12]
  gpiop->ODR     = config->odr;
 80046dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
  gpiop->AFRH    = config->afrh;
 80046e0:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 800499c <main+0x35c>
  gpiop->ODR     = config->odr;
 80046e4:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 80046e6:	f8c3 8020 	str.w	r8, [r3, #32]
  gpiop->AFRH    = config->afrh;
 80046ea:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80046ee:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 80049a0 <main+0x360>
 80046f2:	f8c3 8000 	str.w	r8, [r3]
  gpiop->OTYPER  = config->otyper;
 80046f6:	f44f 7b10 	mov.w	fp, #576	; 0x240
 80046fa:	f8ca b004 	str.w	fp, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80046fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  gpiop->PUPDR   = config->pupdr;
 8004702:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 80049a4 <main+0x364>
  gpiop->OSPEEDR = config->ospeedr;
 8004706:	f8ca 3008 	str.w	r3, [sl, #8]
  gpiop->AFRL    = config->afrl;
 800470a:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
  gpiop->PUPDR   = config->pupdr;
 800470e:	f8ca 800c 	str.w	r8, [sl, #12]
  gpiop->ODR     = config->odr;
 8004712:	f8ca 2014 	str.w	r2, [sl, #20]
  gpiop->AFRH    = config->afrh;
 8004716:	f04f 0840 	mov.w	r8, #64	; 0x40
  gpiop->AFRL    = config->afrl;
 800471a:	f8ca b020 	str.w	fp, [sl, #32]
  gpiop->MODER   = config->moder;
 800471e:	f8df b288 	ldr.w	fp, [pc, #648]	; 80049a8 <main+0x368>
  gpiop->AFRH    = config->afrh;
 8004722:	f8ca 8024 	str.w	r8, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004726:	f8ca b000 	str.w	fp, [sl]
  gpiop->PUPDR   = config->pupdr;
 800472a:	f10a 5aa2 	add.w	sl, sl, #339738624	; 0x14400000
 800472e:	f50a 3a44 	add.w	sl, sl, #200704	; 0x31000
 8004732:	f50a 7aaa 	add.w	sl, sl, #340	; 0x154
  gpiop->OTYPER  = config->otyper;
 8004736:	f8c9 4004 	str.w	r4, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800473a:	f8c9 3008 	str.w	r3, [r9, #8]
  gpiop->PUPDR   = config->pupdr;
 800473e:	f8c9 a00c 	str.w	sl, [r9, #12]
  gpiop->AFRL    = config->afrl;
 8004742:	f04f 4ac0 	mov.w	sl, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 8004746:	f8c9 2014 	str.w	r2, [r9, #20]
  gpiop->AFRL    = config->afrl;
 800474a:	f8c9 a020 	str.w	sl, [r9, #32]
  gpiop->AFRH    = config->afrh;
 800474e:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80049ac <main+0x36c>
 8004752:	f8c9 a024 	str.w	sl, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004756:	f8df a258 	ldr.w	sl, [pc, #600]	; 80049b0 <main+0x370>
 800475a:	f8c9 a000 	str.w	sl, [r9]
  gpiop->PUPDR   = config->pupdr;
 800475e:	f8df 9254 	ldr.w	r9, [pc, #596]	; 80049b4 <main+0x374>
  gpiop->OTYPER  = config->otyper;
 8004762:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->MODER   = config->moder;
 8004766:	f8df a250 	ldr.w	sl, [pc, #592]	; 80049b8 <main+0x378>
  gpiop->OSPEEDR = config->ospeedr;
 800476a:	f8cc 3008 	str.w	r3, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 800476e:	f8cc 900c 	str.w	r9, [ip, #12]
  gpiop->ODR     = config->odr;
 8004772:	f640 79ff 	movw	r9, #4095	; 0xfff
 8004776:	f8cc 9014 	str.w	r9, [ip, #20]
  gpiop->AFRL    = config->afrl;
 800477a:	f8cc 4020 	str.w	r4, [ip, #32]
  gpiop->AFRH    = config->afrh;
 800477e:	f8cc 4024 	str.w	r4, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004782:	f8cc a000 	str.w	sl, [ip]
  gpiop->OTYPER  = config->otyper;
 8004786:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800478a:	f8ce 3008 	str.w	r3, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 800478e:	f8ce 400c 	str.w	r4, [lr, #12]
  gpiop->ODR     = config->odr;
 8004792:	f8ce 2014 	str.w	r2, [lr, #20]
  gpiop->AFRL    = config->afrl;
 8004796:	f8ce 4020 	str.w	r4, [lr, #32]
  gpiop->AFRH    = config->afrh;
 800479a:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800479e:	f8ce 8000 	str.w	r8, [lr]
  gpiop->OTYPER  = config->otyper;
 80047a2:	607c      	str	r4, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80047a4:	60bb      	str	r3, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 80047a6:	60fc      	str	r4, [r7, #12]
  gpiop->ODR     = config->odr;
 80047a8:	617a      	str	r2, [r7, #20]
  gpiop->AFRL    = config->afrl;
 80047aa:	623c      	str	r4, [r7, #32]
  gpiop->AFRH    = config->afrh;
 80047ac:	627c      	str	r4, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80047ae:	603c      	str	r4, [r7, #0]
  gpiop->OTYPER  = config->otyper;
 80047b0:	606c      	str	r4, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80047b2:	60ab      	str	r3, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80047b4:	60ec      	str	r4, [r5, #12]
  gpiop->ODR     = config->odr;
 80047b6:	616a      	str	r2, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80047b8:	622c      	str	r4, [r5, #32]
  gpiop->AFRH    = config->afrh;
 80047ba:	626c      	str	r4, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80047bc:	602c      	str	r4, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 80047be:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80047c0:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80047c2:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 80047c4:	6142      	str	r2, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80047c6:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80047c8:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80047ca:	6004      	str	r4, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 80047cc:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80047ce:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80047d0:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 80047d2:	614a      	str	r2, [r1, #20]
  iqp->q_counter = 0;
 80047d4:	4a5f      	ldr	r2, [pc, #380]	; (8004954 <main+0x314>)
  gpiop->AFRL    = config->afrl;
 80047d6:	620c      	str	r4, [r1, #32]
  oqp->q_counter = size;
 80047d8:	f04f 0910 	mov.w	r9, #16
  gpiop->AFRH    = config->afrh;
 80047dc:	624c      	str	r4, [r1, #36]	; 0x24
  iqp->q_notify  = infy;
 80047de:	485d      	ldr	r0, [pc, #372]	; (8004954 <main+0x314>)
  gpiop->MODER   = config->moder;
 80047e0:	600c      	str	r4, [r1, #0]
  iqp->q_counter = 0;
 80047e2:	6154      	str	r4, [r2, #20]
  oqp->q_counter = size;
 80047e4:	f8c2 9038 	str.w	r9, [r2, #56]	; 0x38

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80047e8:	6c32      	ldr	r2, [r6, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80047ea:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 80049bc <main+0x37c>
  sdp->vmt = &vmt;
 80047ee:	495a      	ldr	r1, [pc, #360]	; (8004958 <main+0x318>)
  iqp->q_notify  = infy;
 80047f0:	6284      	str	r4, [r0, #40]	; 0x28
 80047f2:	4682      	mov	sl, r0
  ST_ENABLE_CLOCK();
 80047f4:	f042 0201 	orr.w	r2, r2, #1
 80047f8:	f84a 1b04 	str.w	r1, [sl], #4
 80047fc:	6432      	str	r2, [r6, #64]	; 0x40
  ST_ENABLE_STOP();
 80047fe:	f8de 1008 	ldr.w	r1, [lr, #8]
  oqp->q_notify  = onfy;
 8004802:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 80049c0 <main+0x380>
  esp->next = (event_listener_t *)esp;
 8004806:	f8c0 a004 	str.w	sl, [r0, #4]
  iqp->q_link    = link;
 800480a:	4602      	mov	r2, r0
 800480c:	4607      	mov	r7, r0
 800480e:	62d0      	str	r0, [r2, #44]	; 0x2c
  oqp->q_top     = bp + size;
 8004810:	f100 0a74 	add.w	sl, r0, #116	; 0x74

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004814:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8004818:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 80049c4 <main+0x384>
 800481c:	f8c0 a040 	str.w	sl, [r0, #64]	; 0x40
  ST_ENABLE_STOP();
 8004820:	f041 0101 	orr.w	r1, r1, #1
  oqp->q_notify  = onfy;
 8004824:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
 8004828:	f8c0 b074 	str.w	fp, [r0, #116]	; 0x74
  oqp->q_link    = link;
 800482c:	6500      	str	r0, [r0, #80]	; 0x50
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800482e:	f242 0acf 	movw	sl, #8399	; 0x20cf
  ST_ENABLE_STOP();
 8004832:	f8ce 1008 	str.w	r1, [lr, #8]
  iqp->q_top     = bp + size;
 8004836:	4639      	mov	r1, r7
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004838:	f8c2 a028 	str.w	sl, [r2, #40]	; 0x28
  tqp->next = (thread_t *)tqp;
 800483c:	f100 0c0c 	add.w	ip, r0, #12
  sdp->state = SD_STOP;
 8004840:	f04f 0a01 	mov.w	sl, #1
 8004844:	f107 0e30 	add.w	lr, r7, #48	; 0x30
 8004848:	3164      	adds	r1, #100	; 0x64
  iqp->q_buffer  = bp;
 800484a:	3054      	adds	r0, #84	; 0x54
 800484c:	4d43      	ldr	r5, [pc, #268]	; (800495c <main+0x31c>)
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800484e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004850:	f8c7 c00c 	str.w	ip, [r7, #12]
  STM32_ST_TIM->CCMR1  = 0;
 8004854:	6194      	str	r4, [r2, #24]
  tqp->prev = (thread_t *)tqp;
 8004856:	f8c7 c010 	str.w	ip, [r7, #16]
  tqp->next = (thread_t *)tqp;
 800485a:	f8c7 e030 	str.w	lr, [r7, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 800485e:	f8c7 e034 	str.w	lr, [r7, #52]	; 0x34
 8004862:	61b8      	str	r0, [r7, #24]
  iqp->q_rdptr   = bp;
 8004864:	6278      	str	r0, [r7, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8004866:	6238      	str	r0, [r7, #32]
  iqp->q_top     = bp + size;
 8004868:	61f9      	str	r1, [r7, #28]
  oqp->q_buffer  = bp;
 800486a:	63f9      	str	r1, [r7, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 800486c:	64b9      	str	r1, [r7, #72]	; 0x48
  oqp->q_wrptr   = bp;
 800486e:	6479      	str	r1, [r7, #68]	; 0x44
 8004870:	f887 a008 	strb.w	sl, [r7, #8]
  STM32_ST_TIM->CCR[0] = 0;
 8004874:	6354      	str	r4, [r2, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8004876:	60d4      	str	r4, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 8004878:	6054      	str	r4, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800487a:	f8c2 a014 	str.w	sl, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800487e:	f8c2 a000 	str.w	sl, [r2]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004882:	4a37      	ldr	r2, [pc, #220]	; (8004960 <main+0x320>)
 8004884:	f04f 0b80 	mov.w	fp, #128	; 0x80
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004888:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800488c:	f882 b31c 	strb.w	fp, [r2, #796]	; 0x31c
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8004890:	f105 011c 	add.w	r1, r5, #28
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004894:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004898:	6010      	str	r0, [r2, #0]
  tmp->cumulative = (rttime_t)0;
 800489a:	2200      	movs	r2, #0
  chTMStartMeasurementX(&tm);
 800489c:	eb0d 0009 	add.w	r0, sp, r9
  tmp->best       = (rtcnt_t)-1;
 80048a0:	9304      	str	r3, [sp, #16]
  ch.vtlist.delta = (systime_t)-1;
 80048a2:	626b      	str	r3, [r5, #36]	; 0x24
  tqp->next = (thread_t *)tqp;
 80048a4:	602d      	str	r5, [r5, #0]
  tmp->cumulative = (rttime_t)0;
 80048a6:	2300      	movs	r3, #0
  tqp->prev = (thread_t *)tqp;
 80048a8:	606d      	str	r5, [r5, #4]
 80048aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80048ae:	61e9      	str	r1, [r5, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80048b0:	6229      	str	r1, [r5, #32]
  ch.rlist.prio = NOPRIO;
 80048b2:	60ac      	str	r4, [r5, #8]
  ch.vtlist.lasttime = (systime_t)0;
 80048b4:	62ac      	str	r4, [r5, #40]	; 0x28
  ch.tm.offset = (rtcnt_t)0;
 80048b6:	676c      	str	r4, [r5, #116]	; 0x74
  tmp->worst      = (rtcnt_t)0;
 80048b8:	9405      	str	r4, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 80048ba:	9406      	str	r4, [sp, #24]
  tmp->n          = (ucnt_t)0;
 80048bc:	9407      	str	r4, [sp, #28]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 80048be:	612d      	str	r5, [r5, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 80048c0:	616d      	str	r5, [r5, #20]
  chTMStartMeasurementX(&tm);
 80048c2:	f001 f885 	bl	80059d0 <chTMStartMeasurementX.constprop.66>
  chTMStopMeasurementX(&tm);
 80048c6:	eb0d 0009 	add.w	r0, sp, r9
 80048ca:	f7fb ffa9 	bl	8000820 <chTMStopMeasurementX>
  default_heap.provider = chCoreAllocAligned;
 80048ce:	4b25      	ldr	r3, [pc, #148]	; (8004964 <main+0x324>)
  nextmem = __heap_base__;
 80048d0:	4925      	ldr	r1, [pc, #148]	; (8004968 <main+0x328>)
 80048d2:	4826      	ldr	r0, [pc, #152]	; (800496c <main+0x32c>)
 80048d4:	6018      	str	r0, [r3, #0]
  endmem  = __heap_end__;
 80048d6:	4a26      	ldr	r2, [pc, #152]	; (8004970 <main+0x330>)
  nextmem = __heap_base__;
 80048d8:	4826      	ldr	r0, [pc, #152]	; (8004974 <main+0x334>)
 80048da:	6008      	str	r0, [r1, #0]
  endmem  = __heap_end__;
 80048dc:	4926      	ldr	r1, [pc, #152]	; (8004978 <main+0x338>)
 80048de:	6011      	str	r1, [r2, #0]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e0:	4a26      	ldr	r2, [pc, #152]	; (800497c <main+0x33c>)
  tp->name      = name;
 80048e2:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 80049c8 <main+0x388>
 80048e6:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80048e8:	4825      	ldr	r0, [pc, #148]	; (8004980 <main+0x340>)
 80048ea:	f8c5 e048 	str.w	lr, [r5, #72]	; 0x48
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048ee:	460f      	mov	r7, r1
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048f0:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  ch.tm.offset = tm.last;
 80048f4:	9906      	ldr	r1, [sp, #24]
 80048f6:	6769      	str	r1, [r5, #116]	; 0x74
  tqp->next = (thread_t *)tqp;
 80048f8:	eb03 0e09 	add.w	lr, r3, r9
 80048fc:	ea07 0c0c 	and.w	ip, r7, ip
  REG_INSERT(tp);
 8004900:	696f      	ldr	r7, [r5, #20]
 8004902:	f8c3 e010 	str.w	lr, [r3, #16]
 8004906:	f105 0130 	add.w	r1, r5, #48	; 0x30
  tqp->prev = (thread_t *)tqp;
 800490a:	f8c3 e014 	str.w	lr, [r3, #20]
  reg_value  =  (reg_value                                   |
 800490e:	ea4c 0000 	orr.w	r0, ip, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004912:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 80049cc <main+0x38c>
  tp->prio      = prio;
 8004916:	f8c5 b038 	str.w	fp, [r5, #56]	; 0x38
  tp->flags     = CH_FLAG_MODE_STATIC;
 800491a:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
  tp->realprio  = prio;
 800491e:	f8c5 b06c 	str.w	fp, [r5, #108]	; 0x6c
  tp->epending  = (eventmask_t)0;
 8004922:	666c      	str	r4, [r5, #100]	; 0x64
  tp->refs      = (trefs_t)1;
 8004924:	f885 a052 	strb.w	sl, [r5, #82]	; 0x52
  tp->mtxlist   = NULL;
 8004928:	66ac      	str	r4, [r5, #104]	; 0x68
  REG_INSERT(tp);
 800492a:	646f      	str	r7, [r5, #68]	; 0x44
 800492c:	642d      	str	r5, [r5, #64]	; 0x40
 800492e:	619c      	str	r4, [r3, #24]
 8004930:	6139      	str	r1, [r7, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8004932:	60d0      	str	r0, [r2, #12]
 8004934:	e04c      	b.n	80049d0 <main+0x390>
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800
 800493c:	40007000 	.word	0x40007000
 8004940:	40020000 	.word	0x40020000
 8004944:	40021400 	.word	0x40021400
 8004948:	40021800 	.word	0x40021800
 800494c:	40021c00 	.word	0x40021c00
 8004950:	40022000 	.word	0x40022000
 8004954:	20000884 	.word	0x20000884
 8004958:	08007250 	.word	0x08007250
 800495c:	20001238 	.word	0x20001238
 8004960:	e000e100 	.word	0xe000e100
 8004964:	200012b0 	.word	0x200012b0
 8004968:	200009ec 	.word	0x200009ec
 800496c:	080003f1 	.word	0x080003f1
 8004970:	200009d8 	.word	0x200009d8
 8004974:	20001320 	.word	0x20001320
 8004978:	20020000 	.word	0x20020000
 800497c:	e000ed00 	.word	0xe000ed00
 8004980:	05fa0300 	.word	0x05fa0300
 8004984:	40010054 	.word	0x40010054
 8004988:	40020400 	.word	0x40020400
 800498c:	55560000 	.word	0x55560000
 8004990:	40020800 	.word	0x40020800
 8004994:	40020c00 	.word	0x40020c00
 8004998:	40021000 	.word	0x40021000
 800499c:	000aaa00 	.word	0x000aaa00
 80049a0:	2aa0aa00 	.word	0x2aa0aa00
 80049a4:	55514515 	.word	0x55514515
 80049a8:	00082080 	.word	0x00082080
 80049ac:	00060600 	.word	0x00060600
 80049b0:	02208001 	.word	0x02208001
 80049b4:	00555055 	.word	0x00555055
 80049b8:	55000100 	.word	0x55000100
 80049bc:	e0042000 	.word	0xe0042000
 80049c0:	080002c1 	.word	0x080002c1
 80049c4:	40004400 	.word	0x40004400
 80049c8:	080064e0 	.word	0x080064e0
 80049cc:	e000edf0 	.word	0xe000edf0
 80049d0:	f8de c00c 	ldr.w	ip, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80049d4:	4839      	ldr	r0, [pc, #228]	; (8004abc <main+0x47c>)
  H_NEXT(&default_heap.header) = NULL;
 80049d6:	609c      	str	r4, [r3, #8]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80049d8:	f04c 7c80 	orr.w	ip, ip, #16777216	; 0x1000000
 80049dc:	f8ce c00c 	str.w	ip, [lr, #12]
  tqp->next = (thread_t *)tqp;
 80049e0:	f105 0e5c 	add.w	lr, r5, #92	; 0x5c
  tlp->next = (thread_t *)tlp;
 80049e4:	f105 0c58 	add.w	ip, r5, #88	; 0x58
  currp->state = CH_STATE_CURRENT;
 80049e8:	f885 a050 	strb.w	sl, [r5, #80]	; 0x50
  H_PAGES(&default_heap.header) = 0;
 80049ec:	60dc      	str	r4, [r3, #12]
 80049ee:	6169      	str	r1, [r5, #20]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80049f0:	61a9      	str	r1, [r5, #24]
  currp->wabase = NULL;
 80049f2:	64ec      	str	r4, [r5, #76]	; 0x4c
 80049f4:	f8c5 c058 	str.w	ip, [r5, #88]	; 0x58
  tqp->next = (thread_t *)tqp;
 80049f8:	f8c5 e05c 	str.w	lr, [r5, #92]	; 0x5c
  tqp->prev = (thread_t *)tqp;
 80049fc:	f8c5 e060 	str.w	lr, [r5, #96]	; 0x60
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004a00:	6803      	ldr	r3, [r0, #0]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a02:	2520      	movs	r5, #32
 8004a04:	ea43 030a 	orr.w	r3, r3, sl
 8004a08:	6003      	str	r3, [r0, #0]
 8004a0a:	f882 901f 	strb.w	r9, [r2, #31]
 8004a0e:	f882 5022 	strb.w	r5, [r2, #34]	; 0x22
 8004a12:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 8004a16:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004a18:	f385 8811 	msr	BASEPRI, r5
  tp = chThdCreateSuspendedI(tdp);
 8004a1c:	4828      	ldr	r0, [pc, #160]	; (8004ac0 <main+0x480>)
 8004a1e:	f7fb ff57 	bl	80008d0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8004a22:	4621      	mov	r1, r4
 8004a24:	f7fb ffe4 	bl	80009f0 <chSchWakeupS>
 8004a28:	f384 8811 	msr	BASEPRI, r4
 8004a2c:	f385 8811 	msr	BASEPRI, r5
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8004a30:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <main+0x484>)
 8004a32:	7a1b      	ldrb	r3, [r3, #8]
 8004a34:	4553      	cmp	r3, sl
 8004a36:	d10b      	bne.n	8004a50 <main+0x410>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 8004a38:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a3e:	6433      	str	r3, [r6, #64]	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004a40:	4b21      	ldr	r3, [pc, #132]	; (8004ac8 <main+0x488>)
 8004a42:	22c0      	movs	r2, #192	; 0xc0
 8004a44:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004a48:	f8c3 8184 	str.w	r8, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004a4c:	f8c3 8004 	str.w	r8, [r3, #4]
  USART_TypeDef *u = sdp->usart;
 8004a50:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <main+0x484>)
 8004a52:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8004a54:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <main+0x48c>)
 8004a56:	429a      	cmp	r2, r3
 8004a58:	f000 815a 	beq.w	8004d10 <main+0x6d0>
 8004a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a60:	429a      	cmp	r2, r3
 8004a62:	f000 8155 	beq.w	8004d10 <main+0x6d0>
    u->BRR = STM32_PCLK1 / config->speed;
 8004a66:	f240 4345 	movw	r3, #1093	; 0x445
 8004a6a:	6093      	str	r3, [r2, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004a6c:	2140      	movs	r1, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004a6e:	2301      	movs	r3, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004a70:	f242 102c 	movw	r0, #8492	; 0x212c
  u->SR = 0;
 8004a74:	2400      	movs	r4, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004a76:	6111      	str	r1, [r2, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004a78:	6153      	str	r3, [r2, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004a7a:	60d0      	str	r0, [r2, #12]
  u->SR = 0;
 8004a7c:	6014      	str	r4, [r2, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8004a7e:	6810      	ldr	r0, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004a80:	6852      	ldr	r2, [r2, #4]
    sdp->rxmask = 0xFF;
 8004a82:	4a10      	ldr	r2, [pc, #64]	; (8004ac4 <main+0x484>)
 8004a84:	21ff      	movs	r1, #255	; 0xff
  sdp->state = SD_READY;
 8004a86:	2302      	movs	r3, #2
 8004a88:	f882 1078 	strb.w	r1, [r2, #120]	; 0x78
 8004a8c:	7213      	strb	r3, [r2, #8]
 8004a8e:	f384 8811 	msr	BASEPRI, r4
  /*
   * Activates the serial driver 2 using the driver default configuration.
   * PA2(TX) and PA3(RX) are routed to USART2.
   */
  sdStart(&SD2, NULL);
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8004a92:	2004      	movs	r0, #4
 8004a94:	f001 fab4 	bl	8006000 <_pal_lld_setgroupmode.constprop.5>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8004a98:	2008      	movs	r0, #8
 8004a9a:	f001 fab1 	bl	8006000 <_pal_lld_setgroupmode.constprop.5>

  /*
   * Creates the example thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8004a9e:	4623      	mov	r3, r4
 8004aa0:	4a0b      	ldr	r2, [pc, #44]	; (8004ad0 <main+0x490>)
 8004aa2:	480c      	ldr	r0, [pc, #48]	; (8004ad4 <main+0x494>)
 8004aa4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8004adc <main+0x49c>
 8004aa8:	f8df 9034 	ldr.w	r9, [pc, #52]	; 8004ae0 <main+0x4a0>
 8004aac:	f8df b028 	ldr.w	fp, [pc, #40]	; 8004ad8 <main+0x498>
 8004ab0:	f8df a030 	ldr.w	sl, [pc, #48]	; 8004ae4 <main+0x4a4>
 8004ab4:	2180      	movs	r1, #128	; 0x80
 8004ab6:	f000 ff93 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8004aba:	e019      	b.n	8004af0 <main+0x4b0>
 8004abc:	e0001000 	.word	0xe0001000
 8004ac0:	080064f8 	.word	0x080064f8
 8004ac4:	20000884 	.word	0x20000884
 8004ac8:	e000e100 	.word	0xe000e100
 8004acc:	40011000 	.word	0x40011000
 8004ad0:	08003f71 	.word	0x08003f71
 8004ad4:	200010c0 	.word	0x200010c0
 8004ad8:	20001070 	.word	0x20001070
 8004adc:	20001068 	.word	0x20001068
 8004ae0:	20001080 	.word	0x20001080
 8004ae4:	2000131d 	.word	0x2000131d
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON))
      test_execute((BaseSequentialStream *)&SD2);
    chThdSleepMilliseconds(500);
 8004ae8:	f241 3088 	movw	r0, #5000	; 0x1388
 8004aec:	f7fc fdd0 	bl	8001690 <chThdSleep>
    if (palReadPad(GPIOA, GPIOA_BUTTON))
 8004af0:	4b89      	ldr	r3, [pc, #548]	; (8004d18 <main+0x6d8>)
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	07db      	lsls	r3, r3, #31
 8004af6:	d5f7      	bpl.n	8004ae8 <main+0x4a8>
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream) {
  int i, j;

  test_chp = stream;
 8004af8:	4b88      	ldr	r3, [pc, #544]	; (8004d1c <main+0x6dc>)
  test_println("");
 8004afa:	4889      	ldr	r0, [pc, #548]	; (8004d20 <main+0x6e0>)
  test_chp = stream;
 8004afc:	f8c8 3000 	str.w	r3, [r8]
  test_println("");
 8004b00:	f7fb fd16 	bl	8000530 <test_println>
#if defined(TEST_SUITE_NAME)
  test_println("*** " TEST_SUITE_NAME);
 8004b04:	4887      	ldr	r0, [pc, #540]	; (8004d24 <main+0x6e4>)
#else
  test_println("*** ChibiOS test suite");
#endif
  test_println("***");
 8004b06:	4c88      	ldr	r4, [pc, #544]	; (8004d28 <main+0x6e8>)
  test_println("*** " TEST_SUITE_NAME);
 8004b08:	f7fb fd12 	bl	8000530 <test_println>
  test_println("***");
 8004b0c:	4887      	ldr	r0, [pc, #540]	; (8004d2c <main+0x6ec>)
 8004b0e:	f7fb fd0f 	bl	8000530 <test_println>
 8004b12:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8004b14:	f8d8 0000 	ldr.w	r0, [r8]
 8004b18:	6803      	ldr	r3, [r0, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4798      	blx	r3
  while (*msgp)
 8004b1e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004b22:	2900      	cmp	r1, #0
 8004b24:	d1f6      	bne.n	8004b14 <main+0x4d4>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8004b26:	4882      	ldr	r0, [pc, #520]	; (8004d30 <main+0x6f0>)
 8004b28:	4c82      	ldr	r4, [pc, #520]	; (8004d34 <main+0x6f4>)
 8004b2a:	f7fb fd01 	bl	8000530 <test_println>
 8004b2e:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8004b30:	f8d8 0000 	ldr.w	r0, [r8]
 8004b34:	6803      	ldr	r3, [r0, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4798      	blx	r3
  while (*msgp)
 8004b3a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004b3e:	2900      	cmp	r1, #0
 8004b40:	d1f6      	bne.n	8004b30 <main+0x4f0>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8004b42:	487d      	ldr	r0, [pc, #500]	; (8004d38 <main+0x6f8>)
 8004b44:	4c7d      	ldr	r4, [pc, #500]	; (8004d3c <main+0x6fc>)
 8004b46:	f7fb fcf3 	bl	8000530 <test_println>
 8004b4a:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8004b4c:	f8d8 0000 	ldr.w	r0, [r8]
 8004b50:	6803      	ldr	r3, [r0, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	4798      	blx	r3
  while (*msgp)
 8004b56:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004b5a:	2900      	cmp	r1, #0
 8004b5c:	d1f6      	bne.n	8004b4c <main+0x50c>
 8004b5e:	4b78      	ldr	r3, [pc, #480]	; (8004d40 <main+0x700>)
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8004b60:	4878      	ldr	r0, [pc, #480]	; (8004d44 <main+0x704>)
 8004b62:	9303      	str	r3, [sp, #12]
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");

  test_global_fail = false;
 8004b64:	4b78      	ldr	r3, [pc, #480]	; (8004d48 <main+0x708>)
 8004b66:	9101      	str	r1, [sp, #4]
 8004b68:	9302      	str	r3, [sp, #8]
  test_println(BOARD_NAME);
 8004b6a:	f7fb fce1 	bl	8000530 <test_println>
  test_println("");
 8004b6e:	486c      	ldr	r0, [pc, #432]	; (8004d20 <main+0x6e0>)
  test_global_fail = false;
 8004b70:	4e76      	ldr	r6, [pc, #472]	; (8004d4c <main+0x70c>)
  test_println("");
 8004b72:	f7fb fcdd 	bl	8000530 <test_println>
  test_global_fail = false;
 8004b76:	4b76      	ldr	r3, [pc, #472]	; (8004d50 <main+0x710>)
 8004b78:	9901      	ldr	r1, [sp, #4]
 8004b7a:	7019      	strb	r1, [r3, #0]
 8004b7c:	4b75      	ldr	r3, [pc, #468]	; (8004d54 <main+0x714>)
 8004b7e:	9a01      	ldr	r2, [sp, #4]
 8004b80:	3201      	adds	r2, #1
 8004b82:	9201      	str	r2, [sp, #4]
  while (cp < test_tokp)
 8004b84:	2500      	movs	r5, #0
  i = 0;
  while (test_suite[i]) {
    j = 0;
    while (test_suite[i][j]) {
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 8099 	beq.w	8004cbe <main+0x67e>
      print_line();
 8004b8c:	4c72      	ldr	r4, [pc, #456]	; (8004d58 <main+0x718>)
 8004b8e:	f7fb fd77 	bl	8000680 <print_line.lto_priv.164>
 8004b92:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8004b94:	f8d8 0000 	ldr.w	r0, [r8]
 8004b98:	6803      	ldr	r3, [r0, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	4798      	blx	r3
  while (*msgp)
 8004b9e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004ba2:	2900      	cmp	r1, #0
 8004ba4:	d1f6      	bne.n	8004b94 <main+0x554>
      test_print("--- Test Case ");
      test_printn(i + 1);
 8004ba6:	9801      	ldr	r0, [sp, #4]
      test_print(".");
      test_printn(j + 1);
 8004ba8:	4c6c      	ldr	r4, [pc, #432]	; (8004d5c <main+0x71c>)
      test_printn(i + 1);
 8004baa:	f7fb fcf9 	bl	80005a0 <test_printn>
    streamPut(test_chp, *msgp++);
 8004bae:	f8d8 0000 	ldr.w	r0, [r8]
 8004bb2:	6803      	ldr	r3, [r0, #0]
 8004bb4:	212e      	movs	r1, #46	; 0x2e
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	1c6f      	adds	r7, r5, #1
 8004bba:	4798      	blx	r3
      test_printn(j + 1);
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	f7fb fcef 	bl	80005a0 <test_printn>
 8004bc2:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8004bc4:	f8d8 0000 	ldr.w	r0, [r8]
 8004bc8:	6803      	ldr	r3, [r0, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4798      	blx	r3
  while (*msgp)
 8004bce:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004bd2:	2900      	cmp	r1, #0
 8004bd4:	d1f6      	bne.n	8004bc4 <main+0x584>
      test_print(" (");
      test_print(test_suite[i][j]->name);
 8004bd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bda:	681c      	ldr	r4, [r3, #0]
  while (*msgp)
 8004bdc:	7821      	ldrb	r1, [r4, #0]
 8004bde:	b141      	cbz	r1, 8004bf2 <main+0x5b2>
    streamPut(test_chp, *msgp++);
 8004be0:	f8d8 0000 	ldr.w	r0, [r8]
 8004be4:	6803      	ldr	r3, [r0, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4798      	blx	r3
  while (*msgp)
 8004bea:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004bee:	2900      	cmp	r1, #0
 8004bf0:	d1f6      	bne.n	8004be0 <main+0x5a0>
      test_println(")");
 8004bf2:	485b      	ldr	r0, [pc, #364]	; (8004d60 <main+0x720>)
 8004bf4:	f7fb fc9c 	bl	8000530 <test_println>
  chThdSleep(time);
 8004bf8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004bfc:	f7fc fd48 	bl	8001690 <chThdSleep>
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(test_suite[i][j]);
 8004c00:	f856 4025 	ldr.w	r4, [r6, r5, lsl #2]
  test_tokp = test_tokens_buffer;
 8004c04:	f8c9 b000 	str.w	fp, [r9]
  if (tcp->setup != NULL)
 8004c08:	6863      	ldr	r3, [r4, #4]
  test_local_fail = false;
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f88a 2000 	strb.w	r2, [sl]
  if (tcp->setup != NULL)
 8004c10:	b103      	cbz	r3, 8004c14 <main+0x5d4>
    tcp->setup();
 8004c12:	4798      	blx	r3
  tcp->execute();
 8004c14:	68e3      	ldr	r3, [r4, #12]
 8004c16:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8004c18:	68a3      	ldr	r3, [r4, #8]
 8004c1a:	b103      	cbz	r3, 8004c1e <main+0x5de>
    tcp->teardown();
 8004c1c:	4798      	blx	r3
      if (test_local_fail) {
 8004c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d055      	beq.n	8004cd2 <main+0x692>
 8004c26:	4c4f      	ldr	r4, [pc, #316]	; (8004d64 <main+0x724>)
 8004c28:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8004c2a:	f8d8 0000 	ldr.w	r0, [r8]
 8004c2e:	6803      	ldr	r3, [r0, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	4798      	blx	r3
  while (*msgp)
 8004c34:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004c38:	2900      	cmp	r1, #0
 8004c3a:	d1f6      	bne.n	8004c2a <main+0x5ea>
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
 8004c3c:	4b4a      	ldr	r3, [pc, #296]	; (8004d68 <main+0x728>)
 8004c3e:	4c4b      	ldr	r4, [pc, #300]	; (8004d6c <main+0x72c>)
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	f7fb fcad 	bl	80005a0 <test_printn>
 8004c46:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8004c48:	f8d8 0000 	ldr.w	r0, [r8]
 8004c4c:	6803      	ldr	r3, [r0, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4798      	blx	r3
  while (*msgp)
 8004c52:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004c56:	2900      	cmp	r1, #0
 8004c58:	d1f6      	bne.n	8004c48 <main+0x608>
  while (cp < test_tokp)
 8004c5a:	f8d9 3000 	ldr.w	r3, [r9]
 8004c5e:	455b      	cmp	r3, fp
 8004c60:	d90b      	bls.n	8004c7a <main+0x63a>
 8004c62:	4c43      	ldr	r4, [pc, #268]	; (8004d70 <main+0x730>)
    streamPut(test_chp, *cp++);
 8004c64:	f8d8 0000 	ldr.w	r0, [r8]
 8004c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c6c:	6803      	ldr	r3, [r0, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	4798      	blx	r3
  while (cp < test_tokp)
 8004c72:	f8d9 3000 	ldr.w	r3, [r9]
 8004c76:	429c      	cmp	r4, r3
 8004c78:	d3f4      	bcc.n	8004c64 <main+0x624>
 8004c7a:	4c3e      	ldr	r4, [pc, #248]	; (8004d74 <main+0x734>)
 8004c7c:	215d      	movs	r1, #93	; 0x5d
    streamPut(test_chp, *msgp++);
 8004c7e:	f8d8 0000 	ldr.w	r0, [r8]
 8004c82:	6803      	ldr	r3, [r0, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	4798      	blx	r3
  while (*msgp)
 8004c88:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004c8c:	2900      	cmp	r1, #0
 8004c8e:	d1f6      	bne.n	8004c7e <main+0x63e>
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
 8004c90:	4b39      	ldr	r3, [pc, #228]	; (8004d78 <main+0x738>)
 8004c92:	681c      	ldr	r4, [r3, #0]
  while (*msgp)
 8004c94:	7821      	ldrb	r1, [r4, #0]
 8004c96:	b141      	cbz	r1, 8004caa <main+0x66a>
    streamPut(test_chp, *msgp++);
 8004c98:	f8d8 0000 	ldr.w	r0, [r8]
 8004c9c:	6803      	ldr	r3, [r0, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4798      	blx	r3
  while (*msgp)
 8004ca2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004ca6:	2900      	cmp	r1, #0
 8004ca8:	d1f6      	bne.n	8004c98 <main+0x658>
        test_println("\")");
 8004caa:	4834      	ldr	r0, [pc, #208]	; (8004d7c <main+0x73c>)
 8004cac:	f7fb fc40 	bl	8000530 <test_println>
 8004cb0:	eb06 0385 	add.w	r3, r6, r5, lsl #2
  while (cp < test_tokp)
 8004cb4:	463d      	mov	r5, r7
 8004cb6:	685b      	ldr	r3, [r3, #4]
    while (test_suite[i][j]) {
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f47f af67 	bne.w	8004b8c <main+0x54c>
  while (test_suite[i]) {
 8004cbe:	9e02      	ldr	r6, [sp, #8]
 8004cc0:	b15e      	cbz	r6, 8004cda <main+0x69a>
      }
      else
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
 8004cc2:	9a03      	ldr	r2, [sp, #12]
 8004cc4:	6833      	ldr	r3, [r6, #0]
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	f851 2b04 	ldr.w	r2, [r1], #4
 8004ccc:	9202      	str	r2, [sp, #8]
 8004cce:	9103      	str	r1, [sp, #12]
 8004cd0:	e755      	b.n	8004b7e <main+0x53e>
        test_println("--- Result: SUCCESS");
 8004cd2:	482b      	ldr	r0, [pc, #172]	; (8004d80 <main+0x740>)
 8004cd4:	f7fb fc2c 	bl	8000530 <test_println>
 8004cd8:	e7ea      	b.n	8004cb0 <main+0x670>
  }
  print_line();
 8004cda:	f7fb fcd1 	bl	8000680 <print_line.lto_priv.164>
  test_println("");
 8004cde:	4c29      	ldr	r4, [pc, #164]	; (8004d84 <main+0x744>)
 8004ce0:	480f      	ldr	r0, [pc, #60]	; (8004d20 <main+0x6e0>)
 8004ce2:	f7fb fc25 	bl	8000530 <test_println>
 8004ce6:	2146      	movs	r1, #70	; 0x46
    streamPut(test_chp, *msgp++);
 8004ce8:	f8d8 0000 	ldr.w	r0, [r8]
 8004cec:	6803      	ldr	r3, [r0, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4798      	blx	r3
  while (*msgp)
 8004cf2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004cf6:	2900      	cmp	r1, #0
 8004cf8:	d1f6      	bne.n	8004ce8 <main+0x6a8>
  test_print("Final result: ");
  if (test_global_fail)
 8004cfa:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <main+0x710>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	b91b      	cbnz	r3, 8004d08 <main+0x6c8>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8004d00:	4821      	ldr	r0, [pc, #132]	; (8004d88 <main+0x748>)
 8004d02:	f7fb fc15 	bl	8000530 <test_println>
 8004d06:	e6ef      	b.n	8004ae8 <main+0x4a8>
    test_println("FAILURE");
 8004d08:	4820      	ldr	r0, [pc, #128]	; (8004d8c <main+0x74c>)
 8004d0a:	f7fb fc11 	bl	8000530 <test_println>
 8004d0e:	e6eb      	b.n	8004ae8 <main+0x4a8>
    u->BRR = STM32_PCLK2 / config->speed;
 8004d10:	f640 038b 	movw	r3, #2187	; 0x88b
 8004d14:	6093      	str	r3, [r2, #8]
 8004d16:	e6a9      	b.n	8004a6c <main+0x42c>
 8004d18:	40020000 	.word	0x40020000
 8004d1c:	20000884 	.word	0x20000884
 8004d20:	08006ff8 	.word	0x08006ff8
 8004d24:	08006590 	.word	0x08006590
 8004d28:	08006510 	.word	0x08006510
 8004d2c:	080065ac 	.word	0x080065ac
 8004d30:	080065b0 	.word	0x080065b0
 8004d34:	08006524 	.word	0x08006524
 8004d38:	080065c8 	.word	0x080065c8
 8004d3c:	08006538 	.word	0x08006538
 8004d40:	08007224 	.word	0x08007224
 8004d44:	080065f4 	.word	0x080065f4
 8004d48:	08007134 	.word	0x08007134
 8004d4c:	08007120 	.word	0x08007120
 8004d50:	2000131c 	.word	0x2000131c
 8004d54:	08006cf0 	.word	0x08006cf0
 8004d58:	0800654c 	.word	0x0800654c
 8004d5c:	0800655c 	.word	0x0800655c
 8004d60:	0800661c 	.word	0x0800661c
 8004d64:	08006560 	.word	0x08006560
 8004d68:	2000106c 	.word	0x2000106c
 8004d6c:	08006578 	.word	0x08006578
 8004d70:	20001070 	.word	0x20001070
 8004d74:	0800657c 	.word	0x0800657c
 8004d78:	20001318 	.word	0x20001318
 8004d7c:	08006620 	.word	0x08006620
 8004d80:	08006624 	.word	0x08006624
 8004d84:	08006580 	.word	0x08006580
 8004d88:	08006630 	.word	0x08006630
 8004d8c:	08006638 	.word	0x08006638

08004d90 <tmo.lto_priv.74>:
static void tmo(void *param) {(void)param;}
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
	...

08004da0 <test_011_002_setup.lto_priv.159>:
  mp->next = NULL;
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <test_011_002_setup.lto_priv.159+0x10>)
 8004da2:	2200      	movs	r2, #0
  mp->object_size = size;
 8004da4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004da8:	6059      	str	r1, [r3, #4]
  mp->next = NULL;
 8004daa:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 8004dac:	609a      	str	r2, [r3, #8]
 8004dae:	4770      	bx	lr
 8004db0:	20001300 	.word	0x20001300
	...

08004dc0 <test_011_001_setup.lto_priv.157>:
  H_NEXT(&heapp->header) = hp;
 8004dc0:	4908      	ldr	r1, [pc, #32]	; (8004de4 <test_011_001_setup.lto_priv.157+0x24>)
  heapp->provider = NULL;
 8004dc2:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <test_011_001_setup.lto_priv.157+0x28>)
 *   freeing memory.
 * - [11.1.7] Getting heap info again for verification.
 * .
 */

static void test_011_001_setup(void) {
 8004dc4:	b410      	push	{r4}
 8004dc6:	2200      	movs	r2, #0
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8004dc8:	24cc      	movs	r4, #204	; 0xcc
 8004dca:	e881 0014 	stmia.w	r1, {r2, r4}
  tqp->next = (thread_t *)tqp;
 8004dce:	f103 0010 	add.w	r0, r3, #16
  H_NEXT(&heapp->header) = hp;
 8004dd2:	6099      	str	r1, [r3, #8]
  H_PAGES(&heapp->header) = 0;
 8004dd4:	60da      	str	r2, [r3, #12]
 8004dd6:	6118      	str	r0, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8004dd8:	6158      	str	r0, [r3, #20]
  heapp->provider = NULL;
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	619a      	str	r2, [r3, #24]
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}
 8004dde:	bc10      	pop	{r4}
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20000a00 	.word	0x20000a00
 8004de8:	200012d0 	.word	0x200012d0
 8004dec:	00000000 	.word	0x00000000

08004df0 <test_010_001_setup.lto_priv.154>:
  H_NEXT(&heapp->header) = hp;
 8004df0:	4908      	ldr	r1, [pc, #32]	; (8004e14 <test_010_001_setup.lto_priv.154+0x24>)
  heapp->provider = NULL;
 8004df2:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <test_010_001_setup.lto_priv.154+0x28>)
 * - [10.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void test_010_001_setup(void) {
 8004df4:	b410      	push	{r4}
 8004df6:	2200      	movs	r2, #0
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8004df8:	24cc      	movs	r4, #204	; 0xcc
 8004dfa:	e881 0014 	stmia.w	r1, {r2, r4}
  tqp->next = (thread_t *)tqp;
 8004dfe:	f103 0010 	add.w	r0, r3, #16
  H_NEXT(&heapp->header) = hp;
 8004e02:	6099      	str	r1, [r3, #8]
  H_PAGES(&heapp->header) = 0;
 8004e04:	60da      	str	r2, [r3, #12]
 8004e06:	6118      	str	r0, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8004e08:	6158      	str	r0, [r3, #20]
  heapp->provider = NULL;
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	619a      	str	r2, [r3, #24]
  chHeapObjectInit(&test_heap, test_buffer, sizeof(test_buffer));
}
 8004e0e:	bc10      	pop	{r4}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000a00 	.word	0x20000a00
 8004e18:	20001218 	.word	0x20001218
 8004e1c:	00000000 	.word	0x00000000

08004e20 <test_009_003_setup.lto_priv.152>:
  mp->next = NULL;
 8004e20:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <test_009_003_setup.lto_priv.152+0x14>)
 8004e22:	2200      	movs	r2, #0
  mp->object_size = size;
 8004e24:	2104      	movs	r1, #4
  tqp->next = (thread_t *)tqp;
 8004e26:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8004e28:	605b      	str	r3, [r3, #4]
 8004e2a:	6119      	str	r1, [r3, #16]
  mp->next = NULL;
 8004e2c:	60da      	str	r2, [r3, #12]
  mp->provider = provider;
 8004e2e:	615a      	str	r2, [r3, #20]
 8004e30:	609a      	str	r2, [r3, #8]
 8004e32:	4770      	bx	lr
 8004e34:	2000082c 	.word	0x2000082c
	...

08004e40 <test_009_002_setup.lto_priv.150>:
 8004e40:	f7ff bfee 	b.w	8004e20 <test_009_003_setup.lto_priv.152>
	...

08004e50 <bmk_thread8.lto_priv.75>:
static THD_FUNCTION(bmk_thread8, p) {
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	4d09      	ldr	r5, [pc, #36]	; (8004e78 <bmk_thread8.lto_priv.75+0x28>)
 8004e54:	4604      	mov	r4, r0
    chThdYield();
 8004e56:	f7fb fd0b 	bl	8000870 <chThdYield>
    chThdYield();
 8004e5a:	f7fb fd09 	bl	8000870 <chThdYield>
    chThdYield();
 8004e5e:	f7fb fd07 	bl	8000870 <chThdYield>
    chThdYield();
 8004e62:	f7fb fd05 	bl	8000870 <chThdYield>
    (*(uint32_t *)p) += 4;
 8004e66:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8004e68:	69aa      	ldr	r2, [r5, #24]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
 8004e6e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8004e72:	075b      	lsls	r3, r3, #29
 8004e74:	d5ef      	bpl.n	8004e56 <bmk_thread8.lto_priv.75+0x6>
}
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	20001238 	.word	0x20001238
 8004e7c:	00000000 	.word	0x00000000

08004e80 <bmk_thread7.lto_priv.76>:
static THD_FUNCTION(bmk_thread7, p) {
 8004e80:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8004e82:	4c08      	ldr	r4, [pc, #32]	; (8004ea4 <bmk_thread7.lto_priv.76+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8004e84:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8004e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e8a:	075a      	lsls	r2, r3, #29
 8004e8c:	d408      	bmi.n	8004ea0 <bmk_thread7.lto_priv.76+0x20>
    chSemWait(&sem1);
 8004e8e:	4d06      	ldr	r5, [pc, #24]	; (8004ea8 <bmk_thread7.lto_priv.76+0x28>)
 8004e90:	4628      	mov	r0, r5
 8004e92:	f7fb fe35 	bl	8000b00 <chSemWait>
 8004e96:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8004e98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e9c:	075b      	lsls	r3, r3, #29
 8004e9e:	d5f7      	bpl.n	8004e90 <bmk_thread7.lto_priv.76+0x10>
 8004ea0:	bd38      	pop	{r3, r4, r5, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20001238 	.word	0x20001238
 8004ea8:	200009f0 	.word	0x200009f0
 8004eac:	00000000 	.word	0x00000000

08004eb0 <bmk_thread4.lto_priv.78>:
  return ch.rlist.current;
 8004eb0:	4a07      	ldr	r2, [pc, #28]	; (8004ed0 <bmk_thread4.lto_priv.78+0x20>)
static THD_FUNCTION(bmk_thread4, p) {
 8004eb2:	b510      	push	{r4, lr}
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	6994      	ldr	r4, [r2, #24]
 8004eb8:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8004ebc:	2003      	movs	r0, #3
 8004ebe:	f7fb fde7 	bl	8000a90 <chSchGoSleepS>
  } while (msg == MSG_OK);
 8004ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f9      	beq.n	8004ebc <bmk_thread4.lto_priv.78+0xc>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	bd10      	pop	{r4, pc}
 8004ed0:	20001238 	.word	0x20001238
	...

08004ee0 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 8004ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee4:	4605      	mov	r5, r0
  start = test_wait_tick();
 8004ee6:	f7fe ff6b 	bl	8003dc0 <test_wait_tick>
  uint32_t n = 0;
 8004eea:	2400      	movs	r4, #0
  start = test_wait_tick();
 8004eec:	4680      	mov	r8, r0
 8004eee:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 8004ef2:	f242 760f 	movw	r6, #9999	; 0x270f
    (void)chMsgSend(tp, 1);
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f7fb fe41 	bl	8000b80 <chMsgSend>
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	eba3 0308 	sub.w	r3, r3, r8
  } while (chVTIsSystemTimeWithinX(start, end));
 8004f04:	42b3      	cmp	r3, r6
    n++;
 8004f06:	f104 0401 	add.w	r4, r4, #1
  } while (chVTIsSystemTimeWithinX(start, end));
 8004f0a:	d9f4      	bls.n	8004ef6 <msg_loop_test+0x16>
  (void)chMsgSend(tp, 0);
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	2100      	movs	r1, #0
 8004f10:	f7fb fe36 	bl	8000b80 <chMsgSend>
}
 8004f14:	4620      	mov	r0, r4
 8004f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f1a:	bf00      	nop
 8004f1c:	0000      	movs	r0, r0
	...

08004f20 <test_012_003_execute.lto_priv.163>:
static void test_012_003_execute(void) {
 8004f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f24:	4e2c      	ldr	r6, [pc, #176]	; (8004fd8 <test_012_003_execute.lto_priv.163+0xb8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004f26:	4d2d      	ldr	r5, [pc, #180]	; (8004fdc <test_012_003_execute.lto_priv.163+0xbc>)
  return chThdGetSelfX()->prio;
 8004f28:	69b3      	ldr	r3, [r6, #24]
  test_set_step(1);
 8004f2a:	4f2d      	ldr	r7, [pc, #180]	; (8004fe0 <test_012_003_execute.lto_priv.163+0xc0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004f2c:	6899      	ldr	r1, [r3, #8]
 8004f2e:	4a2d      	ldr	r2, [pc, #180]	; (8004fe4 <test_012_003_execute.lto_priv.163+0xc4>)
 8004f30:	4c2d      	ldr	r4, [pc, #180]	; (8004fe8 <test_012_003_execute.lto_priv.163+0xc8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8004f32:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8004ff8 <test_012_003_execute.lto_priv.163+0xd8>
  test_set_step(1);
 8004f36:	f04f 0e01 	mov.w	lr, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004f3a:	3101      	adds	r1, #1
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	2300      	movs	r3, #0
  test_set_step(1);
 8004f40:	f8c7 e000 	str.w	lr, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004f44:	f000 fd4c 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8004f48:	69b3      	ldr	r3, [r6, #24]
 8004f4a:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8004f4c:	6899      	ldr	r1, [r3, #8]
  test_set_step(2);
 8004f4e:	f04f 0e02 	mov.w	lr, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8004f52:	4642      	mov	r2, r8
 8004f54:	3902      	subs	r1, #2
 8004f56:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8004f5a:	2300      	movs	r3, #0
  test_set_step(2);
 8004f5c:	f8c7 e000 	str.w	lr, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8004f60:	f000 fd3e 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8004f64:	69b3      	ldr	r3, [r6, #24]
 8004f66:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8004f68:	6899      	ldr	r1, [r3, #8]
 8004f6a:	4642      	mov	r2, r8
 8004f6c:	3903      	subs	r1, #3
 8004f6e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8004f72:	2300      	movs	r3, #0
 8004f74:	f000 fd34 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8004f78:	69b3      	ldr	r3, [r6, #24]
 8004f7a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 8004f7c:	6899      	ldr	r1, [r3, #8]
 8004f7e:	4642      	mov	r2, r8
 8004f80:	3904      	subs	r1, #4
 8004f82:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8004f86:	2300      	movs	r3, #0
 8004f88:	f000 fd2a 	bl	80059e0 <chThdCreateStatic.constprop.65>
 8004f8c:	69b3      	ldr	r3, [r6, #24]
 8004f8e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8004f90:	6899      	ldr	r1, [r3, #8]
 8004f92:	4642      	mov	r2, r8
 8004f94:	3905      	subs	r1, #5
 8004f96:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f000 fd20 	bl	80059e0 <chThdCreateStatic.constprop.65>
  test_set_step(3);
 8004fa0:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8004fa2:	6120      	str	r0, [r4, #16]
    n = msg_loop_test(threads[0]);
 8004fa4:	6820      	ldr	r0, [r4, #0]
  test_set_step(3);
 8004fa6:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 8004fa8:	f7ff ff9a 	bl	8004ee0 <msg_loop_test>
 8004fac:	4604      	mov	r4, r0
    test_wait_threads();
 8004fae:	f7fc f8d7 	bl	8001160 <test_wait_threads>
  test_set_step(4);
 8004fb2:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8004fb4:	480d      	ldr	r0, [pc, #52]	; (8004fec <test_012_003_execute.lto_priv.163+0xcc>)
  test_set_step(4);
 8004fb6:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 8004fb8:	f7fb fada 	bl	8000570 <test_print>
    test_printn(n);
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f7fb faef 	bl	80005a0 <test_printn>
    test_print(" msgs/S, ");
 8004fc2:	480b      	ldr	r0, [pc, #44]	; (8004ff0 <test_012_003_execute.lto_priv.163+0xd0>)
 8004fc4:	f7fb fad4 	bl	8000570 <test_print>
    test_printn(n << 1);
 8004fc8:	0060      	lsls	r0, r4, #1
 8004fca:	f7fb fae9 	bl	80005a0 <test_printn>
    test_println(" ctxswc/S");
 8004fce:	4809      	ldr	r0, [pc, #36]	; (8004ff4 <test_012_003_execute.lto_priv.163+0xd4>)
}
 8004fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8004fd4:	f7fb baac 	b.w	8000530 <test_println>
 8004fd8:	20001238 	.word	0x20001238
 8004fdc:	20000a00 	.word	0x20000a00
 8004fe0:	2000106c 	.word	0x2000106c
 8004fe4:	08005101 	.word	0x08005101
 8004fe8:	20001084 	.word	0x20001084
 8004fec:	08007058 	.word	0x08007058
 8004ff0:	0800741c 	.word	0x0800741c
 8004ff4:	08006fa0 	.word	0x08006fa0
 8004ff8:	080059c1 	.word	0x080059c1
 8004ffc:	00000000 	.word	0x00000000

08005000 <test_012_002_execute.lto_priv.162>:
static void test_012_002_execute(void) {
 8005000:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8005002:	4b14      	ldr	r3, [pc, #80]	; (8005054 <test_012_002_execute.lto_priv.162+0x54>)
  test_set_step(1);
 8005004:	4c14      	ldr	r4, [pc, #80]	; (8005058 <test_012_002_execute.lto_priv.162+0x58>)
  return chThdGetSelfX()->prio;
 8005006:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005008:	4a14      	ldr	r2, [pc, #80]	; (800505c <test_012_002_execute.lto_priv.162+0x5c>)
 800500a:	6899      	ldr	r1, [r3, #8]
 800500c:	4814      	ldr	r0, [pc, #80]	; (8005060 <test_012_002_execute.lto_priv.162+0x60>)
 800500e:	3101      	adds	r1, #1
  test_set_step(1);
 8005010:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005012:	2300      	movs	r3, #0
  test_set_step(1);
 8005014:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8005016:	f000 fce3 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800501a:	4a12      	ldr	r2, [pc, #72]	; (8005064 <test_012_002_execute.lto_priv.162+0x64>)
  test_set_step(2);
 800501c:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800501e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8005020:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
 8005022:	f7ff ff5d 	bl	8004ee0 <msg_loop_test>
 8005026:	4605      	mov	r5, r0
    test_wait_threads();
 8005028:	f7fc f89a 	bl	8001160 <test_wait_threads>
  test_set_step(3);
 800502c:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800502e:	480e      	ldr	r0, [pc, #56]	; (8005068 <test_012_002_execute.lto_priv.162+0x68>)
  test_set_step(3);
 8005030:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 8005032:	f7fb fa9d 	bl	8000570 <test_print>
    test_printn(n);
 8005036:	4628      	mov	r0, r5
 8005038:	f7fb fab2 	bl	80005a0 <test_printn>
    test_print(" msgs/S, ");
 800503c:	480b      	ldr	r0, [pc, #44]	; (800506c <test_012_002_execute.lto_priv.162+0x6c>)
 800503e:	f7fb fa97 	bl	8000570 <test_print>
    test_printn(n << 1);
 8005042:	0068      	lsls	r0, r5, #1
 8005044:	f7fb faac 	bl	80005a0 <test_printn>
    test_println(" ctxswc/S");
 8005048:	4809      	ldr	r0, [pc, #36]	; (8005070 <test_012_002_execute.lto_priv.162+0x70>)
}
 800504a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 800504e:	f7fb ba6f 	b.w	8000530 <test_println>
 8005052:	bf00      	nop
 8005054:	20001238 	.word	0x20001238
 8005058:	2000106c 	.word	0x2000106c
 800505c:	08005101 	.word	0x08005101
 8005060:	20000a00 	.word	0x20000a00
 8005064:	20001084 	.word	0x20001084
 8005068:	08007058 	.word	0x08007058
 800506c:	0800741c 	.word	0x0800741c
 8005070:	08006fa0 	.word	0x08006fa0
	...

08005080 <test_012_001_execute.lto_priv.161>:
static void test_012_001_execute(void) {
 8005080:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8005082:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <test_012_001_execute.lto_priv.161+0x54>)
  test_set_step(1);
 8005084:	4c14      	ldr	r4, [pc, #80]	; (80050d8 <test_012_001_execute.lto_priv.161+0x58>)
  return chThdGetSelfX()->prio;
 8005086:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8005088:	4a14      	ldr	r2, [pc, #80]	; (80050dc <test_012_001_execute.lto_priv.161+0x5c>)
 800508a:	6899      	ldr	r1, [r3, #8]
 800508c:	4814      	ldr	r0, [pc, #80]	; (80050e0 <test_012_001_execute.lto_priv.161+0x60>)
 800508e:	3901      	subs	r1, #1
  test_set_step(1);
 8005090:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8005092:	2300      	movs	r3, #0
  test_set_step(1);
 8005094:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8005096:	f000 fca3 	bl	80059e0 <chThdCreateStatic.constprop.65>
 800509a:	4a12      	ldr	r2, [pc, #72]	; (80050e4 <test_012_001_execute.lto_priv.161+0x64>)
  test_set_step(2);
 800509c:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800509e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 80050a0:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
 80050a2:	f7ff ff1d 	bl	8004ee0 <msg_loop_test>
 80050a6:	4605      	mov	r5, r0
    test_wait_threads();
 80050a8:	f7fc f85a 	bl	8001160 <test_wait_threads>
  test_set_step(3);
 80050ac:	2303      	movs	r3, #3
    test_print("--- Score : ");
 80050ae:	480e      	ldr	r0, [pc, #56]	; (80050e8 <test_012_001_execute.lto_priv.161+0x68>)
  test_set_step(3);
 80050b0:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 80050b2:	f7fb fa5d 	bl	8000570 <test_print>
    test_printn(n);
 80050b6:	4628      	mov	r0, r5
 80050b8:	f7fb fa72 	bl	80005a0 <test_printn>
    test_print(" msgs/S, ");
 80050bc:	480b      	ldr	r0, [pc, #44]	; (80050ec <test_012_001_execute.lto_priv.161+0x6c>)
 80050be:	f7fb fa57 	bl	8000570 <test_print>
    test_printn(n << 1);
 80050c2:	0068      	lsls	r0, r5, #1
 80050c4:	f7fb fa6c 	bl	80005a0 <test_printn>
    test_println(" ctxswc/S");
 80050c8:	4809      	ldr	r0, [pc, #36]	; (80050f0 <test_012_001_execute.lto_priv.161+0x70>)
}
 80050ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 80050ce:	f7fb ba2f 	b.w	8000530 <test_println>
 80050d2:	bf00      	nop
 80050d4:	20001238 	.word	0x20001238
 80050d8:	2000106c 	.word	0x2000106c
 80050dc:	08005101 	.word	0x08005101
 80050e0:	20000a00 	.word	0x20000a00
 80050e4:	20001084 	.word	0x20001084
 80050e8:	08007058 	.word	0x08007058
 80050ec:	0800741c 	.word	0x0800741c
 80050f0:	08006fa0 	.word	0x08006fa0
	...

08005100 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	2620      	movs	r6, #32
 8005104:	2500      	movs	r5, #0
    tp = chMsgWait();
 8005106:	f7fb fcdb 	bl	8000ac0 <chMsgWait>
 800510a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800510c:	f386 8811 	msr	BASEPRI, r6
 8005110:	4621      	mov	r1, r4
 8005112:	f7fb fc6d 	bl	80009f0 <chSchWakeupS>
 8005116:	f385 8811 	msr	BASEPRI, r5
  } while (msg);
 800511a:	2c00      	cmp	r4, #0
 800511c:	d1f3      	bne.n	8005106 <bmk_thread1+0x6>
}
 800511e:	bd70      	pop	{r4, r5, r6, pc}

08005120 <test_009_001_execute.lto_priv.149>:

static void test_009_001_setup(void) {
  chPoolObjectInit(&mp1, sizeof (uint32_t), NULL);
}

static void test_009_001_execute(void) {
 8005120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned i;

  /* [9.1.1] Adding the objects to the pool using chPoolLoadArray().*/
  test_set_step(1);
 8005124:	4e3a      	ldr	r6, [pc, #232]	; (8005210 <test_009_001_execute.lto_priv.149+0xf0>)
 8005126:	4b3b      	ldr	r3, [pc, #236]	; (8005214 <test_009_001_execute.lto_priv.149+0xf4>)
 8005128:	4c3b      	ldr	r4, [pc, #236]	; (8005218 <test_009_001_execute.lto_priv.149+0xf8>)
 800512a:	2201      	movs	r2, #1
 800512c:	6032      	str	r2, [r6, #0]
 800512e:	2520      	movs	r5, #32
 8005130:	2204      	movs	r2, #4
 8005132:	2000      	movs	r0, #0
 8005134:	f385 8811 	msr	BASEPRI, r5
  php->next = mp->next;
 8005138:	6821      	ldr	r1, [r4, #0]
 800513a:	6019      	str	r1, [r3, #0]
  mp->next = php;
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8005142:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8005144:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8005146:	440b      	add	r3, r1
  while (n != 0U) {
 8005148:	d1f4      	bne.n	8005134 <test_009_001_execute.lto_priv.149+0x14>
  {
    chPoolLoadArray(&mp1, objects, MEMORY_POOL_SIZE);
  }

  /* [9.1.2] Emptying the pool using chPoolAlloc().*/
  test_set_step(2);
 800514a:	2302      	movs	r3, #2
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 800514c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8005218 <test_009_001_execute.lto_priv.149+0xf8>
 8005150:	4f32      	ldr	r7, [pc, #200]	; (800521c <test_009_001_execute.lto_priv.149+0xfc>)
  test_set_step(2);
 8005152:	6033      	str	r3, [r6, #0]
 8005154:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8005156:	4640      	mov	r0, r8
 8005158:	f7fb fb22 	bl	80007a0 <chPoolAlloc>
 800515c:	3000      	adds	r0, #0
 800515e:	bf18      	it	ne
 8005160:	2001      	movne	r0, #1
 8005162:	4639      	mov	r1, r7
 8005164:	f7fb fa74 	bl	8000650 <_test_assert>
 8005168:	2800      	cmp	r0, #0
 800516a:	d13c      	bne.n	80051e6 <test_009_001_execute.lto_priv.149+0xc6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800516c:	3d01      	subs	r5, #1
 800516e:	d1f2      	bne.n	8005156 <test_009_001_execute.lto_priv.149+0x36>
  }

  /* [9.1.3] Now must be empty.*/
  test_set_step(3);
 8005170:	2303      	movs	r3, #3
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8005172:	4829      	ldr	r0, [pc, #164]	; (8005218 <test_009_001_execute.lto_priv.149+0xf8>)
  test_set_step(3);
 8005174:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8005176:	f7fb fb13 	bl	80007a0 <chPoolAlloc>
 800517a:	fab0 f080 	clz	r0, r0
 800517e:	0940      	lsrs	r0, r0, #5
 8005180:	4927      	ldr	r1, [pc, #156]	; (8005220 <test_009_001_execute.lto_priv.149+0x100>)
 8005182:	f7fb fa65 	bl	8000650 <_test_assert>
 8005186:	bb70      	cbnz	r0, 80051e6 <test_009_001_execute.lto_priv.149+0xc6>
 8005188:	4b22      	ldr	r3, [pc, #136]	; (8005214 <test_009_001_execute.lto_priv.149+0xf4>)
  }

  /* [9.1.4] Adding the objects to the pool using chPoolFree().*/
  test_set_step(4);
 800518a:	2204      	movs	r2, #4
 800518c:	f103 0710 	add.w	r7, r3, #16
 8005190:	6032      	str	r2, [r6, #0]
 8005192:	2020      	movs	r0, #32
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      chPoolFree(&mp1, &objects[i]);
 8005194:	461a      	mov	r2, r3
 8005196:	f380 8811 	msr	BASEPRI, r0
  php->next = mp->next;
 800519a:	6821      	ldr	r1, [r4, #0]
 800519c:	f843 1b04 	str.w	r1, [r3], #4
  mp->next = php;
 80051a0:	6022      	str	r2, [r4, #0]
 80051a2:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80051a6:	429f      	cmp	r7, r3
 80051a8:	d1f4      	bne.n	8005194 <test_009_001_execute.lto_priv.149+0x74>
  }

  /* [9.1.5] Emptying the pool using chPoolAlloc() again.*/
  test_set_step(5);
 80051aa:	2305      	movs	r3, #5
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80051ac:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8005218 <test_009_001_execute.lto_priv.149+0xf8>
 80051b0:	4f1a      	ldr	r7, [pc, #104]	; (800521c <test_009_001_execute.lto_priv.149+0xfc>)
  test_set_step(5);
 80051b2:	6033      	str	r3, [r6, #0]
 80051b4:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80051b6:	4640      	mov	r0, r8
 80051b8:	f7fb faf2 	bl	80007a0 <chPoolAlloc>
 80051bc:	3000      	adds	r0, #0
 80051be:	bf18      	it	ne
 80051c0:	2001      	movne	r0, #1
 80051c2:	4639      	mov	r1, r7
 80051c4:	f7fb fa44 	bl	8000650 <_test_assert>
 80051c8:	b968      	cbnz	r0, 80051e6 <test_009_001_execute.lto_priv.149+0xc6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80051ca:	3d01      	subs	r5, #1
 80051cc:	d1f3      	bne.n	80051b6 <test_009_001_execute.lto_priv.149+0x96>
  }

  /* [9.1.6] Now must be empty again.*/
  test_set_step(6);
 80051ce:	2306      	movs	r3, #6
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80051d0:	4811      	ldr	r0, [pc, #68]	; (8005218 <test_009_001_execute.lto_priv.149+0xf8>)
  test_set_step(6);
 80051d2:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80051d4:	f7fb fae4 	bl	80007a0 <chPoolAlloc>
 80051d8:	fab0 f080 	clz	r0, r0
 80051dc:	0940      	lsrs	r0, r0, #5
 80051de:	4910      	ldr	r1, [pc, #64]	; (8005220 <test_009_001_execute.lto_priv.149+0x100>)
 80051e0:	f7fb fa36 	bl	8000650 <_test_assert>
 80051e4:	b108      	cbz	r0, 80051ea <test_009_001_execute.lto_priv.149+0xca>
 80051e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  /* [9.1.7] Covering the case where a provider is unable to return
     more memory.*/
  test_set_step(7);
 80051ea:	2107      	movs	r1, #7
  mp->object_size = size;
 80051ec:	2204      	movs	r2, #4
  mp->provider = provider;
 80051ee:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <test_009_001_execute.lto_priv.149+0x104>)
  {
    chPoolObjectInit(&mp1, sizeof (uint32_t), null_provider);
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80051f0:	4809      	ldr	r0, [pc, #36]	; (8005218 <test_009_001_execute.lto_priv.149+0xf8>)
  test_set_step(7);
 80051f2:	6031      	str	r1, [r6, #0]
  mp->next = NULL;
 80051f4:	6025      	str	r5, [r4, #0]
  mp->object_size = size;
 80051f6:	6062      	str	r2, [r4, #4]
  mp->provider = provider;
 80051f8:	60a3      	str	r3, [r4, #8]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80051fa:	f7fb fad1 	bl	80007a0 <chPoolAlloc>
 80051fe:	fab0 f080 	clz	r0, r0
 8005202:	0940      	lsrs	r0, r0, #5
 8005204:	4908      	ldr	r1, [pc, #32]	; (8005228 <test_009_001_execute.lto_priv.149+0x108>)
  }
}
 8005206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800520a:	f7fb ba21 	b.w	8000650 <_test_assert>
 800520e:	bf00      	nop
 8005210:	2000106c 	.word	0x2000106c
 8005214:	20001208 	.word	0x20001208
 8005218:	20000818 	.word	0x20000818
 800521c:	08007284 	.word	0x08007284
 8005220:	08007290 	.word	0x08007290
 8005224:	08001851 	.word	0x08001851
 8005228:	080072a0 	.word	0x080072a0
 800522c:	00000000 	.word	0x00000000

08005230 <test_011_002_execute.lto_priv.160>:

static void test_011_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void test_011_002_execute(void) {
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  tprio_t prio;

  /* [11.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8005232:	4d3f      	ldr	r5, [pc, #252]	; (8005330 <test_011_002_execute.lto_priv.160+0x100>)
 8005234:	4b3f      	ldr	r3, [pc, #252]	; (8005334 <test_011_002_execute.lto_priv.160+0x104>)
 8005236:	4a40      	ldr	r2, [pc, #256]	; (8005338 <test_011_002_execute.lto_priv.160+0x108>)
 8005238:	4940      	ldr	r1, [pc, #256]	; (800533c <test_011_002_execute.lto_priv.160+0x10c>)
 800523a:	2001      	movs	r0, #1
 800523c:	6028      	str	r0, [r5, #0]
 800523e:	f103 070c 	add.w	r7, r3, #12
 8005242:	2620      	movs	r6, #32
 8005244:	2400      	movs	r4, #0
 8005246:	f386 8811 	msr	BASEPRI, r6
  php->next = mp->next;
 800524a:	6808      	ldr	r0, [r1, #0]
 800524c:	6010      	str	r0, [r2, #0]
  mp->next = php;
 800524e:	600a      	str	r2, [r1, #0]
 8005250:	f384 8811 	msr	BASEPRI, r4
  {
    for (i = 0; i < 4; i++)
 8005254:	429f      	cmp	r7, r3
 8005256:	d002      	beq.n	800525e <test_011_002_execute.lto_priv.160+0x2e>
 8005258:	f853 2b04 	ldr.w	r2, [r3], #4
 800525c:	e7f3      	b.n	8005246 <test_011_002_execute.lto_priv.160+0x16>
  return ch.rlist.current;
 800525e:	4b38      	ldr	r3, [pc, #224]	; (8005340 <test_011_002_execute.lto_priv.160+0x110>)
  }

  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8005260:	4a38      	ldr	r2, [pc, #224]	; (8005344 <test_011_002_execute.lto_priv.160+0x114>)
  return chThdGetSelfX()->prio;
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	4838      	ldr	r0, [pc, #224]	; (8005348 <test_011_002_execute.lto_priv.160+0x118>)
 8005266:	689e      	ldr	r6, [r3, #8]
 8005268:	4c38      	ldr	r4, [pc, #224]	; (800534c <test_011_002_execute.lto_priv.160+0x11c>)
  test_set_step(3);
 800526a:	2303      	movs	r3, #3
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 800526c:	1e71      	subs	r1, r6, #1
  test_set_step(3);
 800526e:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8005270:	f000 fdc6 	bl	8005e00 <chThdCreateFromMemoryPool.constprop.35>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8005274:	1eb1      	subs	r1, r6, #2
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8005276:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8005278:	4a35      	ldr	r2, [pc, #212]	; (8005350 <test_011_002_execute.lto_priv.160+0x120>)
 800527a:	4836      	ldr	r0, [pc, #216]	; (8005354 <test_011_002_execute.lto_priv.160+0x124>)
 800527c:	f000 fdc0 	bl	8005e00 <chThdCreateFromMemoryPool.constprop.35>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8005280:	1ef1      	subs	r1, r6, #3
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8005282:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8005284:	4a34      	ldr	r2, [pc, #208]	; (8005358 <test_011_002_execute.lto_priv.160+0x128>)
 8005286:	4835      	ldr	r0, [pc, #212]	; (800535c <test_011_002_execute.lto_priv.160+0x12c>)
 8005288:	f000 fdba 	bl	8005e00 <chThdCreateFromMemoryPool.constprop.35>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800528c:	1f31      	subs	r1, r6, #4
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 800528e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8005290:	4a33      	ldr	r2, [pc, #204]	; (8005360 <test_011_002_execute.lto_priv.160+0x130>)
 8005292:	4834      	ldr	r0, [pc, #208]	; (8005364 <test_011_002_execute.lto_priv.160+0x134>)
 8005294:	f000 fdb4 	bl	8005e00 <chThdCreateFromMemoryPool.constprop.35>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8005298:	4a33      	ldr	r2, [pc, #204]	; (8005368 <test_011_002_execute.lto_priv.160+0x138>)
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800529a:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800529c:	1f71      	subs	r1, r6, #5
 800529e:	4833      	ldr	r0, [pc, #204]	; (800536c <test_011_002_execute.lto_priv.160+0x13c>)
 80052a0:	f000 fdae 	bl	8005e00 <chThdCreateFromMemoryPool.constprop.35>
  }

  /* [11.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 80052a4:	6823      	ldr	r3, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 80052a6:	6120      	str	r0, [r4, #16]
  test_set_step(4);
 80052a8:	2204      	movs	r2, #4
 80052aa:	602a      	str	r2, [r5, #0]
    test_assert((threads[0] != NULL) &&
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d03c      	beq.n	800532a <test_011_002_execute.lto_priv.160+0xfa>
 80052b0:	6860      	ldr	r0, [r4, #4]
 80052b2:	b128      	cbz	r0, 80052c0 <test_011_002_execute.lto_priv.160+0x90>
 80052b4:	68a0      	ldr	r0, [r4, #8]
 80052b6:	b118      	cbz	r0, 80052c0 <test_011_002_execute.lto_priv.160+0x90>
 80052b8:	68e0      	ldr	r0, [r4, #12]
 80052ba:	3000      	adds	r0, #0
 80052bc:	bf18      	it	ne
 80052be:	2001      	movne	r0, #1
 80052c0:	492b      	ldr	r1, [pc, #172]	; (8005370 <test_011_002_execute.lto_priv.160+0x140>)
 80052c2:	f7fb f9c5 	bl	8000650 <_test_assert>
 80052c6:	b100      	cbz	r0, 80052ca <test_011_002_execute.lto_priv.160+0x9a>
 80052c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                (threads[1] != NULL) &&
                (threads[2] != NULL) &&
                (threads[3] != NULL),
                "thread creation failed");
    test_assert(threads[4] == NULL,
 80052ca:	6920      	ldr	r0, [r4, #16]
 80052cc:	4929      	ldr	r1, [pc, #164]	; (8005374 <test_011_002_execute.lto_priv.160+0x144>)
 80052ce:	fab0 f080 	clz	r0, r0
 80052d2:	0940      	lsrs	r0, r0, #5
 80052d4:	f7fb f9bc 	bl	8000650 <_test_assert>
 80052d8:	2800      	cmp	r0, #0
 80052da:	d1f5      	bne.n	80052c8 <test_011_002_execute.lto_priv.160+0x98>
                "thread creation not failed");
  }

  /* [11.2.5] Letting them run, free the memory then checking the
     execution sequence.*/
  test_set_step(5);
 80052dc:	2305      	movs	r3, #5
 80052de:	602b      	str	r3, [r5, #0]
  {
    test_wait_threads();
 80052e0:	f7fb ff3e 	bl	8001160 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 80052e4:	4924      	ldr	r1, [pc, #144]	; (8005378 <test_011_002_execute.lto_priv.160+0x148>)
 80052e6:	4825      	ldr	r0, [pc, #148]	; (800537c <test_011_002_execute.lto_priv.160+0x14c>)
 80052e8:	f7fb f98a 	bl	8000600 <_test_assert_sequence>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d1eb      	bne.n	80052c8 <test_011_002_execute.lto_priv.160+0x98>
  }

  /* [11.2.6] Testing that the pool contains four elements again.*/
  test_set_step(6);
 80052f0:	2306      	movs	r3, #6
  {
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 80052f2:	4f12      	ldr	r7, [pc, #72]	; (800533c <test_011_002_execute.lto_priv.160+0x10c>)
 80052f4:	4e22      	ldr	r6, [pc, #136]	; (8005380 <test_011_002_execute.lto_priv.160+0x150>)
  test_set_step(6);
 80052f6:	602b      	str	r3, [r5, #0]
 80052f8:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 80052fa:	4638      	mov	r0, r7
 80052fc:	f7fb fa50 	bl	80007a0 <chPoolAlloc>
 8005300:	3000      	adds	r0, #0
 8005302:	bf18      	it	ne
 8005304:	2001      	movne	r0, #1
 8005306:	4631      	mov	r1, r6
 8005308:	f7fb f9a2 	bl	8000650 <_test_assert>
 800530c:	2800      	cmp	r0, #0
 800530e:	d1db      	bne.n	80052c8 <test_011_002_execute.lto_priv.160+0x98>
    for (i = 0; i < 4; i++)
 8005310:	3c01      	subs	r4, #1
 8005312:	d1f2      	bne.n	80052fa <test_011_002_execute.lto_priv.160+0xca>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8005314:	4809      	ldr	r0, [pc, #36]	; (800533c <test_011_002_execute.lto_priv.160+0x10c>)
 8005316:	f7fb fa43 	bl	80007a0 <chPoolAlloc>
 800531a:	fab0 f080 	clz	r0, r0
 800531e:	0940      	lsrs	r0, r0, #5
 8005320:	4918      	ldr	r1, [pc, #96]	; (8005384 <test_011_002_execute.lto_priv.160+0x154>)
  }
}
 8005322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8005326:	f7fb b993 	b.w	8000650 <_test_assert>
    test_assert((threads[0] != NULL) &&
 800532a:	4618      	mov	r0, r3
 800532c:	e7c8      	b.n	80052c0 <test_011_002_execute.lto_priv.160+0x90>
 800532e:	bf00      	nop
 8005330:	2000106c 	.word	0x2000106c
 8005334:	08007274 	.word	0x08007274
 8005338:	20000a00 	.word	0x20000a00
 800533c:	20001300 	.word	0x20001300
 8005340:	20001238 	.word	0x20001238
 8005344:	08006198 	.word	0x08006198
 8005348:	0800739c 	.word	0x0800739c
 800534c:	20001084 	.word	0x20001084
 8005350:	08006334 	.word	0x08006334
 8005354:	080073a4 	.word	0x080073a4
 8005358:	08006330 	.word	0x08006330
 800535c:	080073ac 	.word	0x080073ac
 8005360:	080062d4 	.word	0x080062d4
 8005364:	080073b4 	.word	0x080073b4
 8005368:	080062dc 	.word	0x080062dc
 800536c:	080073bc 	.word	0x080073bc
 8005370:	080073c4 	.word	0x080073c4
 8005374:	080073dc 	.word	0x080073dc
 8005378:	08006344 	.word	0x08006344
 800537c:	08006268 	.word	0x08006268
 8005380:	080073f8 	.word	0x080073f8
 8005384:	08007408 	.word	0x08007408
	...

08005390 <dyn_thread1.lto_priv.69>:
 8005390:	f7fe b836 	b.w	8003400 <thread.lto_priv.171>
	...

080053a0 <test_011_001_execute.lto_priv.158>:
static void test_011_001_execute(void) {
 80053a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  return ch.rlist.current;
 80053a2:	4b3f      	ldr	r3, [pc, #252]	; (80054a0 <test_011_001_execute.lto_priv.158+0x100>)
  test_set_step(2);
 80053a4:	4c3f      	ldr	r4, [pc, #252]	; (80054a4 <test_011_001_execute.lto_priv.158+0x104>)
  return chThdGetSelfX()->prio;
 80053a6:	699b      	ldr	r3, [r3, #24]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80053a8:	483f      	ldr	r0, [pc, #252]	; (80054a8 <test_011_001_execute.lto_priv.158+0x108>)
 80053aa:	689e      	ldr	r6, [r3, #8]
static void test_011_001_execute(void) {
 80053ac:	b085      	sub	sp, #20
  test_set_step(2);
 80053ae:	2302      	movs	r3, #2
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80053b0:	a903      	add	r1, sp, #12
 80053b2:	aa02      	add	r2, sp, #8
  test_set_step(2);
 80053b4:	6023      	str	r3, [r4, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80053b6:	f7fb fdf3 	bl	8000fa0 <chHeapStatus>
 80053ba:	4605      	mov	r5, r0
    test_assert(n1 == 1, "heap fragmented");
 80053bc:	f1a0 0001 	sub.w	r0, r0, #1
 80053c0:	fab0 f080 	clz	r0, r0
 80053c4:	0940      	lsrs	r0, r0, #5
 80053c6:	4939      	ldr	r1, [pc, #228]	; (80054ac <test_011_001_execute.lto_priv.158+0x10c>)
 80053c8:	f7fb f942 	bl	8000650 <_test_assert>
 80053cc:	b108      	cbz	r0, 80053d2 <test_011_001_execute.lto_priv.158+0x32>
}
 80053ce:	b005      	add	sp, #20
 80053d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  test_set_step(3);
 80053d2:	2203      	movs	r2, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 80053d4:	4936      	ldr	r1, [pc, #216]	; (80054b0 <test_011_001_execute.lto_priv.158+0x110>)
  test_set_step(3);
 80053d6:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 80053d8:	4b36      	ldr	r3, [pc, #216]	; (80054b4 <test_011_001_execute.lto_priv.158+0x114>)
 80053da:	4f37      	ldr	r7, [pc, #220]	; (80054b8 <test_011_001_execute.lto_priv.158+0x118>)
 80053dc:	1e72      	subs	r2, r6, #1
 80053de:	f44f 70a4 	mov.w	r0, #328	; 0x148
 80053e2:	f000 fcdd 	bl	8005da0 <chThdCreateFromHeap.constprop.36>
 80053e6:	6038      	str	r0, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 80053e8:	3000      	adds	r0, #0
 80053ea:	bf18      	it	ne
 80053ec:	2001      	movne	r0, #1
 80053ee:	4933      	ldr	r1, [pc, #204]	; (80054bc <test_011_001_execute.lto_priv.158+0x11c>)
 80053f0:	f7fb f92e 	bl	8000650 <_test_assert>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	d1ea      	bne.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
  test_set_step(4);
 80053f8:	2204      	movs	r2, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 80053fa:	4b31      	ldr	r3, [pc, #196]	; (80054c0 <test_011_001_execute.lto_priv.158+0x120>)
 80053fc:	4931      	ldr	r1, [pc, #196]	; (80054c4 <test_011_001_execute.lto_priv.158+0x124>)
  test_set_step(4);
 80053fe:	6022      	str	r2, [r4, #0]
    threads[1] = chThdCreateFromHeap(&heap1,
 8005400:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8005404:	1eb2      	subs	r2, r6, #2
 8005406:	f000 fccb 	bl	8005da0 <chThdCreateFromHeap.constprop.36>
 800540a:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
 800540c:	3000      	adds	r0, #0
 800540e:	bf18      	it	ne
 8005410:	2001      	movne	r0, #1
 8005412:	492a      	ldr	r1, [pc, #168]	; (80054bc <test_011_001_execute.lto_priv.158+0x11c>)
    threads[1] = chThdCreateFromHeap(&heap1,
 8005414:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 8005416:	f7fb f91b 	bl	8000650 <_test_assert>
 800541a:	2800      	cmp	r0, #0
 800541c:	d1d7      	bne.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
    threads[2] = chThdCreateFromHeap(&heap1,
 800541e:	1ef2      	subs	r2, r6, #3
 8005420:	4b29      	ldr	r3, [pc, #164]	; (80054c8 <test_011_001_execute.lto_priv.158+0x128>)
 8005422:	492a      	ldr	r1, [pc, #168]	; (80054cc <test_011_001_execute.lto_priv.158+0x12c>)
 8005424:	482a      	ldr	r0, [pc, #168]	; (80054d0 <test_011_001_execute.lto_priv.158+0x130>)
  test_set_step(5);
 8005426:	2605      	movs	r6, #5
 8005428:	6026      	str	r6, [r4, #0]
    threads[2] = chThdCreateFromHeap(&heap1,
 800542a:	f000 fcb9 	bl	8005da0 <chThdCreateFromHeap.constprop.36>
 800542e:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 8005430:	fab0 f080 	clz	r0, r0
 8005434:	40f0      	lsrs	r0, r6
 8005436:	4927      	ldr	r1, [pc, #156]	; (80054d4 <test_011_001_execute.lto_priv.158+0x134>)
    threads[2] = chThdCreateFromHeap(&heap1,
 8005438:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 800543a:	f7fb f909 	bl	8000650 <_test_assert>
 800543e:	2800      	cmp	r0, #0
 8005440:	d1c5      	bne.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
  test_set_step(6);
 8005442:	2306      	movs	r3, #6
 8005444:	6023      	str	r3, [r4, #0]
    test_wait_threads();
 8005446:	f7fb fe8b 	bl	8001160 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 800544a:	4923      	ldr	r1, [pc, #140]	; (80054d8 <test_011_001_execute.lto_priv.158+0x138>)
 800544c:	4823      	ldr	r0, [pc, #140]	; (80054dc <test_011_001_execute.lto_priv.158+0x13c>)
 800544e:	f7fb f8d7 	bl	8000600 <_test_assert_sequence>
 8005452:	2800      	cmp	r0, #0
 8005454:	d1bb      	bne.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
  test_set_step(7);
 8005456:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8005458:	a901      	add	r1, sp, #4
 800545a:	466a      	mov	r2, sp
 800545c:	4812      	ldr	r0, [pc, #72]	; (80054a8 <test_011_001_execute.lto_priv.158+0x108>)
  test_set_step(7);
 800545e:	6023      	str	r3, [r4, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8005460:	f7fb fd9e 	bl	8000fa0 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 8005464:	1a28      	subs	r0, r5, r0
 8005466:	fab0 f080 	clz	r0, r0
 800546a:	491d      	ldr	r1, [pc, #116]	; (80054e0 <test_011_001_execute.lto_priv.158+0x140>)
 800546c:	0940      	lsrs	r0, r0, #5
 800546e:	f7fb f8ef 	bl	8000650 <_test_assert>
 8005472:	2800      	cmp	r0, #0
 8005474:	d1ab      	bne.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
    test_assert(total1 == total2, "total free space changed");
 8005476:	9803      	ldr	r0, [sp, #12]
 8005478:	9b01      	ldr	r3, [sp, #4]
 800547a:	491a      	ldr	r1, [pc, #104]	; (80054e4 <test_011_001_execute.lto_priv.158+0x144>)
 800547c:	1ac0      	subs	r0, r0, r3
 800547e:	fab0 f080 	clz	r0, r0
 8005482:	0940      	lsrs	r0, r0, #5
 8005484:	f7fb f8e4 	bl	8000650 <_test_assert>
 8005488:	2800      	cmp	r0, #0
 800548a:	d1a0      	bne.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
    test_assert(largest1 == largest2, "largest fragment size changed");
 800548c:	9802      	ldr	r0, [sp, #8]
 800548e:	9b00      	ldr	r3, [sp, #0]
 8005490:	4915      	ldr	r1, [pc, #84]	; (80054e8 <test_011_001_execute.lto_priv.158+0x148>)
 8005492:	1ac0      	subs	r0, r0, r3
 8005494:	fab0 f080 	clz	r0, r0
 8005498:	0940      	lsrs	r0, r0, #5
 800549a:	f7fb f8d9 	bl	8000650 <_test_assert>
 800549e:	e796      	b.n	80053ce <test_011_001_execute.lto_priv.158+0x2e>
 80054a0:	20001238 	.word	0x20001238
 80054a4:	2000106c 	.word	0x2000106c
 80054a8:	200012d0 	.word	0x200012d0
 80054ac:	08007334 	.word	0x08007334
 80054b0:	0800739c 	.word	0x0800739c
 80054b4:	08006198 	.word	0x08006198
 80054b8:	20001084 	.word	0x20001084
 80054bc:	080073c4 	.word	0x080073c4
 80054c0:	08006334 	.word	0x08006334
 80054c4:	080073a4 	.word	0x080073a4
 80054c8:	08006330 	.word	0x08006330
 80054cc:	080073ac 	.word	0x080073ac
 80054d0:	000200c8 	.word	0x000200c8
 80054d4:	080073dc 	.word	0x080073dc
 80054d8:	08006344 	.word	0x08006344
 80054dc:	08007344 	.word	0x08007344
 80054e0:	08007348 	.word	0x08007348
 80054e4:	08007360 	.word	0x08007360
 80054e8:	0800737c 	.word	0x0800737c
 80054ec:	00000000 	.word	0x00000000

080054f0 <test_010_002_execute.lto_priv.156>:
 *   block is freed using chHeapFree(), must not fail.
 * - [10.2.2] Testing allocation failure.
 * .
 */

static void test_010_002_execute(void) {
 80054f0:	b570      	push	{r4, r5, r6, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [10.2.1] Single block allocation using chHeapAlloc() then the
     block is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 80054f2:	4c14      	ldr	r4, [pc, #80]	; (8005544 <test_010_002_execute.lto_priv.156+0x54>)
static void test_010_002_execute(void) {
 80054f4:	b082      	sub	sp, #8
  test_set_step(1);
 80054f6:	2301      	movs	r3, #1
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 80054f8:	466a      	mov	r2, sp
 80054fa:	a901      	add	r1, sp, #4
 80054fc:	2000      	movs	r0, #0
  test_set_step(1);
 80054fe:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8005500:	f7fb fd4e 	bl	8000fa0 <chHeapStatus>
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8005504:	2110      	movs	r1, #16
 8005506:	4810      	ldr	r0, [pc, #64]	; (8005548 <test_010_002_execute.lto_priv.156+0x58>)
 8005508:	f000 fbd2 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 800550c:	4606      	mov	r6, r0
 800550e:	3000      	adds	r0, #0
 8005510:	bf18      	it	ne
 8005512:	2001      	movne	r0, #1
 8005514:	490d      	ldr	r1, [pc, #52]	; (800554c <test_010_002_execute.lto_priv.156+0x5c>)
 8005516:	f7fb f89b 	bl	8000650 <_test_assert>
 800551a:	b980      	cbnz	r0, 800553e <test_010_002_execute.lto_priv.156+0x4e>
 800551c:	4605      	mov	r5, r0
    chHeapFree(p1);
 800551e:	4630      	mov	r0, r6
 8005520:	f7fb fd76 	bl	8001010 <chHeapFree>
  }

  /* [10.2.2] Testing allocation failure.*/
  test_set_step(2);
 8005524:	2302      	movs	r3, #2
 8005526:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800552a:	4628      	mov	r0, r5
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	f000 fbbf 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
 8005532:	fab0 f080 	clz	r0, r0
 8005536:	0940      	lsrs	r0, r0, #5
 8005538:	4905      	ldr	r1, [pc, #20]	; (8005550 <test_010_002_execute.lto_priv.156+0x60>)
 800553a:	f7fb f889 	bl	8000650 <_test_assert>
  }
}
 800553e:	b002      	add	sp, #8
 8005540:	bd70      	pop	{r4, r5, r6, pc}
 8005542:	bf00      	nop
 8005544:	2000106c 	.word	0x2000106c
 8005548:	20001218 	.word	0x20001218
 800554c:	08007308 	.word	0x08007308
 8005550:	0800731c 	.word	0x0800731c
	...

08005560 <test_010_001_execute.lto_priv.155>:
static void test_010_001_execute(void) {
 8005560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005564:	4cc0      	ldr	r4, [pc, #768]	; (8005868 <test_010_001_execute.lto_priv.155+0x308>)
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8005566:	48c1      	ldr	r0, [pc, #772]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
static void test_010_001_execute(void) {
 8005568:	b084      	sub	sp, #16
  test_set_step(1);
 800556a:	2301      	movs	r3, #1
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 800556c:	4669      	mov	r1, sp
 800556e:	2200      	movs	r2, #0
  test_set_step(1);
 8005570:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8005572:	f7fb fd15 	bl	8000fa0 <chHeapStatus>
 8005576:	f1a0 0001 	sub.w	r0, r0, #1
 800557a:	fab0 f080 	clz	r0, r0
 800557e:	49bc      	ldr	r1, [pc, #752]	; (8005870 <test_010_001_execute.lto_priv.155+0x310>)
 8005580:	0940      	lsrs	r0, r0, #5
 8005582:	f7fb f865 	bl	8000650 <_test_assert>
 8005586:	b110      	cbz	r0, 800558e <test_010_001_execute.lto_priv.155+0x2e>
}
 8005588:	b004      	add	sp, #16
 800558a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 800558e:	2302      	movs	r3, #2
 8005590:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
 8005594:	48b5      	ldr	r0, [pc, #724]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	f000 fb8a 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
    test_assert(p1 == NULL, "allocation not failed");
 800559c:	fab0 f080 	clz	r0, r0
 80055a0:	0940      	lsrs	r0, r0, #5
 80055a2:	49b4      	ldr	r1, [pc, #720]	; (8005874 <test_010_001_execute.lto_priv.155+0x314>)
 80055a4:	f7fb f854 	bl	8000650 <_test_assert>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d1ed      	bne.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
  test_set_step(3);
 80055ac:	2303      	movs	r3, #3
 80055ae:	2110      	movs	r1, #16
 80055b0:	48ae      	ldr	r0, [pc, #696]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 80055b2:	6023      	str	r3, [r4, #0]
 80055b4:	f000 fb7c 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
    test_assert(p1 != NULL, "allocation failed");
 80055b8:	4605      	mov	r5, r0
 80055ba:	3000      	adds	r0, #0
 80055bc:	bf18      	it	ne
 80055be:	2001      	movne	r0, #1
 80055c0:	49ad      	ldr	r1, [pc, #692]	; (8005878 <test_010_001_execute.lto_priv.155+0x318>)
 80055c2:	f7fb f845 	bl	8000650 <_test_assert>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d1de      	bne.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
    chHeapFree(p1);
 80055ca:	4628      	mov	r0, r5
 80055cc:	f7fb fd20 	bl	8001010 <chHeapFree>
  test_set_step(4);
 80055d0:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 80055d2:	a902      	add	r1, sp, #8
 80055d4:	aa03      	add	r2, sp, #12
 80055d6:	48a5      	ldr	r0, [pc, #660]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
  test_set_step(4);
 80055d8:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 80055da:	f7fb fce1 	bl	8000fa0 <chHeapStatus>
 80055de:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 80055e0:	f1a0 0001 	sub.w	r0, r0, #1
 80055e4:	fab0 f080 	clz	r0, r0
 80055e8:	0940      	lsrs	r0, r0, #5
 80055ea:	49a4      	ldr	r1, [pc, #656]	; (800587c <test_010_001_execute.lto_priv.155+0x31c>)
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 80055ec:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 80055ee:	f7fb f82f 	bl	8000650 <_test_assert>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d1c8      	bne.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 80055f6:	9802      	ldr	r0, [sp, #8]
 80055f8:	49a1      	ldr	r1, [pc, #644]	; (8005880 <test_010_001_execute.lto_priv.155+0x320>)
 80055fa:	280f      	cmp	r0, #15
 80055fc:	bf94      	ite	ls
 80055fe:	2000      	movls	r0, #0
 8005600:	2001      	movhi	r0, #1
 8005602:	f7fb f825 	bl	8000650 <_test_assert>
 8005606:	2800      	cmp	r0, #0
 8005608:	d1be      	bne.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 800560a:	9802      	ldr	r0, [sp, #8]
 800560c:	9b03      	ldr	r3, [sp, #12]
 800560e:	499c      	ldr	r1, [pc, #624]	; (8005880 <test_010_001_execute.lto_priv.155+0x320>)
 8005610:	1ac0      	subs	r0, r0, r3
 8005612:	fab0 f080 	clz	r0, r0
 8005616:	0940      	lsrs	r0, r0, #5
 8005618:	f7fb f81a 	bl	8000650 <_test_assert>
 800561c:	4605      	mov	r5, r0
 800561e:	2800      	cmp	r0, #0
 8005620:	d1b2      	bne.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
  test_set_step(5);
 8005622:	2305      	movs	r3, #5
 8005624:	2110      	movs	r1, #16
 8005626:	4891      	ldr	r0, [pc, #580]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	f000 fb41 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
 800562e:	2110      	movs	r1, #16
 8005630:	4680      	mov	r8, r0
 8005632:	488e      	ldr	r0, [pc, #568]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 8005634:	f000 fb3c 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
 8005638:	2110      	movs	r1, #16
 800563a:	4607      	mov	r7, r0
 800563c:	488b      	ldr	r0, [pc, #556]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 800563e:	f000 fb37 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
 8005642:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 8005644:	4640      	mov	r0, r8
 8005646:	f7fb fce3 	bl	8001010 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 800564a:	4638      	mov	r0, r7
 800564c:	f7fb fce0 	bl	8001010 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 8005650:	4630      	mov	r0, r6
 8005652:	f7fb fcdd 	bl	8001010 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005656:	462a      	mov	r2, r5
 8005658:	a901      	add	r1, sp, #4
 800565a:	4884      	ldr	r0, [pc, #528]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 800565c:	f7fb fca0 	bl	8000fa0 <chHeapStatus>
 8005660:	f1a0 0001 	sub.w	r0, r0, #1
 8005664:	fab0 f080 	clz	r0, r0
 8005668:	4981      	ldr	r1, [pc, #516]	; (8005870 <test_010_001_execute.lto_priv.155+0x310>)
 800566a:	0940      	lsrs	r0, r0, #5
 800566c:	f7fa fff0 	bl	8000650 <_test_assert>
 8005670:	4605      	mov	r5, r0
 8005672:	2800      	cmp	r0, #0
 8005674:	d188      	bne.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
  test_set_step(6);
 8005676:	2306      	movs	r3, #6
 8005678:	2110      	movs	r1, #16
 800567a:	487c      	ldr	r0, [pc, #496]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	f000 fb17 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
 8005682:	2110      	movs	r1, #16
 8005684:	4606      	mov	r6, r0
 8005686:	4879      	ldr	r0, [pc, #484]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 8005688:	f000 fb12 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
 800568c:	2110      	movs	r1, #16
 800568e:	4607      	mov	r7, r0
 8005690:	4876      	ldr	r0, [pc, #472]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 8005692:	f000 fb0d 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
    chHeapFree(p3);                                 /* Merges forward.*/
 8005696:	f7fb fcbb 	bl	8001010 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 800569a:	4638      	mov	r0, r7
 800569c:	f7fb fcb8 	bl	8001010 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 80056a0:	4630      	mov	r0, r6
 80056a2:	f7fb fcb5 	bl	8001010 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80056a6:	462a      	mov	r2, r5
 80056a8:	a901      	add	r1, sp, #4
 80056aa:	4870      	ldr	r0, [pc, #448]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 80056ac:	f7fb fc78 	bl	8000fa0 <chHeapStatus>
 80056b0:	f1a0 0001 	sub.w	r0, r0, #1
 80056b4:	fab0 f080 	clz	r0, r0
 80056b8:	496d      	ldr	r1, [pc, #436]	; (8005870 <test_010_001_execute.lto_priv.155+0x310>)
 80056ba:	0940      	lsrs	r0, r0, #5
 80056bc:	f7fa ffc8 	bl	8000650 <_test_assert>
 80056c0:	4605      	mov	r5, r0
 80056c2:	2800      	cmp	r0, #0
 80056c4:	f47f af60 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
  test_set_step(7);
 80056c8:	2307      	movs	r3, #7
 80056ca:	2111      	movs	r1, #17
 80056cc:	4867      	ldr	r0, [pc, #412]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 80056ce:	6023      	str	r3, [r4, #0]
 80056d0:	f000 faee 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
 80056d4:	2110      	movs	r1, #16
 80056d6:	4606      	mov	r6, r0
 80056d8:	4864      	ldr	r0, [pc, #400]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 80056da:	f000 fae9 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
 80056de:	4607      	mov	r7, r0
    chHeapFree(p1);
 80056e0:	4630      	mov	r0, r6
 80056e2:	f7fb fc95 	bl	8001010 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 80056e6:	462a      	mov	r2, r5
 80056e8:	a901      	add	r1, sp, #4
 80056ea:	4860      	ldr	r0, [pc, #384]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 80056ec:	f7fb fc58 	bl	8000fa0 <chHeapStatus>
 80056f0:	f1a0 0802 	sub.w	r8, r0, #2
 80056f4:	f1d8 0000 	rsbs	r0, r8, #0
 80056f8:	4962      	ldr	r1, [pc, #392]	; (8005884 <test_010_001_execute.lto_priv.155+0x324>)
 80056fa:	eb40 0008 	adc.w	r0, r0, r8
 80056fe:	f7fa ffa7 	bl	8000650 <_test_assert>
 8005702:	4605      	mov	r5, r0
 8005704:	2800      	cmp	r0, #0
 8005706:	f47f af3f 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
 800570a:	2110      	movs	r1, #16
 800570c:	4857      	ldr	r0, [pc, #348]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 800570e:	f000 facf 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 8005712:	462a      	mov	r2, r5
 8005714:	4606      	mov	r6, r0
 8005716:	a901      	add	r1, sp, #4
 8005718:	4854      	ldr	r0, [pc, #336]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 800571a:	f7fb fc41 	bl	8000fa0 <chHeapStatus>
 800571e:	2801      	cmp	r0, #1
 8005720:	f000 809f 	beq.w	8005862 <test_010_001_execute.lto_priv.155+0x302>
 8005724:	2200      	movs	r2, #0
 8005726:	a901      	add	r1, sp, #4
 8005728:	4850      	ldr	r0, [pc, #320]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 800572a:	f7fb fc39 	bl	8000fa0 <chHeapStatus>
 800572e:	f1a0 0c02 	sub.w	ip, r0, #2
 8005732:	f1dc 0000 	rsbs	r0, ip, #0
 8005736:	eb40 000c 	adc.w	r0, r0, ip
 800573a:	494d      	ldr	r1, [pc, #308]	; (8005870 <test_010_001_execute.lto_priv.155+0x310>)
 800573c:	f7fa ff88 	bl	8000650 <_test_assert>
 8005740:	4605      	mov	r5, r0
 8005742:	2800      	cmp	r0, #0
 8005744:	f47f af20 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
    chHeapFree(p2);
 8005748:	4638      	mov	r0, r7
 800574a:	f7fb fc61 	bl	8001010 <chHeapFree>
    chHeapFree(p1);
 800574e:	4630      	mov	r0, r6
 8005750:	f7fb fc5e 	bl	8001010 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005754:	462a      	mov	r2, r5
 8005756:	a901      	add	r1, sp, #4
 8005758:	4844      	ldr	r0, [pc, #272]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 800575a:	f7fb fc21 	bl	8000fa0 <chHeapStatus>
 800575e:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 8005762:	f1de 0000 	rsbs	r0, lr, #0
 8005766:	4942      	ldr	r1, [pc, #264]	; (8005870 <test_010_001_execute.lto_priv.155+0x310>)
 8005768:	eb40 000e 	adc.w	r0, r0, lr
 800576c:	f7fa ff70 	bl	8000650 <_test_assert>
 8005770:	4605      	mov	r5, r0
 8005772:	2800      	cmp	r0, #0
 8005774:	f47f af08 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
  test_set_step(8);
 8005778:	2308      	movs	r3, #8
 800577a:	2110      	movs	r1, #16
 800577c:	483b      	ldr	r0, [pc, #236]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 800577e:	6023      	str	r3, [r4, #0]
 8005780:	f000 fa96 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
 8005784:	2110      	movs	r1, #16
 8005786:	4607      	mov	r7, r0
 8005788:	4838      	ldr	r0, [pc, #224]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 800578a:	f000 fa91 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
 800578e:	4606      	mov	r6, r0
    chHeapFree(p1);
 8005790:	4638      	mov	r0, r7
 8005792:	f7fb fc3d 	bl	8001010 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8005796:	462a      	mov	r2, r5
 8005798:	a901      	add	r1, sp, #4
 800579a:	4834      	ldr	r0, [pc, #208]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 800579c:	f7fb fc00 	bl	8000fa0 <chHeapStatus>
 80057a0:	1e87      	subs	r7, r0, #2
 80057a2:	4278      	negs	r0, r7
 80057a4:	4937      	ldr	r1, [pc, #220]	; (8005884 <test_010_001_execute.lto_priv.155+0x324>)
 80057a6:	4178      	adcs	r0, r7
 80057a8:	f7fa ff52 	bl	8000650 <_test_assert>
 80057ac:	4605      	mov	r5, r0
 80057ae:	2800      	cmp	r0, #0
 80057b0:	f47f aeea 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
 80057b4:	2120      	movs	r1, #32
 80057b6:	482d      	ldr	r0, [pc, #180]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 80057b8:	f000 fa7a 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
    chHeapFree(p1);
 80057bc:	f7fb fc28 	bl	8001010 <chHeapFree>
    chHeapFree(p2);
 80057c0:	4630      	mov	r0, r6
 80057c2:	f7fb fc25 	bl	8001010 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80057c6:	462a      	mov	r2, r5
 80057c8:	a901      	add	r1, sp, #4
 80057ca:	4828      	ldr	r0, [pc, #160]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 80057cc:	f7fb fbe8 	bl	8000fa0 <chHeapStatus>
 80057d0:	1e45      	subs	r5, r0, #1
 80057d2:	4268      	negs	r0, r5
 80057d4:	4926      	ldr	r1, [pc, #152]	; (8005870 <test_010_001_execute.lto_priv.155+0x310>)
 80057d6:	4168      	adcs	r0, r5
 80057d8:	f7fa ff3a 	bl	8000650 <_test_assert>
 80057dc:	4602      	mov	r2, r0
 80057de:	2800      	cmp	r0, #0
 80057e0:	f47f aed2 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
  test_set_step(9);
 80057e4:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 80057e6:	a901      	add	r1, sp, #4
 80057e8:	4820      	ldr	r0, [pc, #128]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
  test_set_step(9);
 80057ea:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 80057ec:	f7fb fbd8 	bl	8000fa0 <chHeapStatus>
 80057f0:	9901      	ldr	r1, [sp, #4]
 80057f2:	481e      	ldr	r0, [pc, #120]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 80057f4:	f000 fa5c 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
    test_assert(p1 != NULL, "allocation failed");
 80057f8:	4606      	mov	r6, r0
 80057fa:	3000      	adds	r0, #0
 80057fc:	491e      	ldr	r1, [pc, #120]	; (8005878 <test_010_001_execute.lto_priv.155+0x318>)
 80057fe:	bf18      	it	ne
 8005800:	2001      	movne	r0, #1
 8005802:	f7fa ff25 	bl	8000650 <_test_assert>
 8005806:	4602      	mov	r2, r0
 8005808:	2800      	cmp	r0, #0
 800580a:	f47f aebd 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 800580e:	4601      	mov	r1, r0
 8005810:	4816      	ldr	r0, [pc, #88]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
 8005812:	f7fb fbc5 	bl	8000fa0 <chHeapStatus>
 8005816:	fab0 f080 	clz	r0, r0
 800581a:	0940      	lsrs	r0, r0, #5
 800581c:	491a      	ldr	r1, [pc, #104]	; (8005888 <test_010_001_execute.lto_priv.155+0x328>)
 800581e:	f7fa ff17 	bl	8000650 <_test_assert>
 8005822:	4605      	mov	r5, r0
 8005824:	2800      	cmp	r0, #0
 8005826:	f47f aeaf 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
    chHeapFree(p1);
 800582a:	4630      	mov	r0, r6
 800582c:	f7fb fbf0 	bl	8001010 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005830:	462a      	mov	r2, r5
 8005832:	a901      	add	r1, sp, #4
  test_set_step(10);
 8005834:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005836:	480d      	ldr	r0, [pc, #52]	; (800586c <test_010_001_execute.lto_priv.155+0x30c>)
  test_set_step(10);
 8005838:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800583a:	f7fb fbb1 	bl	8000fa0 <chHeapStatus>
 800583e:	1e42      	subs	r2, r0, #1
 8005840:	4250      	negs	r0, r2
 8005842:	4150      	adcs	r0, r2
 8005844:	490a      	ldr	r1, [pc, #40]	; (8005870 <test_010_001_execute.lto_priv.155+0x310>)
 8005846:	f7fa ff03 	bl	8000650 <_test_assert>
 800584a:	2800      	cmp	r0, #0
 800584c:	f47f ae9c 	bne.w	8005588 <test_010_001_execute.lto_priv.155+0x28>
    test_assert(n == sz, "size changed");
 8005850:	9801      	ldr	r0, [sp, #4]
 8005852:	9b00      	ldr	r3, [sp, #0]
 8005854:	490d      	ldr	r1, [pc, #52]	; (800588c <test_010_001_execute.lto_priv.155+0x32c>)
 8005856:	1ac3      	subs	r3, r0, r3
 8005858:	4258      	negs	r0, r3
 800585a:	4158      	adcs	r0, r3
 800585c:	f7fa fef8 	bl	8000650 <_test_assert>
 8005860:	e692      	b.n	8005588 <test_010_001_execute.lto_priv.155+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 8005862:	2001      	movs	r0, #1
 8005864:	e769      	b.n	800573a <test_010_001_execute.lto_priv.155+0x1da>
 8005866:	bf00      	nop
 8005868:	2000106c 	.word	0x2000106c
 800586c:	20001218 	.word	0x20001218
 8005870:	08007334 	.word	0x08007334
 8005874:	0800731c 	.word	0x0800731c
 8005878:	08007308 	.word	0x08007308
 800587c:	080072bc 	.word	0x080072bc
 8005880:	080072d0 	.word	0x080072d0
 8005884:	080072e8 	.word	0x080072e8
 8005888:	080061c4 	.word	0x080061c4
 800588c:	080072f8 	.word	0x080072f8

08005890 <test_009_003_execute.lto_priv.153>:

static void test_009_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}

static void test_009_003_execute(void) {
 8005890:	b508      	push	{r3, lr}

  /* [9.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <test_009_003_execute.lto_priv.153+0x20>)
 8005894:	2201      	movs	r2, #1
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, MS2ST(100)) == NULL, "list not empty");
 8005896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(1);
 800589a:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, MS2ST(100)) == NULL, "list not empty");
 800589c:	f000 fb88 	bl	8005fb0 <chGuardedPoolAllocTimeout.constprop.17>
 80058a0:	fab0 f080 	clz	r0, r0
 80058a4:	0940      	lsrs	r0, r0, #5
 80058a6:	4903      	ldr	r1, [pc, #12]	; (80058b4 <test_009_003_execute.lto_priv.153+0x24>)
  }
}
 80058a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, MS2ST(100)) == NULL, "list not empty");
 80058ac:	f7fa bed0 	b.w	8000650 <_test_assert>
 80058b0:	2000106c 	.word	0x2000106c
 80058b4:	08007290 	.word	0x08007290
	...

080058c0 <test_009_002_execute.lto_priv.151>:
static void test_009_002_execute(void) {
 80058c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 80058c4:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80059bc <test_009_002_execute.lto_priv.151+0xfc>
 80058c8:	4d38      	ldr	r5, [pc, #224]	; (80059ac <test_009_002_execute.lto_priv.151+0xec>)
 80058ca:	4c39      	ldr	r4, [pc, #228]	; (80059b0 <test_009_002_execute.lto_priv.151+0xf0>)
 80058cc:	2301      	movs	r3, #1
 80058ce:	f8ca 3000 	str.w	r3, [sl]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 80058d2:	46a9      	mov	r9, r5
 80058d4:	2604      	movs	r6, #4
 80058d6:	f04f 0820 	mov.w	r8, #32
 80058da:	2700      	movs	r7, #0
 80058dc:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 80058e0:	68eb      	ldr	r3, [r5, #12]
 80058e2:	6023      	str	r3, [r4, #0]
  chSemSignalI(&gmp->sem);
 80058e4:	4648      	mov	r0, r9
  mp->next = php;
 80058e6:	60ec      	str	r4, [r5, #12]
  chSemSignalI(&gmp->sem);
 80058e8:	f7fb fc4a 	bl	8001180 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 80058ec:	f7fb f858 	bl	80009a0 <chSchRescheduleS>
 80058f0:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80058f4:	692b      	ldr	r3, [r5, #16]
  while (n != 0U) {
 80058f6:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80058f8:	441c      	add	r4, r3
  while (n != 0U) {
 80058fa:	d1ef      	bne.n	80058dc <test_009_002_execute.lto_priv.151+0x1c>
  test_set_step(2);
 80058fc:	2302      	movs	r3, #2
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80058fe:	4e2d      	ldr	r6, [pc, #180]	; (80059b4 <test_009_002_execute.lto_priv.151+0xf4>)
  test_set_step(2);
 8005900:	f8ca 3000 	str.w	r3, [sl]
 8005904:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005906:	2000      	movs	r0, #0
 8005908:	f000 fb52 	bl	8005fb0 <chGuardedPoolAllocTimeout.constprop.17>
 800590c:	3000      	adds	r0, #0
 800590e:	bf18      	it	ne
 8005910:	2001      	movne	r0, #1
 8005912:	4631      	mov	r1, r6
 8005914:	f7fa fe9c 	bl	8000650 <_test_assert>
 8005918:	2800      	cmp	r0, #0
 800591a:	d144      	bne.n	80059a6 <test_009_002_execute.lto_priv.151+0xe6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800591c:	3c01      	subs	r4, #1
 800591e:	d1f2      	bne.n	8005906 <test_009_002_execute.lto_priv.151+0x46>
  test_set_step(3);
 8005920:	2303      	movs	r3, #3
 8005922:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005926:	f000 fb43 	bl	8005fb0 <chGuardedPoolAllocTimeout.constprop.17>
 800592a:	fab0 f080 	clz	r0, r0
 800592e:	0940      	lsrs	r0, r0, #5
 8005930:	4921      	ldr	r1, [pc, #132]	; (80059b8 <test_009_002_execute.lto_priv.151+0xf8>)
 8005932:	f7fa fe8d 	bl	8000650 <_test_assert>
 8005936:	bbb0      	cbnz	r0, 80059a6 <test_009_002_execute.lto_priv.151+0xe6>
 8005938:	4e1d      	ldr	r6, [pc, #116]	; (80059b0 <test_009_002_execute.lto_priv.151+0xf0>)
  chSemSignalI(&gmp->sem);
 800593a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80059ac <test_009_002_execute.lto_priv.151+0xec>
  test_set_step(4);
 800593e:	2304      	movs	r3, #4
 8005940:	f106 0910 	add.w	r9, r6, #16
 8005944:	f8ca 3000 	str.w	r3, [sl]
 8005948:	2720      	movs	r7, #32
      chGuardedPoolFree(&gmp1, &objects[i]);
 800594a:	4633      	mov	r3, r6
 800594c:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 8005950:	68ea      	ldr	r2, [r5, #12]
 8005952:	f846 2b04 	str.w	r2, [r6], #4
  chSemSignalI(&gmp->sem);
 8005956:	4640      	mov	r0, r8
  mp->next = php;
 8005958:	60eb      	str	r3, [r5, #12]
  chSemSignalI(&gmp->sem);
 800595a:	f7fb fc11 	bl	8001180 <chSemSignalI>
  chSchRescheduleS();
 800595e:	f7fb f81f 	bl	80009a0 <chSchRescheduleS>
 8005962:	f384 8811 	msr	BASEPRI, r4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005966:	45b1      	cmp	r9, r6
 8005968:	d1ef      	bne.n	800594a <test_009_002_execute.lto_priv.151+0x8a>
  test_set_step(5);
 800596a:	2305      	movs	r3, #5
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800596c:	4d11      	ldr	r5, [pc, #68]	; (80059b4 <test_009_002_execute.lto_priv.151+0xf4>)
  test_set_step(5);
 800596e:	f8ca 3000 	str.w	r3, [sl]
 8005972:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005974:	2000      	movs	r0, #0
 8005976:	f000 fb1b 	bl	8005fb0 <chGuardedPoolAllocTimeout.constprop.17>
 800597a:	3000      	adds	r0, #0
 800597c:	bf18      	it	ne
 800597e:	2001      	movne	r0, #1
 8005980:	4629      	mov	r1, r5
 8005982:	f7fa fe65 	bl	8000650 <_test_assert>
 8005986:	b970      	cbnz	r0, 80059a6 <test_009_002_execute.lto_priv.151+0xe6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005988:	3c01      	subs	r4, #1
 800598a:	d1f3      	bne.n	8005974 <test_009_002_execute.lto_priv.151+0xb4>
  test_set_step(6);
 800598c:	2306      	movs	r3, #6
 800598e:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005992:	f000 fb0d 	bl	8005fb0 <chGuardedPoolAllocTimeout.constprop.17>
 8005996:	fab0 f080 	clz	r0, r0
 800599a:	0940      	lsrs	r0, r0, #5
 800599c:	4906      	ldr	r1, [pc, #24]	; (80059b8 <test_009_002_execute.lto_priv.151+0xf8>)
}
 800599e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80059a2:	f7fa be55 	b.w	8000650 <_test_assert>
 80059a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059aa:	bf00      	nop
 80059ac:	2000082c 	.word	0x2000082c
 80059b0:	20001208 	.word	0x20001208
 80059b4:	08007284 	.word	0x08007284
 80059b8:	08007290 	.word	0x08007290
 80059bc:	2000106c 	.word	0x2000106c

080059c0 <bmk_thread3.lto_priv.77>:
  chThdExit((msg_t)p);
 80059c0:	f7fb bc16 	b.w	80011f0 <chThdExit>
	...

080059d0 <chTMStartMeasurementX.constprop.66>:
  return DWT->CYCCNT;
 80059d0:	4b01      	ldr	r3, [pc, #4]	; (80059d8 <chTMStartMeasurementX.constprop.66+0x8>)
 80059d2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 80059d4:	6083      	str	r3, [r0, #8]
 80059d6:	4770      	bx	lr
 80059d8:	e0001000 	.word	0xe0001000
 80059dc:	00000000 	.word	0x00000000

080059e0 <chThdCreateStatic.constprop.65>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	4604      	mov	r4, r0
 80059e4:	2020      	movs	r0, #32
 80059e6:	f380 8811 	msr	BASEPRI, r0
  REG_INSERT(tp);
 80059ea:	4f1f      	ldr	r7, [pc, #124]	; (8005a68 <chThdCreateStatic.constprop.65+0x88>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80059ec:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
  REG_INSERT(tp);
 80059f0:	6978      	ldr	r0, [r7, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80059f2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80059f6:	f104 06dc 	add.w	r6, r4, #220	; 0xdc
 80059fa:	4d1c      	ldr	r5, [pc, #112]	; (8005a6c <chThdCreateStatic.constprop.65+0x8c>)
 80059fc:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
  tp->state     = CH_STATE_WTSTART;
 8005a00:	2202      	movs	r2, #2
  tp->refs      = (trefs_t)1;
 8005a02:	2301      	movs	r3, #1
  tp = (thread_t *)((uint8_t *)wsp + size -
 8005a04:	f504 7680 	add.w	r6, r4, #256	; 0x100
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8005a08:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
  tp->state     = CH_STATE_WTSTART;
 8005a0c:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
  tp->flags     = CH_FLAG_MODE_STATIC;
 8005a10:	2500      	movs	r5, #0
  tp->refs      = (trefs_t)1;
 8005a12:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  tp->name      = name;
 8005a16:	f8df e058 	ldr.w	lr, [pc, #88]	; 8005a70 <chThdCreateStatic.constprop.65+0x90>
  tp->prio      = prio;
 8005a1a:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
  queue_init(&tp->msgqueue);
 8005a1e:	f504 7396 	add.w	r3, r4, #300	; 0x12c
  list_init(&tp->waiting);
 8005a22:	f504 7294 	add.w	r2, r4, #296	; 0x128
  tp->realprio  = prio;
 8005a26:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
  REG_INSERT(tp);
 8005a2a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
  tp->wabase = (stkalign_t *)wsp;
 8005a2e:	f8c4 411c 	str.w	r4, [r4, #284]	; 0x11c
  tp->name      = name;
 8005a32:	f8c4 e118 	str.w	lr, [r4, #280]	; 0x118
  tp->flags     = CH_FLAG_MODE_STATIC;
 8005a36:	f884 5121 	strb.w	r5, [r4, #289]	; 0x121
  tp->mtxlist   = NULL;
 8005a3a:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
  tp->epending  = (eventmask_t)0;
 8005a3e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
  REG_INSERT(tp);
 8005a42:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
  chSchWakeupS(tp, MSG_OK);
 8005a46:	4629      	mov	r1, r5
  REG_INSERT(tp);
 8005a48:	6106      	str	r6, [r0, #16]
  chSchWakeupS(tp, MSG_OK);
 8005a4a:	4630      	mov	r0, r6
  tlp->next = (thread_t *)tlp;
 8005a4c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
  tqp->next = (thread_t *)tqp;
 8005a50:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
 8005a54:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  REG_INSERT(tp);
 8005a58:	617e      	str	r6, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
 8005a5a:	f7fa ffc9 	bl	80009f0 <chSchWakeupS>
 8005a5e:	f385 8811 	msr	BASEPRI, r5
}
 8005a62:	4630      	mov	r0, r6
 8005a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20001238 	.word	0x20001238
 8005a6c:	080002a5 	.word	0x080002a5
 8005a70:	0800743c 	.word	0x0800743c
	...

08005a80 <chSemWaitTimeout.constprop.61>:
 8005a80:	2320      	movs	r3, #32
 8005a82:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8005a86:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <chSemWaitTimeout.constprop.61+0x48>)
 8005a88:	6899      	ldr	r1, [r3, #8]
 8005a8a:	1e4a      	subs	r2, r1, #1
 8005a8c:	2a00      	cmp	r2, #0
 8005a8e:	609a      	str	r2, [r3, #8]
 8005a90:	db04      	blt.n	8005a9c <chSemWaitTimeout.constprop.61+0x1c>
  return MSG_OK;
 8005a92:	2000      	movs	r0, #0
 8005a94:	2300      	movs	r3, #0
 8005a96:	f383 8811 	msr	BASEPRI, r3
}
 8005a9a:	4770      	bx	lr
    if (TIME_IMMEDIATE == time) {
 8005a9c:	b180      	cbz	r0, 8005ac0 <chSemWaitTimeout.constprop.61+0x40>
    currp->u.wtsemp = sp;
 8005a9e:	4a0b      	ldr	r2, [pc, #44]	; (8005acc <chSemWaitTimeout.constprop.61+0x4c>)
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
 8005aa0:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8005aa2:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8005aa4:	685c      	ldr	r4, [r3, #4]
 8005aa6:	6253      	str	r3, [r2, #36]	; 0x24
 8005aa8:	e882 0018 	stmia.w	r2, {r3, r4}
 8005aac:	4601      	mov	r1, r0
  tp->queue.prev->queue.next = tp;
 8005aae:	6022      	str	r2, [r4, #0]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8005ab0:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8005ab2:	605a      	str	r2, [r3, #4]
 8005ab4:	f7fb fc3c 	bl	8001330 <chSchGoSleepTimeoutS>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f383 8811 	msr	BASEPRI, r3
}
 8005abe:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8005ac0:	6099      	str	r1, [r3, #8]
      return MSG_TIMEOUT;
 8005ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ac6:	e7e5      	b.n	8005a94 <chSemWaitTimeout.constprop.61+0x14>
 8005ac8:	2000130c 	.word	0x2000130c
 8005acc:	20001238 	.word	0x20001238

08005ad0 <chSemSignalWait.constprop.59>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	2320      	movs	r3, #32
 8005ad4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->cnt <= (cnt_t)0) {
 8005ad8:	4c15      	ldr	r4, [pc, #84]	; (8005b30 <chSemSignalWait.constprop.59+0x60>)
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	3301      	adds	r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	60a3      	str	r3, [r4, #8]
 8005ae2:	dd1a      	ble.n	8005b1a <chSemSignalWait.constprop.59+0x4a>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	60a3      	str	r3, [r4, #8]
 8005aea:	db06      	blt.n	8005afa <chSemSignalWait.constprop.59+0x2a>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8005aec:	f7fa ff58 	bl	80009a0 <chSchRescheduleS>
    msg = MSG_OK;
 8005af0:	2000      	movs	r0, #0
 8005af2:	2300      	movs	r3, #0
 8005af4:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8005af8:	bd38      	pop	{r3, r4, r5, pc}
    thread_t *ctp = currp;
 8005afa:	4a0e      	ldr	r2, [pc, #56]	; (8005b34 <chSemSignalWait.constprop.59+0x64>)
  tp->queue.prev             = tqp->prev;
 8005afc:	6863      	ldr	r3, [r4, #4]
 8005afe:	6995      	ldr	r5, [r2, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 8005b00:	2005      	movs	r0, #5
 8005b02:	606b      	str	r3, [r5, #4]
  tp->queue.next             = (thread_t *)tqp;
 8005b04:	602c      	str	r4, [r5, #0]
  tp->queue.prev->queue.next = tp;
 8005b06:	601d      	str	r5, [r3, #0]
    ctp->u.wtsemp = spw;
 8005b08:	626c      	str	r4, [r5, #36]	; 0x24
  tqp->prev                  = tp;
 8005b0a:	6065      	str	r5, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8005b0c:	f7fa ffc0 	bl	8000a90 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 8005b10:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005b12:	2300      	movs	r3, #0
 8005b14:	f383 8811 	msr	BASEPRI, r3
}
 8005b18:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
 8005b1a:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8005b1c:	6803      	ldr	r3, [r0, #0]
 8005b1e:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005b20:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 8005b22:	f7fb f815 	bl	8000b50 <chSchReadyI>
 8005b26:	2200      	movs	r2, #0
 8005b28:	68a3      	ldr	r3, [r4, #8]
 8005b2a:	6242      	str	r2, [r0, #36]	; 0x24
 8005b2c:	e7da      	b.n	8005ae4 <chSemSignalWait.constprop.59+0x14>
 8005b2e:	bf00      	nop
 8005b30:	2000130c 	.word	0x2000130c
 8005b34:	20001238 	.word	0x20001238
	...

08005b40 <chMtxTryLock.constprop.57>:
 8005b40:	2320      	movs	r3, #32
 8005b42:	f383 8811 	msr	BASEPRI, r3
  if (mp->owner != NULL) {
 8005b46:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <chMtxTryLock.constprop.57+0x2c>)
 8005b48:	689a      	ldr	r2, [r3, #8]
    return false;
 8005b4a:	2000      	movs	r0, #0
  if (mp->owner != NULL) {
 8005b4c:	b11a      	cbz	r2, 8005b56 <chMtxTryLock.constprop.57+0x16>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f383 8811 	msr	BASEPRI, r3
}
 8005b54:	4770      	bx	lr
  mp->owner = currp;
 8005b56:	4a06      	ldr	r2, [pc, #24]	; (8005b70 <chMtxTryLock.constprop.57+0x30>)
 8005b58:	6992      	ldr	r2, [r2, #24]
 8005b5a:	609a      	str	r2, [r3, #8]
  mp->next = currp->mtxlist;
 8005b5c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8005b5e:	60d9      	str	r1, [r3, #12]
  currp->mtxlist = mp;
 8005b60:	6393      	str	r3, [r2, #56]	; 0x38
 8005b62:	2001      	movs	r0, #1
 8005b64:	2300      	movs	r3, #0
 8005b66:	f383 8811 	msr	BASEPRI, r3
}
 8005b6a:	4770      	bx	lr
 8005b6c:	20000844 	.word	0x20000844
 8005b70:	20001238 	.word	0x20001238
	...

08005b80 <chCondSignal.constprop.55>:
void chCondSignal(condition_variable_t *cp) {
 8005b80:	b508      	push	{r3, lr}
 8005b82:	2320      	movs	r3, #32
 8005b84:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <chCondSignal.constprop.55+0x24>)
 8005b8a:	6818      	ldr	r0, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 8005b8c:	4298      	cmp	r0, r3
 8005b8e:	d005      	beq.n	8005b9c <chCondSignal.constprop.55+0x1c>
  tqp->next             = tp->queue.next;
 8005b90:	6802      	ldr	r2, [r0, #0]
 8005b92:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005b94:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8005b96:	2100      	movs	r1, #0
 8005b98:	f7fa ff2a 	bl	80009f0 <chSchWakeupS>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	bd08      	pop	{r3, pc}
 8005ba4:	20000824 	.word	0x20000824
	...

08005bb0 <chCondSignalI.constprop.54>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8005bb0:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <chCondSignalI.constprop.54+0x20>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d009      	beq.n	8005bcc <chCondSignalI.constprop.54+0x1c>
  tqp->next             = tp->queue.next;
 8005bb8:	6811      	ldr	r1, [r2, #0]
void chCondSignalI(condition_variable_t *cp) {
 8005bba:	b410      	push	{r4}
    tp->u.rdymsg = MSG_OK;
 8005bbc:	2400      	movs	r4, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8005bbe:	604b      	str	r3, [r1, #4]
 8005bc0:	6254      	str	r4, [r2, #36]	; 0x24
  tqp->next             = tp->queue.next;
 8005bc2:	6019      	str	r1, [r3, #0]
    (void) chSchReadyI(tp);
 8005bc4:	4610      	mov	r0, r2
}
 8005bc6:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
 8005bc8:	f7fa bfc2 	b.w	8000b50 <chSchReadyI>
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	20000824 	.word	0x20000824
	...

08005be0 <chEvtGetAndClearEvents.constprop.47>:
 8005be0:	2320      	movs	r3, #32
 8005be2:	f383 8811 	msr	BASEPRI, r3
  m = currp->epending & events;
 8005be6:	4b04      	ldr	r3, [pc, #16]	; (8005bf8 <chEvtGetAndClearEvents.constprop.47+0x18>)
 8005be8:	699a      	ldr	r2, [r3, #24]
  currp->epending &= ~events;
 8005bea:	2300      	movs	r3, #0
  m = currp->epending & events;
 8005bec:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
 8005bee:	6353      	str	r3, [r2, #52]	; 0x34
 8005bf0:	f383 8811 	msr	BASEPRI, r3
}
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	20001238 	.word	0x20001238
 8005bfc:	00000000 	.word	0x00000000

08005c00 <chEvtWaitOne.constprop.43>:
  thread_t *ctp = currp;
 8005c00:	4a0b      	ldr	r2, [pc, #44]	; (8005c30 <chEvtWaitOne.constprop.43+0x30>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 8005c02:	b510      	push	{r4, lr}
 8005c04:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8005c06:	6994      	ldr	r4, [r2, #24]
 8005c08:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 8005c0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8005c0e:	b933      	cbnz	r3, 8005c1e <chEvtWaitOne.constprop.43+0x1e>
    ctp->u.ewmask = events;
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c14:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8005c16:	200a      	movs	r0, #10
 8005c18:	f7fa ff3a 	bl	8000a90 <chSchGoSleepS>
    m = ctp->epending & events;
 8005c1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 8005c1e:	4258      	negs	r0, r3
 8005c20:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8005c22:	ea23 0300 	bic.w	r3, r3, r0
 8005c26:	6363      	str	r3, [r4, #52]	; 0x34
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f383 8811 	msr	BASEPRI, r3
}
 8005c2e:	bd10      	pop	{r4, pc}
 8005c30:	20001238 	.word	0x20001238
	...

08005c40 <chEvtWaitAny.constprop.42>:
  thread_t *ctp = currp;
 8005c40:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <chEvtWaitAny.constprop.42+0x28>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 8005c42:	b510      	push	{r4, lr}
 8005c44:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8005c46:	6994      	ldr	r4, [r2, #24]
 8005c48:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 8005c4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8005c4e:	b930      	cbnz	r0, 8005c5e <chEvtWaitAny.constprop.42+0x1e>
    ctp->u.ewmask = events;
 8005c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 8005c54:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 8005c56:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8005c58:	f7fa ff1a 	bl	8000a90 <chSchGoSleepS>
    m = ctp->epending & events;
 8005c5c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  ctp->epending &= ~m;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6363      	str	r3, [r4, #52]	; 0x34
 8005c62:	f383 8811 	msr	BASEPRI, r3
}
 8005c66:	bd10      	pop	{r4, pc}
 8005c68:	20001238 	.word	0x20001238
 8005c6c:	00000000 	.word	0x00000000

08005c70 <chEvtWaitAll.constprop.41>:
  thread_t *ctp = currp;
 8005c70:	4a0c      	ldr	r2, [pc, #48]	; (8005ca4 <chEvtWaitAll.constprop.41+0x34>)
eventmask_t chEvtWaitAll(eventmask_t events) {
 8005c72:	b510      	push	{r4, lr}
 8005c74:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8005c76:	6994      	ldr	r4, [r2, #24]
 8005c78:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 8005c7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c7e:	f003 0205 	and.w	r2, r3, #5
 8005c82:	2a05      	cmp	r2, #5
 8005c84:	d005      	beq.n	8005c92 <chEvtWaitAll.constprop.41+0x22>
    ctp->u.ewmask = events;
 8005c86:	2305      	movs	r3, #5
 8005c88:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8005c8a:	200b      	movs	r0, #11
 8005c8c:	f7fa ff00 	bl	8000a90 <chSchGoSleepS>
 8005c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
  ctp->epending &= ~events;
 8005c92:	f023 0305 	bic.w	r3, r3, #5
 8005c96:	6363      	str	r3, [r4, #52]	; 0x34
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f383 8811 	msr	BASEPRI, r3
}
 8005c9e:	2005      	movs	r0, #5
 8005ca0:	bd10      	pop	{r4, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20001238 	.word	0x20001238
	...

08005cb0 <chHeapAllocAligned.constprop.37>:
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8005cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    heapp = &default_heap;
 8005cb4:	4e39      	ldr	r6, [pc, #228]	; (8005d9c <chHeapAllocAligned.constprop.37+0xec>)
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	bf18      	it	ne
 8005cba:	4606      	movne	r6, r0
  H_LOCK(heapp);
 8005cbc:	f106 0710 	add.w	r7, r6, #16
 8005cc0:	4638      	mov	r0, r7
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005cc2:	f101 0807 	add.w	r8, r1, #7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8005cc6:	460c      	mov	r4, r1
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005cc8:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  H_LOCK(heapp);
 8005ccc:	f7fb f958 	bl	8000f80 <chMtxLock>
  qp = &heapp->header;
 8005cd0:	f106 0008 	add.w	r0, r6, #8
  while (H_NEXT(qp) != NULL) {
 8005cd4:	6802      	ldr	r2, [r0, #0]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005cd6:	f102 030f 	add.w	r3, r2, #15
 8005cda:	f023 0307 	bic.w	r3, r3, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8005cde:	461d      	mov	r5, r3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005ce0:	f102 0908 	add.w	r9, r2, #8
 8005ce4:	3b08      	subs	r3, #8
  while (H_NEXT(qp) != NULL) {
 8005ce6:	b17a      	cbz	r2, 8005d08 <chHeapAllocAligned.constprop.37+0x58>
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8005ce8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8005cec:	f10e 0101 	add.w	r1, lr, #1
 8005cf0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8005cf4:	eba1 0c05 	sub.w	ip, r1, r5
 8005cf8:	428b      	cmp	r3, r1
 8005cfa:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8005cfe:	d201      	bcs.n	8005d04 <chHeapAllocAligned.constprop.37+0x54>
 8005d00:	45e0      	cmp	r8, ip
 8005d02:	d913      	bls.n	8005d2c <chHeapAllocAligned.constprop.37+0x7c>
          H_NEXT(qp) = fp;
 8005d04:	4610      	mov	r0, r2
 8005d06:	e7e5      	b.n	8005cd4 <chHeapAllocAligned.constprop.37+0x24>
  H_UNLOCK(heapp);
 8005d08:	4638      	mov	r0, r7
 8005d0a:	f7fb f899 	bl	8000e40 <chMtxUnlock>
  if (heapp->provider != NULL) {
 8005d0e:	6833      	ldr	r3, [r6, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d040      	beq.n	8005d96 <chHeapAllocAligned.constprop.37+0xe6>
    hp = heapp->provider((pages + 1U) * CH_HEAP_ALIGNMENT, align);
 8005d14:	f108 0001 	add.w	r0, r8, #1
 8005d18:	00c0      	lsls	r0, r0, #3
 8005d1a:	2108      	movs	r1, #8
 8005d1c:	4798      	blx	r3
    if (hp != NULL) {
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d039      	beq.n	8005d96 <chHeapAllocAligned.constprop.37+0xe6>
      H_HEAP(hp) = heapp;
 8005d22:	6006      	str	r6, [r0, #0]
      H_SIZE(hp) = size;
 8005d24:	6044      	str	r4, [r0, #4]
      return (void *)H_BLOCK(hp);
 8005d26:	3008      	adds	r0, #8
}
 8005d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d31a      	bcc.n	8005d66 <chHeapAllocAligned.constprop.37+0xb6>
        if (H_PAGES(hp) == pages) {
 8005d30:	45f0      	cmp	r8, lr
 8005d32:	d02b      	beq.n	8005d8c <chHeapAllocAligned.constprop.37+0xdc>
          fp = H_BLOCK(hp) + pages;
 8005d34:	f108 0801 	add.w	r8, r8, #1
 8005d38:	eb02 0ec8 	add.w	lr, r2, r8, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8005d3c:	f10e 0308 	add.w	r3, lr, #8
 8005d40:	1ac9      	subs	r1, r1, r3
 8005d42:	10c9      	asrs	r1, r1, #3
          H_NEXT(fp) = H_NEXT(hp);
 8005d44:	6813      	ldr	r3, [r2, #0]
 8005d46:	f842 3038 	str.w	r3, [r2, r8, lsl #3]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005d4a:	464d      	mov	r5, r9
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8005d4c:	f8ce 1004 	str.w	r1, [lr, #4]
          H_NEXT(qp) = fp;
 8005d50:	4613      	mov	r3, r2
 8005d52:	f8c0 e000 	str.w	lr, [r0]
      H_UNLOCK(heapp);
 8005d56:	4638      	mov	r0, r7
      H_SIZE(hp) = size;
 8005d58:	605c      	str	r4, [r3, #4]
      H_HEAP(hp) = heapp;
 8005d5a:	601e      	str	r6, [r3, #0]
      H_UNLOCK(heapp);
 8005d5c:	f7fb f870 	bl	8000e40 <chMtxUnlock>
      return (void *)H_BLOCK(hp);
 8005d60:	4628      	mov	r0, r5
 8005d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8005d66:	eba3 0109 	sub.w	r1, r3, r9
 8005d6a:	10c9      	asrs	r1, r1, #3
        if (bpages > pages) {
 8005d6c:	45e0      	cmp	r8, ip
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8005d6e:	6051      	str	r1, [r2, #4]
        if (bpages > pages) {
 8005d70:	d2f1      	bcs.n	8005d56 <chHeapAllocAligned.constprop.37+0xa6>
          fp = H_BLOCK(ahp) + pages;
 8005d72:	f108 0e01 	add.w	lr, r8, #1
 8005d76:	eb03 00ce 	add.w	r0, r3, lr, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 8005d7a:	ea6f 0108 	mvn.w	r1, r8
 8005d7e:	4461      	add	r1, ip
 8005d80:	6041      	str	r1, [r0, #4]
          H_NEXT(fp) = H_NEXT(hp);
 8005d82:	6811      	ldr	r1, [r2, #0]
 8005d84:	f843 103e 	str.w	r1, [r3, lr, lsl #3]
          H_NEXT(hp) = fp;
 8005d88:	6010      	str	r0, [r2, #0]
 8005d8a:	e7e4      	b.n	8005d56 <chHeapAllocAligned.constprop.37+0xa6>
          H_NEXT(qp) = H_NEXT(hp);
 8005d8c:	6813      	ldr	r3, [r2, #0]
 8005d8e:	6003      	str	r3, [r0, #0]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005d90:	464d      	mov	r5, r9
          H_NEXT(qp) = H_NEXT(hp);
 8005d92:	4613      	mov	r3, r2
 8005d94:	e7df      	b.n	8005d56 <chHeapAllocAligned.constprop.37+0xa6>
  return NULL;
 8005d96:	2000      	movs	r0, #0
 8005d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d9c:	200012b0 	.word	0x200012b0

08005da0 <chThdCreateFromHeap.constprop.36>:
 *                      the thread into the working space area.
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8005da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005da2:	4604      	mov	r4, r0
 8005da4:	b087      	sub	sp, #28
 8005da6:	460f      	mov	r7, r1
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
  thread_t *tp;
  void *wsp;

  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8005da8:	4811      	ldr	r0, [pc, #68]	; (8005df0 <chThdCreateFromHeap.constprop.36+0x50>)
 8005daa:	4621      	mov	r1, r4
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8005dac:	4616      	mov	r6, r2
 8005dae:	461d      	mov	r5, r3
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8005db0:	f7ff ff7e 	bl	8005cb0 <chHeapAllocAligned.constprop.37>
  if (wsp == NULL) {
 8005db4:	b1d0      	cbz	r0, 8005dec <chThdCreateFromHeap.constprop.36+0x4c>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 8005db6:	4404      	add	r4, r0
  thread_descriptor_t td = {
 8005db8:	4b0e      	ldr	r3, [pc, #56]	; (8005df4 <chThdCreateFromHeap.constprop.36+0x54>)
 8005dba:	9304      	str	r3, [sp, #16]
 8005dbc:	9402      	str	r4, [sp, #8]
 8005dbe:	9700      	str	r7, [sp, #0]
 8005dc0:	9001      	str	r0, [sp, #4]
 8005dc2:	9603      	str	r6, [sp, #12]
 8005dc4:	9505      	str	r5, [sp, #20]
 8005dc6:	2320      	movs	r3, #32
 8005dc8:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8005dcc:	4668      	mov	r0, sp
 8005dce:	f7fa fd7f 	bl	80008d0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 8005dd8:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 8005dda:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8005ddc:	f7fa fe08 	bl	80009f0 <chSchWakeupS>
 8005de0:	2300      	movs	r3, #0
 8005de2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8005de6:	4620      	mov	r0, r4
 8005de8:	b007      	add	sp, #28
 8005dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8005dec:	4604      	mov	r4, r0
 8005dee:	e7fa      	b.n	8005de6 <chThdCreateFromHeap.constprop.36+0x46>
 8005df0:	200012d0 	.word	0x200012d0
 8005df4:	08005391 	.word	0x08005391
	...

08005e00 <chThdCreateFromMemoryPool.constprop.35>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8005e00:	b5f0      	push	{r4, r5, r6, r7, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005e02:	4d14      	ldr	r5, [pc, #80]	; (8005e54 <chThdCreateFromMemoryPool.constprop.35+0x54>)
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8005e04:	b087      	sub	sp, #28
 8005e06:	4607      	mov	r7, r0
  wsp = chPoolAlloc(mp);
 8005e08:	4628      	mov	r0, r5
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8005e0a:	460e      	mov	r6, r1
 8005e0c:	4614      	mov	r4, r2
  wsp = chPoolAlloc(mp);
 8005e0e:	f7fa fcc7 	bl	80007a0 <chPoolAlloc>
  if (wsp == NULL) {
 8005e12:	b1e0      	cbz	r0, 8005e4e <chThdCreateFromMemoryPool.constprop.35+0x4e>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8005e14:	686b      	ldr	r3, [r5, #4]
  thread_descriptor_t td = {
 8005e16:	4a10      	ldr	r2, [pc, #64]	; (8005e58 <chThdCreateFromMemoryPool.constprop.35+0x58>)
 8005e18:	9700      	str	r7, [sp, #0]
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8005e1a:	4403      	add	r3, r0
  thread_descriptor_t td = {
 8005e1c:	9302      	str	r3, [sp, #8]
 8005e1e:	9001      	str	r0, [sp, #4]
 8005e20:	9603      	str	r6, [sp, #12]
 8005e22:	9405      	str	r4, [sp, #20]
 8005e24:	9204      	str	r2, [sp, #16]
 8005e26:	2320      	movs	r3, #32
 8005e28:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8005e2c:	4668      	mov	r0, sp
 8005e2e:	f7fa fd4f 	bl	80008d0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 8005e32:	2302      	movs	r3, #2
 8005e34:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 8005e38:	6405      	str	r5, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 8005e3a:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 8005e3c:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8005e3e:	f7fa fdd7 	bl	80009f0 <chSchWakeupS>
 8005e42:	2300      	movs	r3, #0
 8005e44:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8005e48:	4620      	mov	r0, r4
 8005e4a:	b007      	add	sp, #28
 8005e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8005e4e:	4604      	mov	r4, r0
 8005e50:	e7fa      	b.n	8005e48 <chThdCreateFromMemoryPool.constprop.35+0x48>
 8005e52:	bf00      	nop
 8005e54:	20001300 	.word	0x20001300
 8005e58:	08005391 	.word	0x08005391
 8005e5c:	00000000 	.word	0x00000000

08005e60 <chMBResetI.constprop.30>:
void chMBResetI(mailbox_t *mbp) {
 8005e60:	b510      	push	{r4, lr}
  mbp->wrptr = mbp->buffer;
 8005e62:	4c09      	ldr	r4, [pc, #36]	; (8005e88 <chMBResetI.constprop.30+0x28>)
 8005e64:	6823      	ldr	r3, [r4, #0]
  chSemResetI(&mbp->emptysem, (cnt_t)(mbp->top - mbp->buffer));
 8005e66:	6861      	ldr	r1, [r4, #4]
  mbp->wrptr = mbp->buffer;
 8005e68:	60a3      	str	r3, [r4, #8]
  chSemResetI(&mbp->emptysem, (cnt_t)(mbp->top - mbp->buffer));
 8005e6a:	1ac9      	subs	r1, r1, r3
 8005e6c:	f104 001c 	add.w	r0, r4, #28
 8005e70:	1089      	asrs	r1, r1, #2
  mbp->rdptr = mbp->buffer;
 8005e72:	60e3      	str	r3, [r4, #12]
  chSemResetI(&mbp->emptysem, (cnt_t)(mbp->top - mbp->buffer));
 8005e74:	f7fb f994 	bl	80011a0 <chSemResetI>
  chSemResetI(&mbp->fullsem, (cnt_t)0);
 8005e78:	f104 0010 	add.w	r0, r4, #16
 8005e7c:	2100      	movs	r1, #0
}
 8005e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemResetI(&mbp->fullsem, (cnt_t)0);
 8005e82:	f7fb b98d 	b.w	80011a0 <chSemResetI>
 8005e86:	bf00      	nop
 8005e88:	20000854 	.word	0x20000854
 8005e8c:	00000000 	.word	0x00000000

08005e90 <chMBReset.constprop.29>:
void chMBReset(mailbox_t *mbp) {
 8005e90:	b508      	push	{r3, lr}
 8005e92:	2320      	movs	r3, #32
 8005e94:	f383 8811 	msr	BASEPRI, r3
  chMBResetI(mbp);
 8005e98:	f7ff ffe2 	bl	8005e60 <chMBResetI.constprop.30>
  chSchRescheduleS();
 8005e9c:	f7fa fd80 	bl	80009a0 <chSchRescheduleS>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	bd08      	pop	{r3, pc}
	...

08005eb0 <chMBPost.constprop.28>:
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	2320      	movs	r3, #32
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	f383 8811 	msr	BASEPRI, r3
  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
 8005eba:	4c0d      	ldr	r4, [pc, #52]	; (8005ef0 <chMBPost.constprop.28+0x40>)
 8005ebc:	f104 001c 	add.w	r0, r4, #28
 8005ec0:	f7fb fa5e 	bl	8001380 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	b968      	cbnz	r0, 8005ee4 <chMBPost.constprop.28+0x34>
    *mbp->wrptr++ = msg;
 8005ec8:	68a2      	ldr	r2, [r4, #8]
    if (mbp->wrptr >= mbp->top) {
 8005eca:	6861      	ldr	r1, [r4, #4]
    chSemSignalI(&mbp->fullsem);
 8005ecc:	4809      	ldr	r0, [pc, #36]	; (8005ef4 <chMBPost.constprop.28+0x44>)
    *mbp->wrptr++ = msg;
 8005ece:	1d13      	adds	r3, r2, #4
    if (mbp->wrptr >= mbp->top) {
 8005ed0:	428b      	cmp	r3, r1
    *mbp->wrptr++ = msg;
 8005ed2:	60a3      	str	r3, [r4, #8]
 8005ed4:	6016      	str	r6, [r2, #0]
      mbp->wrptr = mbp->buffer;
 8005ed6:	bf24      	itt	cs
 8005ed8:	6823      	ldrcs	r3, [r4, #0]
 8005eda:	60a3      	strcs	r3, [r4, #8]
    chSemSignalI(&mbp->fullsem);
 8005edc:	f7fb f950 	bl	8001180 <chSemSignalI>
    chSchRescheduleS();
 8005ee0:	f7fa fd5e 	bl	80009a0 <chSchRescheduleS>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f383 8811 	msr	BASEPRI, r3
}
 8005eea:	4628      	mov	r0, r5
 8005eec:	bd70      	pop	{r4, r5, r6, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000854 	.word	0x20000854
 8005ef4:	20000864 	.word	0x20000864
	...

08005f00 <chMBPostAhead.constprop.26>:
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	2320      	movs	r3, #32
 8005f04:	4606      	mov	r6, r0
 8005f06:	f383 8811 	msr	BASEPRI, r3
  rdymsg = chSemWaitTimeoutS(&mbp->emptysem, timeout);
 8005f0a:	4c10      	ldr	r4, [pc, #64]	; (8005f4c <chMBPostAhead.constprop.26+0x4c>)
 8005f0c:	f104 001c 	add.w	r0, r4, #28
 8005f10:	f7fb fa36 	bl	8001380 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005f14:	4605      	mov	r5, r0
 8005f16:	b120      	cbz	r0, 8005f22 <chMBPostAhead.constprop.26+0x22>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f383 8811 	msr	BASEPRI, r3
}
 8005f1e:	4628      	mov	r0, r5
 8005f20:	bd70      	pop	{r4, r5, r6, pc}
    if (--mbp->rdptr < mbp->buffer) {
 8005f22:	68e3      	ldr	r3, [r4, #12]
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	3b04      	subs	r3, #4
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	60e3      	str	r3, [r4, #12]
 8005f2c:	d202      	bcs.n	8005f34 <chMBPostAhead.constprop.26+0x34>
      mbp->rdptr = mbp->top - 1;
 8005f2e:	6863      	ldr	r3, [r4, #4]
 8005f30:	3b04      	subs	r3, #4
 8005f32:	60e3      	str	r3, [r4, #12]
    *mbp->rdptr = msg;
 8005f34:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->fullsem);
 8005f36:	4806      	ldr	r0, [pc, #24]	; (8005f50 <chMBPostAhead.constprop.26+0x50>)
 8005f38:	f7fb f922 	bl	8001180 <chSemSignalI>
    chSchRescheduleS();
 8005f3c:	f7fa fd30 	bl	80009a0 <chSchRescheduleS>
 8005f40:	2300      	movs	r3, #0
 8005f42:	f383 8811 	msr	BASEPRI, r3
}
 8005f46:	4628      	mov	r0, r5
 8005f48:	bd70      	pop	{r4, r5, r6, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000854 	.word	0x20000854
 8005f50:	20000864 	.word	0x20000864
	...

08005f60 <chMBFetch.constprop.24>:
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	2320      	movs	r3, #32
 8005f64:	4606      	mov	r6, r0
 8005f66:	f383 8811 	msr	BASEPRI, r3
  rdymsg = chSemWaitTimeoutS(&mbp->fullsem, timeout);
 8005f6a:	4c0d      	ldr	r4, [pc, #52]	; (8005fa0 <chMBFetch.constprop.24+0x40>)
 8005f6c:	f104 0010 	add.w	r0, r4, #16
 8005f70:	f7fb fa06 	bl	8001380 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005f74:	4605      	mov	r5, r0
 8005f76:	b970      	cbnz	r0, 8005f96 <chMBFetch.constprop.24+0x36>
    *msgp = *mbp->rdptr++;
 8005f78:	68e3      	ldr	r3, [r4, #12]
    if (mbp->rdptr >= mbp->top) {
 8005f7a:	6862      	ldr	r2, [r4, #4]
    *msgp = *mbp->rdptr++;
 8005f7c:	6819      	ldr	r1, [r3, #0]
    chSemSignalI(&mbp->emptysem);
 8005f7e:	4809      	ldr	r0, [pc, #36]	; (8005fa4 <chMBFetch.constprop.24+0x44>)
    *msgp = *mbp->rdptr++;
 8005f80:	3304      	adds	r3, #4
    if (mbp->rdptr >= mbp->top) {
 8005f82:	4293      	cmp	r3, r2
    *msgp = *mbp->rdptr++;
 8005f84:	60e3      	str	r3, [r4, #12]
 8005f86:	6031      	str	r1, [r6, #0]
      mbp->rdptr = mbp->buffer;
 8005f88:	bf24      	itt	cs
 8005f8a:	6823      	ldrcs	r3, [r4, #0]
 8005f8c:	60e3      	strcs	r3, [r4, #12]
    chSemSignalI(&mbp->emptysem);
 8005f8e:	f7fb f8f7 	bl	8001180 <chSemSignalI>
    chSchRescheduleS();
 8005f92:	f7fa fd05 	bl	80009a0 <chSchRescheduleS>
 8005f96:	2300      	movs	r3, #0
 8005f98:	f383 8811 	msr	BASEPRI, r3
}
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	20000854 	.word	0x20000854
 8005fa4:	20000870 	.word	0x20000870
	...

08005fb0 <chGuardedPoolAllocTimeout.constprop.17>:
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	4601      	mov	r1, r0
 8005fb4:	2320      	movs	r3, #32
 8005fb6:	f383 8811 	msr	BASEPRI, r3
  msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 8005fba:	4c0e      	ldr	r4, [pc, #56]	; (8005ff4 <chGuardedPoolAllocTimeout.constprop.17+0x44>)
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f7fb f9df 	bl	8001380 <chSemWaitTimeoutS>
  if (msg != MSG_OK) {
 8005fc2:	b988      	cbnz	r0, 8005fe8 <chGuardedPoolAllocTimeout.constprop.17+0x38>
  objp = mp->next;
 8005fc4:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 8005fc6:	b128      	cbz	r0, 8005fd4 <chGuardedPoolAllocTimeout.constprop.17+0x24>
    mp->next = mp->next->next;
 8005fc8:	6803      	ldr	r3, [r0, #0]
 8005fca:	60e3      	str	r3, [r4, #12]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f383 8811 	msr	BASEPRI, r3
}
 8005fd2:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
 8005fd4:	6963      	ldr	r3, [r4, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0f8      	beq.n	8005fcc <chGuardedPoolAllocTimeout.constprop.17+0x1c>
    objp = mp->provider(mp->object_size, PORT_NATURAL_ALIGN); /* TODO: Alignment is not properly handled */
 8005fda:	6920      	ldr	r0, [r4, #16]
 8005fdc:	2104      	movs	r1, #4
 8005fde:	4798      	blx	r3
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f383 8811 	msr	BASEPRI, r3
}
 8005fe6:	bd10      	pop	{r4, pc}
    return NULL;
 8005fe8:	2000      	movs	r0, #0
 8005fea:	2300      	movs	r3, #0
 8005fec:	f383 8811 	msr	BASEPRI, r3
}
 8005ff0:	bd10      	pop	{r4, pc}
 8005ff2:	bf00      	nop
 8005ff4:	2000082c 	.word	0x2000082c
	...

08006000 <_pal_lld_setgroupmode.constprop.5>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8006000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8006004:	2100      	movs	r1, #0

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8006006:	4c20      	ldr	r4, [pc, #128]	; (8006088 <_pal_lld_setgroupmode.constprop.5+0x88>)
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8006008:	2502      	movs	r5, #2
      altrmask = altr << ((bit & 7) * 4);
 800600a:	f04f 0807 	mov.w	r8, #7
      m4 = 15 << ((bit & 7) * 4);
 800600e:	f04f 0c0f 	mov.w	ip, #15
      m1 = 1 << bit;
 8006012:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
 8006016:	2703      	movs	r7, #3
 8006018:	e00d      	b.n	8006036 <_pal_lld_setgroupmode.constprop.5+0x36>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800601a:	6a26      	ldr	r6, [r4, #32]
 800601c:	ea26 0202 	bic.w	r2, r6, r2
 8006020:	ea42 0209 	orr.w	r2, r2, r9
 8006024:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8006026:	6822      	ldr	r2, [r4, #0]
 8006028:	4013      	ands	r3, r2
 800602a:	432b      	orrs	r3, r5
 800602c:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800602e:	0840      	lsrs	r0, r0, #1
 8006030:	d027      	beq.n	8006082 <_pal_lld_setgroupmode.constprop.5+0x82>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8006032:	00ad      	lsls	r5, r5, #2
    bit++;
 8006034:	3101      	adds	r1, #1
      m2 = 3 << (bit * 2);
 8006036:	004b      	lsls	r3, r1, #1
      altrmask = altr << ((bit & 7) * 4);
 8006038:	f001 0207 	and.w	r2, r1, #7
 800603c:	0092      	lsls	r2, r2, #2
      m2 = 3 << (bit * 2);
 800603e:	fa07 f303 	lsl.w	r3, r7, r3
    if ((mask & 1) != 0) {
 8006042:	f010 0f01 	tst.w	r0, #1
      altrmask = altr << ((bit & 7) * 4);
 8006046:	fa08 f902 	lsl.w	r9, r8, r2
      m1 = 1 << bit;
 800604a:	fa0e f601 	lsl.w	r6, lr, r1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800604e:	ea6f 0303 	mvn.w	r3, r3
      m4 = 15 << ((bit & 7) * 4);
 8006052:	fa0c f202 	lsl.w	r2, ip, r2
    if ((mask & 1) != 0) {
 8006056:	d0ea      	beq.n	800602e <_pal_lld_setgroupmode.constprop.5+0x2e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8006058:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800605c:	ea2a 0606 	bic.w	r6, sl, r6
 8006060:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8006062:	68a6      	ldr	r6, [r4, #8]
 8006064:	401e      	ands	r6, r3
 8006066:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8006068:	68e6      	ldr	r6, [r4, #12]
        if (bit < 8)
 800606a:	2907      	cmp	r1, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800606c:	ea06 0603 	and.w	r6, r6, r3
 8006070:	60e6      	str	r6, [r4, #12]
        if (bit < 8)
 8006072:	d9d2      	bls.n	800601a <_pal_lld_setgroupmode.constprop.5+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8006074:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006076:	ea26 0202 	bic.w	r2, r6, r2
 800607a:	ea42 0209 	orr.w	r2, r2, r9
 800607e:	6262      	str	r2, [r4, #36]	; 0x24
 8006080:	e7d1      	b.n	8006026 <_pal_lld_setgroupmode.constprop.5+0x26>
 8006082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006086:	bf00      	nop
 8006088:	40020000 	.word	0x40020000
 800608c:	00000000 	.word	0x00000000

08006090 <_test_assert_time_window.constprop.2>:
 8006090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006094:	1a09      	subs	r1, r1, r0
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	1a1b      	subs	r3, r3, r0
  if (!condition)
 800609a:	428b      	cmp	r3, r1
 800609c:	d308      	bcc.n	80060b0 <_test_assert_time_window.constprop.2+0x20>
  test_failure_message = msg;
 800609e:	4905      	ldr	r1, [pc, #20]	; (80060b4 <_test_assert_time_window.constprop.2+0x24>)
  test_local_fail      = true;
 80060a0:	4a05      	ldr	r2, [pc, #20]	; (80060b8 <_test_assert_time_window.constprop.2+0x28>)
  test_global_fail     = true;
 80060a2:	4b06      	ldr	r3, [pc, #24]	; (80060bc <_test_assert_time_window.constprop.2+0x2c>)
  test_failure_message = msg;
 80060a4:	4806      	ldr	r0, [pc, #24]	; (80060c0 <_test_assert_time_window.constprop.2+0x30>)
 80060a6:	6008      	str	r0, [r1, #0]
  test_local_fail      = true;
 80060a8:	2001      	movs	r0, #1
 80060aa:	7010      	strb	r0, [r2, #0]
  test_global_fail     = true;
 80060ac:	7018      	strb	r0, [r3, #0]
 80060ae:	4770      	bx	lr
  return false;
 80060b0:	2000      	movs	r0, #0
}
 80060b2:	4770      	bx	lr
 80060b4:	20001318 	.word	0x20001318
 80060b8:	2000131d 	.word	0x2000131d
 80060bc:	2000131c 	.word	0x2000131c
 80060c0:	08007428 	.word	0x08007428
